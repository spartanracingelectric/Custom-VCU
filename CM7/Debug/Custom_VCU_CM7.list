
Custom_VCU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d44  08006d44  0000808c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d4c  08006d4c  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d50  08006d50  00007d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  24000000  08006d54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  2400008c  08006de0  0000808c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240042f4  08006de0  000082f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d295  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ff  00000000  00000000  0002534f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00028d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001178  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dc6f  00000000  00000000  0002b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c67f  00000000  00000000  000691cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00192f0d  00000000  00000000  0008584e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021875b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c8  00000000  00000000  002187a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0021ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006c78 	.word	0x08006c78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	08006c78 	.word	0x08006c78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <vApplicationGetIdleTaskMemory+0x2c>)
 8000848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	4a06      	ldr	r2, [pc, #24]	@ (8000868 <vApplicationGetIdleTaskMemory+0x30>)
 800084e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	240000a8 	.word	0x240000a8
 8000868:	24000148 	.word	0x24000148

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000878:	bf00      	nop
 800087a:	4b4c      	ldr	r3, [pc, #304]	@ (80009ac <main+0x140>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <main+0x24>
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	627a      	str	r2, [r7, #36]	@ 0x24
 800088c:	2b00      	cmp	r3, #0
 800088e:	dcf4      	bgt.n	800087a <main+0xe>
  if ( timeout < 0 )
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	2b00      	cmp	r3, #0
 8000894:	da01      	bge.n	800089a <main+0x2e>
  {
  Error_Handler();
 8000896:	f000 f9d5 	bl	8000c44 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f000 fd7f 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f891 	bl	80009c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008a2:	4b42      	ldr	r3, [pc, #264]	@ (80009ac <main+0x140>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	4a40      	ldr	r2, [pc, #256]	@ (80009ac <main+0x140>)
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b2:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <main+0x140>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 f919 	bl	8001af8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 f92f 	bl	8001b2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008d4:	bf00      	nop
 80008d6:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <main+0x140>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d104      	bne.n	80008ec <main+0x80>
 80008e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dcf4      	bgt.n	80008d6 <main+0x6a>
if ( timeout < 0 )
 80008ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da01      	bge.n	80008f6 <main+0x8a>
{
Error_Handler();
 80008f2:	f000 f9a7 	bl	8000c44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 f8cf 	bl	8000a98 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <main+0x144>)
 80008fc:	f107 0408 	add.w	r4, r7, #8
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f003 ffb4 	bl	8004882 <osThreadCreate>
 800091a:	4603      	mov	r3, r0
 800091c:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <main+0x148>)
 800091e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000920:	2000      	movs	r0, #0
 8000922:	f000 fb0f 	bl	8000f44 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fb0c 	bl	8000f44 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800092c:	2002      	movs	r0, #2
 800092e:	f000 fb09 	bl	8000f44 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000932:	2101      	movs	r1, #1
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fbcf 	bl	80010d8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <main+0x14c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000942:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <main+0x14c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <main+0x14c>)
 800094a:	2200      	movs	r2, #0
 800094c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <main+0x14c>)
 8000950:	2200      	movs	r2, #0
 8000952:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <main+0x14c>)
 8000956:	2200      	movs	r2, #0
 8000958:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800095a:	4917      	ldr	r1, [pc, #92]	@ (80009b8 <main+0x14c>)
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fc3f 	bl	80011e0 <BSP_COM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <main+0x100>
  {
    Error_Handler();
 8000968:	f000 f96c 	bl	8000c44 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <main+0x150>)
 800096e:	f005 fab9 	bl	8005ee4 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fb5c 	bl	8001030 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000978:	2001      	movs	r0, #1
 800097a:	f000 fb59 	bl	8001030 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800097e:	2002      	movs	r0, #2
 8000980:	f000 fb56 	bl	8001030 <BSP_LED_On>
  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 8000984:	f003 ff76 	bl	8004874 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <main+0x154>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d1fb      	bne.n	8000988 <main+0x11c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <main+0x154>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fb74 	bl	8001084 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 800099c:	2001      	movs	r0, #1
 800099e:	f000 fb71 	bl	8001084 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 fb6e 	bl	8001084 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80009a8:	e7ee      	b.n	8000988 <main+0x11c>
 80009aa:	bf00      	nop
 80009ac:	58024400 	.word	0x58024400
 80009b0:	08006cb8 	.word	0x08006cb8
 80009b4:	2400035c 	.word	0x2400035c
 80009b8:	24000348 	.word	0x24000348
 80009bc:	08006c90 	.word	0x08006c90
 80009c0:	24000358 	.word	0x24000358

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	@ 0x70
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ce:	224c      	movs	r2, #76	@ 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 fadb 	bl	8005f8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2220      	movs	r2, #32
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 fad5 	bl	8005f8e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009e4:	2004      	movs	r0, #4
 80009e6:	f001 f8b5 	bl	8001b54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f2:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <SystemClock_Config+0xcc>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a0c:	4a21      	ldr	r2, [pc, #132]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a20:	bf00      	nop
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <SystemClock_Config+0xd0>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a2e:	d1f8      	bne.n	8000a22 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2340      	movs	r3, #64	@ 0x40
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f8df 	bl	8001c08 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a50:	f000 f8f8 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	233f      	movs	r3, #63	@ 0x3f
 8000a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fd1f 	bl	80024bc <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a84:	f000 f8de 	bl	8000c44 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3770      	adds	r7, #112	@ 0x70
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58000400 	.word	0x58000400
 8000a94:	58024800 	.word	0x58024800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b49      	ldr	r3, [pc, #292]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	4a47      	ldr	r2, [pc, #284]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abe:	4b45      	ldr	r3, [pc, #276]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b41      	ldr	r3, [pc, #260]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	4a40      	ldr	r2, [pc, #256]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000adc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	4a38      	ldr	r2, [pc, #224]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afa:	4b36      	ldr	r3, [pc, #216]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b08:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b18:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <MX_GPIO_Init+0x13c>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b26:	2332      	movs	r3, #50	@ 0x32
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b36:	230b      	movs	r3, #11
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4825      	ldr	r0, [pc, #148]	@ (8000bd8 <MX_GPIO_Init+0x140>)
 8000b42:	f000 fdf5 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b46:	2386      	movs	r3, #134	@ 0x86
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b56:	230b      	movs	r3, #11
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481e      	ldr	r0, [pc, #120]	@ (8000bdc <MX_GPIO_Init+0x144>)
 8000b62:	f000 fde5 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0x148>)
 8000b84:	f000 fdd4 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b88:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <MX_GPIO_Init+0x144>)
 8000ba6:	f000 fdc3 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000baa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <MX_GPIO_Init+0x14c>)
 8000bc8:	f000 fdb2 	bl	8001730 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58020400 	.word	0x58020400
 8000be4:	58021800 	.word	0x58021800

08000be8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f003 fe92 	bl	800491a <osDelay>
 8000bf6:	e7fb      	b.n	8000bf0 <StartDefaultTask+0x8>

08000bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c0a:	f000 fc03 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010000 	.word	0x40010000

08000c1c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <BSP_PB_Callback+0x24>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	24000358 	.word	0x24000358

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <Error_Handler+0x8>

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_MspInit+0x38>)
 8000c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_MspInit+0x38>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_MspInit+0x38>)
 8000c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	210f      	movs	r1, #15
 8000c78:	f06f 0001 	mvn.w	r0, #1
 8000c7c:	f000 fcae 	bl	80015dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	@ 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b0f      	cmp	r3, #15
 8000c98:	d842      	bhi.n	8000d20 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f000 fc9c 	bl	80015dc <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ca4:	2019      	movs	r0, #25
 8000ca6:	f000 fcb3 	bl	8001610 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000caa:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <HAL_InitTick+0xac>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <HAL_InitTick+0xb0>)
 8000cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cb6:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <HAL_InitTick+0xb0>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <HAL_InitTick+0xb0>)
 8000cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 ff7b 	bl	8002bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cde:	f001 ff63 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8000ce2:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ce6:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <HAL_InitTick+0xb4>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	0c9b      	lsrs	r3, r3, #18
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <HAL_InitTick+0xbc>)
 8000cf6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000cfa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d00:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000d14:	f002 fa5e 	bl	80031d4 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d107      	bne.n	8000d2e <HAL_InitTick+0xa2>
 8000d1e:	e001      	b.n	8000d24 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e005      	b.n	8000d30 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d24:	4807      	ldr	r0, [pc, #28]	@ (8000d44 <HAL_InitTick+0xb8>)
 8000d26:	f002 fab7 	bl	8003298 <HAL_TIM_Base_Start_IT>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3738      	adds	r7, #56	@ 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	24000024 	.word	0x24000024
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	431bde83 	.word	0x431bde83
 8000d44:	24000360 	.word	0x24000360
 8000d48:	40010000 	.word	0x40010000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <TIM1_UP_IRQHandler+0x10>)
 8000d8a:	f002 fafd 	bl	8003388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000360 	.word	0x24000360

08000d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 fa0d 	bl	80011bc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e00a      	b.n	8000dce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db8:	f3af 8000 	nop.w
 8000dbc:	4601      	mov	r1, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	60ba      	str	r2, [r7, #8]
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dbf0      	blt.n	8000db8 <_read+0x12>
  }

  return len;
 8000dd6:	687b      	ldr	r3, [r7, #4]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e009      	b.n	8000e06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	60ba      	str	r2, [r7, #8]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fa52 	bl	80012a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbf1      	blt.n	8000df2 <_write+0x12>
  }
  return len;
 8000e0e:	687b      	ldr	r3, [r7, #4]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_close>:

int _close(int file)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e40:	605a      	str	r2, [r3, #4]
  return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_isatty>:

int _isatty(int file)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e58:	2301      	movs	r3, #1
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f005 f91a 	bl	80060e8 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	24080000 	.word	0x24080000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	240003ac 	.word	0x240003ac
 8000ee8:	240042f8 	.word	0x240042f8

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f28 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ef0:	f7ff fc8a 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef4:	f7ff fbda 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f005 f8e9 	bl	80060f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fca3 	bl	800086c <main>
  bx  lr
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f30:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000f34:	08006d54 	.word	0x08006d54
  ldr r2, =_sbss
 8000f38:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000f3c:	240042f4 	.word	0x240042f4

08000f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC3_IRQHandler>
	...

08000f44 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d009      	beq.n	8000f6c <BSP_LED_Init+0x28>
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d006      	beq.n	8000f6c <BSP_LED_Init+0x28>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d003      	beq.n	8000f6c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f64:	f06f 0301 	mvn.w	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f6a:	e055      	b.n	8001018 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10f      	bne.n	8000f92 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f72:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	e021      	b.n	8000fd6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10f      	bne.n	8000fb8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	e00e      	b.n	8000fd6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <BSP_LED_Init+0xe0>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <BSP_LED_Init+0xe4>)
 8000fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fde:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <BSP_LED_Init+0xe8>)
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	f107 0218 	add.w	r2, r7, #24
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fb98 	bl	8001730 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <BSP_LED_Init+0xe8>)
 8001004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <BSP_LED_Init+0xe4>)
 800100c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f000 fd3c 	bl	8001a90 <HAL_GPIO_WritePin>
  }

  return ret;
 8001018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800101a:	4618      	mov	r0, r3
 800101c:	3730      	adds	r7, #48	@ 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58024400 	.word	0x58024400
 8001028:	08006cec 	.word	0x08006cec
 800102c:	2400000c 	.word	0x2400000c

08001030 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <BSP_LED_On+0x28>
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d006      	beq.n	8001058 <BSP_LED_On+0x28>
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d003      	beq.n	8001058 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001050:	f06f 0301 	mvn.w	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e00b      	b.n	8001070 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <BSP_LED_On+0x4c>)
 800105c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <BSP_LED_On+0x50>)
 8001064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f000 fd10 	bl	8001a90 <HAL_GPIO_WritePin>
  }

  return ret;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2400000c 	.word	0x2400000c
 8001080:	08006cec 	.word	0x08006cec

08001084 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d009      	beq.n	80010ac <BSP_LED_Toggle+0x28>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d006      	beq.n	80010ac <BSP_LED_Toggle+0x28>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d003      	beq.n	80010ac <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010a4:	f06f 0301 	mvn.w	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e00b      	b.n	80010c4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <BSP_LED_Toggle+0x4c>)
 80010b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <BSP_LED_Toggle+0x50>)
 80010b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f000 fcff 	bl	8001ac2 <HAL_GPIO_TogglePin>
  }

  return ret;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	08006cec 	.word	0x08006cec

080010d8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80010e8:	4b2e      	ldr	r3, [pc, #184]	@ (80011a4 <BSP_PB_Init+0xcc>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <BSP_PB_Init+0xcc>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <BSP_PB_Init+0xcc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <BSP_PB_Init+0xd0>)
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 faff 	bl	8001730 <HAL_GPIO_Init>
 8001132:	e031      	b.n	8001198 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001134:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001138:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <BSP_PB_Init+0xd0>)
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	f107 020c 	add.w	r2, r7, #12
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f000 faf1 	bl	8001730 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <BSP_PB_Init+0xd4>)
 8001154:	441a      	add	r2, r3
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4915      	ldr	r1, [pc, #84]	@ (80011b0 <BSP_PB_Init+0xd8>)
 800115a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f000 fa94 	bl	800168e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <BSP_PB_Init+0xd4>)
 800116c:	1898      	adds	r0, r3, r2
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <BSP_PB_Init+0xdc>)
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	461a      	mov	r2, r3
 8001178:	2100      	movs	r1, #0
 800117a:	f000 fa69 	bl	8001650 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800117e:	2028      	movs	r0, #40	@ 0x28
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <BSP_PB_Init+0xe0>)
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	f000 fa26 	bl	80015dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001190:	2328      	movs	r3, #40	@ 0x28
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa3c 	bl	8001610 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	58024400 	.word	0x58024400
 80011a8:	24000018 	.word	0x24000018
 80011ac:	240003b0 	.word	0x240003b0
 80011b0:	08006cf4 	.word	0x08006cf4
 80011b4:	2400001c 	.word	0x2400001c
 80011b8:	24000020 	.word	0x24000020

080011bc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <BSP_PB_IRQHandler+0x20>)
 80011cc:	4413      	add	r3, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fa72 	bl	80016b8 <HAL_EXTI_IRQHandler>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	240003b0 	.word	0x240003b0

080011e0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011f6:	f06f 0301 	mvn.w	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e018      	b.n	8001230 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2294      	movs	r2, #148	@ 0x94
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <BSP_COM_Init+0x5c>)
 8001208:	4413      	add	r3, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f86e 	bl	80012ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2294      	movs	r2, #148	@ 0x94
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <BSP_COM_Init+0x5c>)
 800121a:	4413      	add	r3, r2
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f80e 	bl	8001240 <MX_USART3_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800122a:	f06f 0303 	mvn.w	r3, #3
 800122e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240003b8 	.word	0x240003b8

08001240 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_USART3_Init+0x60>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	220c      	movs	r2, #12
 800125e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	895b      	ldrh	r3, [r3, #10]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	891b      	ldrh	r3, [r3, #8]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	899b      	ldrh	r3, [r3, #12]
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800128c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f002 fa68 	bl	8003764 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000008 	.word	0x24000008

080012a4 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <__io_putchar+0x30>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	2394      	movs	r3, #148	@ 0x94
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <__io_putchar+0x34>)
 80012ba:	1898      	adds	r0, r3, r2
 80012bc:	1d39      	adds	r1, r7, #4
 80012be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c2:	2201      	movs	r2, #1
 80012c4:	f002 faa8 	bl	8003818 <HAL_UART_Transmit>
  return ch;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400044c 	.word	0x2400044c
 80012d8:	240003b8 	.word	0x240003b8

080012dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fc9b 	bl	8000c1c <BSP_PB_Callback>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <COM1_MspInit+0xa8>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a26      	ldr	r2, [pc, #152]	@ (8001394 <COM1_MspInit+0xa8>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <COM1_MspInit+0xa8>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <COM1_MspInit+0xa8>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <COM1_MspInit+0xa8>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <COM1_MspInit+0xa8>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <COM1_MspInit+0xa8>)
 8001332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001336:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <COM1_MspInit+0xa8>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800133c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <COM1_MspInit+0xa8>)
 8001342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800134e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001352:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800135c:	2301      	movs	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001360:	2307      	movs	r3, #7
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <COM1_MspInit+0xac>)
 800136c:	f000 f9e0 	bl	8001730 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001374:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800137a:	2307      	movs	r3, #7
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <COM1_MspInit+0xac>)
 8001386:	f000 f9d3 	bl	8001730 <HAL_GPIO_Init>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	58024400 	.word	0x58024400
 8001398:	58020c00 	.word	0x58020c00

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 f90f 	bl	80015c6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a8:	f001 fa3e 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4913      	ldr	r1, [pc, #76]	@ (8001408 <HAL_Init+0x6c>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_Init+0x68>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <HAL_Init+0x6c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_Init+0x70>)
 80013de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_Init+0x74>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	200f      	movs	r0, #15
 80013e8:	f7ff fc50 	bl	8000c8c <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e002      	b.n	80013fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff fc2b 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	08006cdc 	.word	0x08006cdc
 800140c:	24000004 	.word	0x24000004
 8001410:	24000000 	.word	0x24000000

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	24000028 	.word	0x24000028
 8001438:	24000450 	.word	0x24000450

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	24000450 	.word	0x24000450

08001454 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <HAL_GetREVID+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0c1b      	lsrs	r3, r3, #16
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	5c001000 	.word	0x5c001000

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <__NVIC_SetPriorityGrouping+0x40>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	4313      	orrs	r3, r2
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x40>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	05fa0000 	.word	0x05fa0000

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	@ (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	@ (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	@ (800155c <__NVIC_SetPriority+0x50>)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	@ 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	@ 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff4c 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ea:	f7ff ff63 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 80015ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	6978      	ldr	r0, [r7, #20]
 80015f6:	f7ff ffb3 	bl	8001560 <NVIC_EncodePriority>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff82 	bl	800150c <__NVIC_SetPriority>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff56 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_GetCurrentCPUID+0x20>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001638:	2b70      	cmp	r3, #112	@ 0x70
 800163a:	d101      	bne.n	8001640 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800163c:	2303      	movs	r3, #3
 800163e:	e000      	b.n	8001642 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001640:	2301      	movs	r3, #1
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	460b      	mov	r3, r1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e00a      	b.n	8001682 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]
      break;
 8001678:	e002      	b.n	8001680 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
      break;
 800167e:	bf00      	nop
  }

  return status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e003      	b.n	80016aa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0c1b      	lsrs	r3, r3, #16
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80016dc:	f7ff ffa6 	bl	800162c <HAL_GetCurrentCPUID>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d105      	bne.n	80016f2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	011a      	lsls	r2, r3, #4
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <HAL_EXTI_IRQHandler+0x70>)
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e004      	b.n	80016fc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	011a      	lsls	r2, r3, #4
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_EXTI_IRQHandler+0x74>)
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4798      	blx	r3
    }
  }
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58000088 	.word	0x58000088
 800172c:	580000c8 	.word	0x580000c8

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <HAL_GPIO_Init+0x234>)
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001742:	e194      	b.n	8001a6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8186 	beq.w	8001a68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x44>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	69b9      	ldr	r1, [r7, #24]
 8001862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80e0 	beq.w	8001a68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_GPIO_Init+0x238>)
 80018ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a29      	ldr	r2, [pc, #164]	@ (800196c <HAL_GPIO_Init+0x23c>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <HAL_GPIO_Init+0x240>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d052      	beq.n	8001998 <HAL_GPIO_Init+0x268>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <HAL_GPIO_Init+0x244>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <HAL_GPIO_Init+0x248>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <HAL_GPIO_Init+0x24c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <HAL_GPIO_Init+0x250>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <HAL_GPIO_Init+0x254>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <HAL_GPIO_Init+0x258>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a19      	ldr	r2, [pc, #100]	@ (800198c <HAL_GPIO_Init+0x25c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a18      	ldr	r2, [pc, #96]	@ (8001990 <HAL_GPIO_Init+0x260>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_GPIO_Init+0x264>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20e>
 800193a:	2309      	movs	r3, #9
 800193c:	e02d      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800193e:	230a      	movs	r3, #10
 8001940:	e02b      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001942:	2308      	movs	r3, #8
 8001944:	e029      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001946:	2307      	movs	r3, #7
 8001948:	e027      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800194a:	2306      	movs	r3, #6
 800194c:	e025      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800194e:	2305      	movs	r3, #5
 8001950:	e023      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001952:	2304      	movs	r3, #4
 8001954:	e021      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001956:	2303      	movs	r3, #3
 8001958:	e01f      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800195a:	2302      	movs	r3, #2
 800195c:	e01d      	b.n	800199a <HAL_GPIO_Init+0x26a>
 800195e:	2301      	movs	r3, #1
 8001960:	e01b      	b.n	800199a <HAL_GPIO_Init+0x26a>
 8001962:	bf00      	nop
 8001964:	58000080 	.word	0x58000080
 8001968:	58024400 	.word	0x58024400
 800196c:	58000400 	.word	0x58000400
 8001970:	58020000 	.word	0x58020000
 8001974:	58020400 	.word	0x58020400
 8001978:	58020800 	.word	0x58020800
 800197c:	58020c00 	.word	0x58020c00
 8001980:	58021000 	.word	0x58021000
 8001984:	58021400 	.word	0x58021400
 8001988:	58021800 	.word	0x58021800
 800198c:	58021c00 	.word	0x58021c00
 8001990:	58022000 	.word	0x58022000
 8001994:	58022400 	.word	0x58022400
 8001998:	2300      	movs	r3, #0
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019aa:	4938      	ldr	r1, [pc, #224]	@ (8001a8c <HAL_GPIO_Init+0x35c>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f ae63 	bne.w	8001744 <HAL_GPIO_Init+0x14>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3724      	adds	r7, #36	@ 0x24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58000400 	.word	0x58000400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	619a      	str	r2, [r3, #24]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	041a      	lsls	r2, r3, #16
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	619a      	str	r2, [r3, #24]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001b00:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <HAL_HSEM_FastTake+0x2c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3320      	adds	r3, #32
 8001b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_HSEM_FastTake+0x30>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	58026400 	.word	0x58026400
 8001b28:	80000300 	.word	0x80000300

08001b2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001b36:	4906      	ldr	r1, [pc, #24]	@ (8001b50 <HAL_HSEM_Release+0x24>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58026400 	.word	0x58026400

08001b54 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d00a      	beq.n	8001b7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b68:	4b26      	ldr	r3, [pc, #152]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e040      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e03e      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001b86:	491f      	ldr	r1, [pc, #124]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b8e:	f7ff fc55 	bl	800143c <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b94:	e009      	b.n	8001baa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b96:	f7ff fc51 	bl	800143c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ba4:	d901      	bls.n	8001baa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e028      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b1e      	cmp	r3, #30
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bc2:	d005      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b1d      	cmp	r3, #29
 8001bc8:	d002      	beq.n	8001bd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b2d      	cmp	r3, #45	@ 0x2d
 8001bce:	d114      	bne.n	8001bfa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001bd0:	f7ff fc34 	bl	800143c <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bd6:	e009      	b.n	8001bec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bd8:	f7ff fc30 	bl	800143c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be6:	d901      	bls.n	8001bec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e007      	b.n	8001bfc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_PWREx_ConfigSupply+0xb0>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58024800 	.word	0x58024800

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f000 bc48 	b.w	80024ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8088 	beq.w	8001d3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b99      	ldr	r3, [pc, #612]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c34:	4b96      	ldr	r3, [pc, #600]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_OscConfig+0x48>
 8001c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c42:	2b18      	cmp	r3, #24
 8001c44:	d111      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62>
 8001c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	4b8f      	ldr	r3, [pc, #572]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d06d      	beq.n	8001d38 <HAL_RCC_OscConfig+0x130>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d169      	bne.n	8001d38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f000 bc21 	b.w	80024ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x7a>
 8001c74:	4b86      	ldr	r3, [pc, #536]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a85      	ldr	r2, [pc, #532]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e02e      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd8>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x9c>
 8001c8a:	4b81      	ldr	r3, [pc, #516]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a80      	ldr	r2, [pc, #512]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b7e      	ldr	r3, [pc, #504]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xc0>
 8001cae:	4b78      	ldr	r3, [pc, #480]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a77      	ldr	r2, [pc, #476]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b75      	ldr	r3, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a74      	ldr	r2, [pc, #464]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd8>
 8001cc8:	4b71      	ldr	r3, [pc, #452]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a70      	ldr	r2, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6d      	ldr	r2, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fba8 	bl	800143c <HAL_GetTick>
 8001cec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fba4 	bl	800143c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e3d4      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d02:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xe8>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb94 	bl	800143c <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fb90 	bl	800143c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	@ 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e3c0      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d2a:	4b59      	ldr	r3, [pc, #356]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x110>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80ca 	beq.w	8001edc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d48:	4b51      	ldr	r3, [pc, #324]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d52:	4b4f      	ldr	r3, [pc, #316]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_RCC_OscConfig+0x166>
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	2b18      	cmp	r3, #24
 8001d62:	d156      	bne.n	8001e12 <HAL_RCC_OscConfig+0x20a>
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d151      	bne.n	8001e12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6e:	4b48      	ldr	r3, [pc, #288]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x17e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e392      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d86:	4b42      	ldr	r3, [pc, #264]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0219 	bic.w	r2, r3, #25
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	493f      	ldr	r1, [pc, #252]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fb50 	bl	800143c <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fb4c 	bl	800143c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e37c      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db2:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	f7ff fb49 	bl	8001454 <HAL_GetREVID>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d817      	bhi.n	8001dfc <HAL_RCC_OscConfig+0x1f4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b40      	cmp	r3, #64	@ 0x40
 8001dd2:	d108      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1de>
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de4:	e07a      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	031b      	lsls	r3, r3, #12
 8001df4:	4926      	ldr	r1, [pc, #152]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfa:	e06f      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	4921      	ldr	r1, [pc, #132]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	e064      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d047      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0219 	bic.w	r2, r3, #25
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	491a      	ldr	r1, [pc, #104]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb06 	bl	800143c <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff fb02 	bl	800143c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e332      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	f7ff faff 	bl	8001454 <HAL_GetREVID>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d819      	bhi.n	8001e94 <HAL_RCC_OscConfig+0x28c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d108      	bne.n	8001e7a <HAL_RCC_OscConfig+0x272>
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e70:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e76:	6053      	str	r3, [r2, #4]
 8001e78:	e030      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	031b      	lsls	r3, r3, #12
 8001e88:	4901      	ldr	r1, [pc, #4]	@ (8001e90 <HAL_RCC_OscConfig+0x288>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e025      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
 8001e90:	58024400 	.word	0x58024400
 8001e94:	4b9a      	ldr	r3, [pc, #616]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4997      	ldr	r1, [pc, #604]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e018      	b.n	8001edc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b95      	ldr	r3, [pc, #596]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a94      	ldr	r2, [pc, #592]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fac1 	bl	800143c <HAL_GetTick>
 8001eba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fabd 	bl	800143c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e2ed      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ed0:	4b8b      	ldr	r3, [pc, #556]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a9 	beq.w	800203c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ef2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ef4:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d007      	beq.n	8001f10 <HAL_RCC_OscConfig+0x308>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b18      	cmp	r3, #24
 8001f04:	d13a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x374>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d135      	bne.n	8001f7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f10:	4b7b      	ldr	r3, [pc, #492]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x320>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b80      	cmp	r3, #128	@ 0x80
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e2c1      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f28:	f7ff fa94 	bl	8001454 <HAL_GetREVID>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d817      	bhi.n	8001f66 <HAL_RCC_OscConfig+0x35e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x348>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f46:	4a6e      	ldr	r2, [pc, #440]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4e:	e075      	b.n	800203c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f50:	4b6b      	ldr	r3, [pc, #428]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	069b      	lsls	r3, r3, #26
 8001f5e:	4968      	ldr	r1, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f64:	e06a      	b.n	800203c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f66:	4b66      	ldr	r3, [pc, #408]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	4962      	ldr	r1, [pc, #392]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f7a:	e05f      	b.n	800203c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d042      	beq.n	800200a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f84:	4b5e      	ldr	r3, [pc, #376]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5d      	ldr	r2, [pc, #372]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fa54 	bl	800143c <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f98:	f7ff fa50 	bl	800143c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e280      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001faa:	4b55      	ldr	r3, [pc, #340]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fb6:	f7ff fa4d 	bl	8001454 <HAL_GetREVID>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d817      	bhi.n	8001ff4 <HAL_RCC_OscConfig+0x3ec>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d108      	bne.n	8001fde <HAL_RCC_OscConfig+0x3d6>
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fda:	6053      	str	r3, [r2, #4]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0x434>
 8001fde:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	069b      	lsls	r3, r3, #26
 8001fec:	4944      	ldr	r1, [pc, #272]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
 8001ff2:	e023      	b.n	800203c <HAL_RCC_OscConfig+0x434>
 8001ff4:	4b42      	ldr	r3, [pc, #264]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	493f      	ldr	r1, [pc, #252]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e018      	b.n	800203c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800200a:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a3c      	ldr	r2, [pc, #240]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff fa11 	bl	800143c <HAL_GetTick>
 800201a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800201e:	f7ff fa0d 	bl	800143c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e23d      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002030:	4b33      	ldr	r3, [pc, #204]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d036      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d019      	beq.n	8002084 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002054:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff f9ee 	bl	800143c <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff f9ea 	bl	800143c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e21a      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x45c>
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002088:	4a1d      	ldr	r2, [pc, #116]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f9d4 	bl	800143c <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f9d0 	bl	800143c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e200      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d039      	beq.n	8002136 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01c      	beq.n	8002104 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f9b1 	bl	800143c <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020de:	f7ff f9ad 	bl	800143c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1dd      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x4d6>
 80020fc:	e01b      	b.n	8002136 <HAL_RCC_OscConfig+0x52e>
 80020fe:	bf00      	nop
 8002100:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002104:	4b9b      	ldr	r3, [pc, #620]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a9a      	ldr	r2, [pc, #616]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800210a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800210e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002110:	f7ff f994 	bl	800143c <HAL_GetTick>
 8002114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002118:	f7ff f990 	bl	800143c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1c0      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800212a:	4b92      	ldr	r3, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8081 	beq.w	8002246 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002144:	4b8c      	ldr	r3, [pc, #560]	@ (8002378 <HAL_RCC_OscConfig+0x770>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a8b      	ldr	r2, [pc, #556]	@ (8002378 <HAL_RCC_OscConfig+0x770>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002150:	f7ff f974 	bl	800143c <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7ff f970 	bl	800143c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1a0      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800216a:	4b83      	ldr	r3, [pc, #524]	@ (8002378 <HAL_RCC_OscConfig+0x770>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x584>
 800217e:	4b7d      	ldr	r3, [pc, #500]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a7c      	ldr	r2, [pc, #496]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	e02d      	b.n	80021e8 <HAL_RCC_OscConfig+0x5e0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x5a6>
 8002194:	4b77      	ldr	r3, [pc, #476]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	4a76      	ldr	r2, [pc, #472]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a0:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a73      	ldr	r2, [pc, #460]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x5e0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c8>
 80021b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0x5e0>
 80021d0:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d4:	4a67      	ldr	r2, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	@ 0x70
 80021dc:	4b65      	ldr	r3, [pc, #404]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a64      	ldr	r2, [pc, #400]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d015      	beq.n	800221c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f924 	bl	800143c <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f920 	bl	800143c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e14e      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800220e:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0ee      	beq.n	80021f8 <HAL_RCC_OscConfig+0x5f0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff f90e 	bl	800143c <HAL_GetTick>
 8002220:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7ff f90a 	bl	800143c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e138      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800223a:	4b4e      	ldr	r3, [pc, #312]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ee      	bne.n	8002224 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 812d 	beq.w	80024aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002250:	4b48      	ldr	r3, [pc, #288]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002258:	2b18      	cmp	r3, #24
 800225a:	f000 80bd 	beq.w	80023d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 809e 	bne.w	80023a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b42      	ldr	r3, [pc, #264]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a41      	ldr	r2, [pc, #260]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800226e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f8e2 	bl	800143c <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f8de 	bl	800143c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e10e      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228e:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229a:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800229c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800229e:	4b37      	ldr	r3, [pc, #220]	@ (800237c <HAL_RCC_OscConfig+0x774>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	430a      	orrs	r2, r1
 80022ae:	4931      	ldr	r1, [pc, #196]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	3b01      	subs	r3, #1
 80022ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	3b01      	subs	r3, #1
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	3b01      	subs	r3, #1
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022e4:	4923      	ldr	r1, [pc, #140]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022ea:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	4a21      	ldr	r2, [pc, #132]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022fa:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <HAL_RCC_OscConfig+0x778>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002302:	00d2      	lsls	r2, r2, #3
 8002304:	491b      	ldr	r1, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002306:	4313      	orrs	r3, r2
 8002308:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	f023 020c 	bic.w	r2, r3, #12
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	4917      	ldr	r1, [pc, #92]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800231c:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	f023 0202 	bic.w	r2, r3, #2
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	4912      	ldr	r1, [pc, #72]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	4a10      	ldr	r2, [pc, #64]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800233a:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235e:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_RCC_OscConfig+0x76c>)
 8002364:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f867 	bl	800143c <HAL_GetTick>
 800236e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002370:	e011      	b.n	8002396 <HAL_RCC_OscConfig+0x78e>
 8002372:	bf00      	nop
 8002374:	58024400 	.word	0x58024400
 8002378:	58024800 	.word	0x58024800
 800237c:	fffffc0c 	.word	0xfffffc0c
 8002380:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f85a 	bl	800143c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e08a      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x77c>
 80023a2:	e082      	b.n	80024aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a42      	ldr	r2, [pc, #264]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80023aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff f844 	bl	800143c <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff f840 	bl	800143c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e070      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ca:	4b3a      	ldr	r3, [pc, #232]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x7b0>
 80023d6:	e068      	b.n	80024aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023d8:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023de:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d031      	beq.n	8002450 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0203 	and.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d12a      	bne.n	8002450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d122      	bne.n	8002450 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	0a5b      	lsrs	r3, r3, #9
 800241e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d111      	bne.n	8002450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002438:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	0e1b      	lsrs	r3, r3, #24
 8002442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e02b      	b.n	80024ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800245e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d01f      	beq.n	80024aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	4a11      	ldr	r2, [pc, #68]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002476:	f7fe ffe1 	bl	800143c <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800247c:	bf00      	nop
 800247e:	f7fe ffdd 	bl	800143c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	4293      	cmp	r3, r2
 8002488:	d0f9      	beq.n	800247e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_RCC_OscConfig+0x8b0>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002496:	00d2      	lsls	r2, r2, #3
 8002498:	4906      	ldr	r1, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_RCC_OscConfig+0x8ac>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3730      	adds	r7, #48	@ 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	58024400 	.word	0x58024400
 80024b8:	ffff0007 	.word	0xffff0007

080024bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e19c      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b8a      	ldr	r3, [pc, #552]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d910      	bls.n	8002500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b87      	ldr	r3, [pc, #540]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	4985      	ldr	r1, [pc, #532]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b83      	ldr	r3, [pc, #524]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e184      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	4b7b      	ldr	r3, [pc, #492]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002518:	429a      	cmp	r2, r3
 800251a:	d908      	bls.n	800252e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800251c:	4b78      	ldr	r3, [pc, #480]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4975      	ldr	r1, [pc, #468]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800252a:	4313      	orrs	r3, r2
 800252c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	4b70      	ldr	r3, [pc, #448]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002546:	429a      	cmp	r2, r3
 8002548:	d908      	bls.n	800255c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800254a:	4b6d      	ldr	r3, [pc, #436]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	496a      	ldr	r1, [pc, #424]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002558:	4313      	orrs	r3, r2
 800255a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	4b64      	ldr	r3, [pc, #400]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002574:	429a      	cmp	r2, r3
 8002576:	d908      	bls.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002578:	4b61      	ldr	r3, [pc, #388]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	495e      	ldr	r1, [pc, #376]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002586:	4313      	orrs	r3, r2
 8002588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d908      	bls.n	80025b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025a6:	4b56      	ldr	r3, [pc, #344]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4953      	ldr	r1, [pc, #332]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d908      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f023 020f 	bic.w	r2, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4947      	ldr	r1, [pc, #284]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d055      	beq.n	800269e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025f2:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4940      	ldr	r1, [pc, #256]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002600:	4313      	orrs	r3, r2
 8002602:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d107      	bne.n	800261c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260c:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d121      	bne.n	800265c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0f6      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d115      	bne.n	800265c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0ea      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0de      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264c:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d6      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800265c:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f023 0207 	bic.w	r2, r3, #7
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4925      	ldr	r1, [pc, #148]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800266a:	4313      	orrs	r3, r2
 800266c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800266e:	f7fe fee5 	bl	800143c <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002674:	e00a      	b.n	800268c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002676:	f7fe fee1 	bl	800143c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0be      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	429a      	cmp	r2, r3
 800269c:	d1eb      	bne.n	8002676 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d208      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	490e      	ldr	r1, [pc, #56]	@ (8002700 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d214      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 020f 	bic.w	r2, r3, #15
 80026e2:	4906      	ldr	r1, [pc, #24]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <HAL_RCC_ClockConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e086      	b.n	800280a <HAL_RCC_ClockConfig+0x34e>
 80026fc:	52002000 	.word	0x52002000
 8002700:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800271c:	429a      	cmp	r2, r3
 800271e:	d208      	bcs.n	8002732 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002720:	4b3c      	ldr	r3, [pc, #240]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4939      	ldr	r1, [pc, #228]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 800272e:	4313      	orrs	r3, r2
 8002730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800274a:	429a      	cmp	r2, r3
 800274c:	d208      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800274e:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	492e      	ldr	r1, [pc, #184]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 800275c:	4313      	orrs	r3, r2
 800275e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002778:	429a      	cmp	r2, r3
 800277a:	d208      	bcs.n	800278e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800277c:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4922      	ldr	r1, [pc, #136]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 800278a:	4313      	orrs	r3, r2
 800278c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d010      	beq.n	80027bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d208      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4917      	ldr	r1, [pc, #92]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027bc:	f000 f834 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	4912      	ldr	r1, [pc, #72]	@ (8002818 <HAL_RCC_ClockConfig+0x35c>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_RCC_ClockConfig+0x358>)
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <HAL_RCC_ClockConfig+0x35c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <HAL_RCC_ClockConfig+0x360>)
 80027f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_RCC_ClockConfig+0x364>)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_RCC_ClockConfig+0x368>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fa44 	bl	8000c8c <HAL_InitTick>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
 8002818:	08006cdc 	.word	0x08006cdc
 800281c:	24000004 	.word	0x24000004
 8002820:	24000000 	.word	0x24000000
 8002824:	24000024 	.word	0x24000024

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282e:	4bb3      	ldr	r3, [pc, #716]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002836:	2b18      	cmp	r3, #24
 8002838:	f200 8155 	bhi.w	8002ae6 <HAL_RCC_GetSysClockFreq+0x2be>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <HAL_RCC_GetSysClockFreq+0x1c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	080028a9 	.word	0x080028a9
 8002848:	08002ae7 	.word	0x08002ae7
 800284c:	08002ae7 	.word	0x08002ae7
 8002850:	08002ae7 	.word	0x08002ae7
 8002854:	08002ae7 	.word	0x08002ae7
 8002858:	08002ae7 	.word	0x08002ae7
 800285c:	08002ae7 	.word	0x08002ae7
 8002860:	08002ae7 	.word	0x08002ae7
 8002864:	080028cf 	.word	0x080028cf
 8002868:	08002ae7 	.word	0x08002ae7
 800286c:	08002ae7 	.word	0x08002ae7
 8002870:	08002ae7 	.word	0x08002ae7
 8002874:	08002ae7 	.word	0x08002ae7
 8002878:	08002ae7 	.word	0x08002ae7
 800287c:	08002ae7 	.word	0x08002ae7
 8002880:	08002ae7 	.word	0x08002ae7
 8002884:	080028d5 	.word	0x080028d5
 8002888:	08002ae7 	.word	0x08002ae7
 800288c:	08002ae7 	.word	0x08002ae7
 8002890:	08002ae7 	.word	0x08002ae7
 8002894:	08002ae7 	.word	0x08002ae7
 8002898:	08002ae7 	.word	0x08002ae7
 800289c:	08002ae7 	.word	0x08002ae7
 80028a0:	08002ae7 	.word	0x08002ae7
 80028a4:	080028db 	.word	0x080028db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028a8:	4b94      	ldr	r3, [pc, #592]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028b4:	4b91      	ldr	r3, [pc, #580]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	4a90      	ldr	r2, [pc, #576]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80028c6:	e111      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028ca:	61bb      	str	r3, [r7, #24]
      break;
 80028cc:	e10e      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d0:	61bb      	str	r3, [r7, #24]
      break;
 80028d2:	e10b      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028d6:	61bb      	str	r3, [r7, #24]
      break;
 80028d8:	e108      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028e4:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028f0:	4b82      	ldr	r3, [pc, #520]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028fa:	4b80      	ldr	r3, [pc, #512]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80e1 	beq.w	8002ae0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f000 8083 	beq.w	8002a2c <HAL_RCC_GetSysClockFreq+0x204>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b02      	cmp	r3, #2
 800292a:	f200 80a1 	bhi.w	8002a70 <HAL_RCC_GetSysClockFreq+0x248>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x114>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d056      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800293a:	e099      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800293c:	4b6f      	ldr	r3, [pc, #444]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02d      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002948:	4b6c      	ldr	r3, [pc, #432]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	4a6b      	ldr	r2, [pc, #428]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002972:	4b62      	ldr	r3, [pc, #392]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002982:	ed97 6a02 	vldr	s12, [r7, #8]
 8002986:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800298a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029a2:	e087      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002b10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80029b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b6:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e6:	e065      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029fa:	4b40      	ldr	r3, [pc, #256]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a2a:	e043      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002b18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a6e:	e021      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ab2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	0a5b      	lsrs	r3, r3, #9
 8002aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002abe:	3301      	adds	r3, #1
 8002ac0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad8:	ee17 3a90 	vmov	r3, s15
 8002adc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ade:	e005      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ae8:	61bb      	str	r3, [r7, #24]
      break;
 8002aea:	bf00      	nop
  }

  return sysclockfreq;
 8002aec:	69bb      	ldr	r3, [r7, #24]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	58024400 	.word	0x58024400
 8002b00:	03d09000 	.word	0x03d09000
 8002b04:	003d0900 	.word	0x003d0900
 8002b08:	017d7840 	.word	0x017d7840
 8002b0c:	46000000 	.word	0x46000000
 8002b10:	4c742400 	.word	0x4c742400
 8002b14:	4a742400 	.word	0x4a742400
 8002b18:	4bbebc20 	.word	0x4bbebc20

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b22:	f7ff fe81 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490f      	ldr	r1, [pc, #60]	@ (8002b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b5a:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	08006cdc 	.word	0x08006cdc
 8002b74:	24000004 	.word	0x24000004
 8002b78:	24000000 	.word	0x24000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b80:	f7ff ffcc 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4904      	ldr	r1, [pc, #16]	@ (8002ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	08006cdc 	.word	0x08006cdc

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002bac:	f7ff ffb6 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4904      	ldr	r1, [pc, #16]	@ (8002bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	08006cdc 	.word	0x08006cdc

08002bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	223f      	movs	r2, #63	@ 0x3f
 8002be2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0207 	and.w	r2, r3, #7
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002bf0:	4b17      	ldr	r3, [pc, #92]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002bfc:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_RCC_GetClockConfig+0x7c>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_GetClockConfig+0x80>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	58024400 	.word	0x58024400
 8002c54:	52002000 	.word	0x52002000

08002c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002c5c:	f7ff ff5e 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4904      	ldr	r1, [pc, #16]	@ (8002c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	08006cdc 	.word	0x08006cdc

08002c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002c96:	4b9f      	ldr	r3, [pc, #636]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	0b1b      	lsrs	r3, r3, #12
 8002c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002cae:	4b99      	ldr	r3, [pc, #612]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8111 	beq.w	8002ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f000 8083 	beq.w	8002de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f200 80a1 	bhi.w	8002e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d056      	beq.n	8002d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002cee:	e099      	b.n	8002e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf0:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02d      	beq.n	8002d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cfc:	4b85      	ldr	r3, [pc, #532]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	4a84      	ldr	r2, [pc, #528]	@ (8002f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d26:	4b7b      	ldr	r3, [pc, #492]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002d56:	e087      	b.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d9a:	e065      	b.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dae:	4b59      	ldr	r3, [pc, #356]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dde:	e043      	b.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df2:	4b48      	ldr	r3, [pc, #288]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e22:	e021      	b.n	8002e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	0a5b      	lsrs	r3, r3, #9
 8002e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	ee17 2a90 	vmov	r2, s15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ebc:	ee17 2a90 	vmov	r2, s15
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eea:	ee17 2a90 	vmov	r2, s15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002ef2:	e008      	b.n	8002f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
}
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	@ 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	58024400 	.word	0x58024400
 8002f18:	03d09000 	.word	0x03d09000
 8002f1c:	46000000 	.word	0x46000000
 8002f20:	4c742400 	.word	0x4c742400
 8002f24:	4a742400 	.word	0x4a742400
 8002f28:	4bbebc20 	.word	0x4bbebc20

08002f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f34:	4ba1      	ldr	r3, [pc, #644]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	0d1b      	lsrs	r3, r3, #20
 8002f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002f56:	4b99      	ldr	r3, [pc, #612]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	08db      	lsrs	r3, r3, #3
 8002f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8111 	beq.w	800319c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	f000 8083 	beq.w	8003088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f200 80a1 	bhi.w	80030cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d056      	beq.n	8003044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002f96:	e099      	b.n	80030cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f98:	4b88      	ldr	r3, [pc, #544]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02d      	beq.n	8003000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fa4:	4b85      	ldr	r3, [pc, #532]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	4a84      	ldr	r2, [pc, #528]	@ (80031c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fce:	4b7b      	ldr	r3, [pc, #492]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002ffe:	e087      	b.n	8003110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80031c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800300e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003012:	4b6a      	ldr	r3, [pc, #424]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003022:	ed97 6a03 	vldr	s12, [r7, #12]
 8003026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800302a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003042:	e065      	b.n	8003110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003056:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003066:	ed97 6a03 	vldr	s12, [r7, #12]
 800306a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800306e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800307a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003086:	e043      	b.n	8003110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80031d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800309a:	4b48      	ldr	r3, [pc, #288]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80030ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030ca:	e021      	b.n	8003110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80031cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80030da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030de:	4b37      	ldr	r3, [pc, #220]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80030f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800310e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003110:	4b2a      	ldr	r3, [pc, #168]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	0a5b      	lsrs	r3, r3, #9
 8003116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800312a:	edd7 6a07 	vldr	s13, [r7, #28]
 800312e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	ee17 2a90 	vmov	r2, s15
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800313e:	4b1f      	ldr	r3, [pc, #124]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003158:	edd7 6a07 	vldr	s13, [r7, #28]
 800315c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003164:	ee17 2a90 	vmov	r2, s15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003186:	edd7 6a07 	vldr	s13, [r7, #28]
 800318a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800318e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003192:	ee17 2a90 	vmov	r2, s15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
}
 80031ae:	bf00      	nop
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	58024400 	.word	0x58024400
 80031c0:	03d09000 	.word	0x03d09000
 80031c4:	46000000 	.word	0x46000000
 80031c8:	4c742400 	.word	0x4c742400
 80031cc:	4a742400 	.word	0x4a742400
 80031d0:	4bbebc20 	.word	0x4bbebc20

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e049      	b.n	800327a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f841 	bl	8003282 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 f9e8 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e054      	b.n	800335a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d022      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032da:	d01d      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a22      	ldr	r2, [pc, #136]	@ (800336c <HAL_TIM_Base_Start_IT+0xd4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d018      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a21      	ldr	r2, [pc, #132]	@ (8003370 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <HAL_TIM_Base_Start_IT+0xdc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00e      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003378 <HAL_TIM_Base_Start_IT+0xe0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <HAL_TIM_Base_Start_IT+0xe4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x80>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1b      	ldr	r2, [pc, #108]	@ (8003380 <HAL_TIM_Base_Start_IT+0xe8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d115      	bne.n	8003344 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_TIM_Base_Start_IT+0xec>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d015      	beq.n	8003356 <HAL_TIM_Base_Start_IT+0xbe>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d011      	beq.n	8003356 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e008      	b.n	8003356 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e000      	b.n	8003358 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40010400 	.word	0x40010400
 800337c:	40001800 	.word	0x40001800
 8003380:	40014000 	.word	0x40014000
 8003384:	00010007 	.word	0x00010007

08003388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0202 	mvn.w	r2, #2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8e9 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8db 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8ec 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0204 	mvn.w	r2, #4
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8c3 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b5 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8c6 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0208 	mvn.w	r2, #8
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2204      	movs	r2, #4
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f89d 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f88f 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8a0 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0210 	mvn.w	r2, #16
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2208      	movs	r2, #8
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f877 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f869 	bl	8003596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f87a 	bl	80035be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0201 	mvn.w	r2, #1
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fb82 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f90d 	bl	800373c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f905 	bl	8003750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f834 	bl	80035d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00c      	beq.n	800358e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0220 	mvn.w	r2, #32
 8003586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8cd 	bl	8003728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a43      	ldr	r2, [pc, #268]	@ (8003708 <TIM_Base_SetConfig+0x120>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a40      	ldr	r2, [pc, #256]	@ (800370c <TIM_Base_SetConfig+0x124>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3f      	ldr	r2, [pc, #252]	@ (8003710 <TIM_Base_SetConfig+0x128>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3e      	ldr	r2, [pc, #248]	@ (8003714 <TIM_Base_SetConfig+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3d      	ldr	r2, [pc, #244]	@ (8003718 <TIM_Base_SetConfig+0x130>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <TIM_Base_SetConfig+0x120>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2f      	ldr	r2, [pc, #188]	@ (800370c <TIM_Base_SetConfig+0x124>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2e      	ldr	r2, [pc, #184]	@ (8003710 <TIM_Base_SetConfig+0x128>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2d      	ldr	r2, [pc, #180]	@ (8003714 <TIM_Base_SetConfig+0x12c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2c      	ldr	r2, [pc, #176]	@ (8003718 <TIM_Base_SetConfig+0x130>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <TIM_Base_SetConfig+0x134>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <TIM_Base_SetConfig+0x138>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a29      	ldr	r2, [pc, #164]	@ (8003724 <TIM_Base_SetConfig+0x13c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <TIM_Base_SetConfig+0x120>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00f      	beq.n	80036da <TIM_Base_SetConfig+0xf2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a16      	ldr	r2, [pc, #88]	@ (8003718 <TIM_Base_SetConfig+0x130>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00b      	beq.n	80036da <TIM_Base_SetConfig+0xf2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a15      	ldr	r2, [pc, #84]	@ (800371c <TIM_Base_SetConfig+0x134>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <TIM_Base_SetConfig+0xf2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <TIM_Base_SetConfig+0x138>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_Base_SetConfig+0xf2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a13      	ldr	r2, [pc, #76]	@ (8003724 <TIM_Base_SetConfig+0x13c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d103      	bne.n	80036e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800

08003728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e042      	b.n	80037fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f83b 	bl	8003804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2224      	movs	r2, #36	@ 0x24
 8003792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fe28 	bl	8004404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8bd 	bl	8003934 <UART_SetConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e01b      	b.n	80037fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fea7 	bl	8004548 <UART_CheckIdleState>
 80037fa:	4603      	mov	r3, r0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	2b20      	cmp	r3, #32
 8003830:	d17b      	bne.n	800392a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_Transmit+0x26>
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e074      	b.n	800392c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	@ 0x21
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003852:	f7fd fdf3 	bl	800143c <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003870:	d108      	bne.n	8003884 <HAL_UART_Transmit+0x6c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e003      	b.n	800388c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800388c:	e030      	b.n	80038f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	@ 0x80
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 feff 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e03d      	b.n	800392c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3302      	adds	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e007      	b.n	80038de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1c8      	bne.n	800388e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	2140      	movs	r1, #64	@ 0x40
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fec8 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e006      	b.n	800392c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003938:	b092      	sub	sp, #72	@ 0x48
 800393a:	af00      	add	r7, sp, #0
 800393c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	431a      	orrs	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	431a      	orrs	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4bbe      	ldr	r3, [pc, #760]	@ (8003c5c <UART_SetConfig+0x328>)
 8003964:	4013      	ands	r3, r2
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800396c:	430b      	orrs	r3, r1
 800396e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4ab3      	ldr	r2, [pc, #716]	@ (8003c60 <UART_SetConfig+0x32c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800399c:	4313      	orrs	r3, r2
 800399e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	4baf      	ldr	r3, [pc, #700]	@ (8003c64 <UART_SetConfig+0x330>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	f023 010f 	bic.w	r1, r3, #15
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4aa6      	ldr	r2, [pc, #664]	@ (8003c68 <UART_SetConfig+0x334>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d177      	bne.n	8003ac4 <UART_SetConfig+0x190>
 80039d4:	4ba5      	ldr	r3, [pc, #660]	@ (8003c6c <UART_SetConfig+0x338>)
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039dc:	2b28      	cmp	r3, #40	@ 0x28
 80039de:	d86d      	bhi.n	8003abc <UART_SetConfig+0x188>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0xb4>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a8d 	.word	0x08003a8d
 80039ec:	08003abd 	.word	0x08003abd
 80039f0:	08003abd 	.word	0x08003abd
 80039f4:	08003abd 	.word	0x08003abd
 80039f8:	08003abd 	.word	0x08003abd
 80039fc:	08003abd 	.word	0x08003abd
 8003a00:	08003abd 	.word	0x08003abd
 8003a04:	08003abd 	.word	0x08003abd
 8003a08:	08003a95 	.word	0x08003a95
 8003a0c:	08003abd 	.word	0x08003abd
 8003a10:	08003abd 	.word	0x08003abd
 8003a14:	08003abd 	.word	0x08003abd
 8003a18:	08003abd 	.word	0x08003abd
 8003a1c:	08003abd 	.word	0x08003abd
 8003a20:	08003abd 	.word	0x08003abd
 8003a24:	08003abd 	.word	0x08003abd
 8003a28:	08003a9d 	.word	0x08003a9d
 8003a2c:	08003abd 	.word	0x08003abd
 8003a30:	08003abd 	.word	0x08003abd
 8003a34:	08003abd 	.word	0x08003abd
 8003a38:	08003abd 	.word	0x08003abd
 8003a3c:	08003abd 	.word	0x08003abd
 8003a40:	08003abd 	.word	0x08003abd
 8003a44:	08003abd 	.word	0x08003abd
 8003a48:	08003aa5 	.word	0x08003aa5
 8003a4c:	08003abd 	.word	0x08003abd
 8003a50:	08003abd 	.word	0x08003abd
 8003a54:	08003abd 	.word	0x08003abd
 8003a58:	08003abd 	.word	0x08003abd
 8003a5c:	08003abd 	.word	0x08003abd
 8003a60:	08003abd 	.word	0x08003abd
 8003a64:	08003abd 	.word	0x08003abd
 8003a68:	08003aad 	.word	0x08003aad
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003abd 	.word	0x08003abd
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003abd 	.word	0x08003abd
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003abd 	.word	0x08003abd
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a92:	e222      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a9a:	e21e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003aa2:	e21a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003aaa:	e216      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003aac:	2320      	movs	r3, #32
 8003aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ab2:	e212      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ab4:	2340      	movs	r3, #64	@ 0x40
 8003ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003aba:	e20e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ac2:	e20a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a69      	ldr	r2, [pc, #420]	@ (8003c70 <UART_SetConfig+0x33c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d130      	bne.n	8003b30 <UART_SetConfig+0x1fc>
 8003ace:	4b67      	ldr	r3, [pc, #412]	@ (8003c6c <UART_SetConfig+0x338>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d826      	bhi.n	8003b28 <UART_SetConfig+0x1f4>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <UART_SetConfig+0x1ac>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af9 	.word	0x08003af9
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	08003b09 	.word	0x08003b09
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	2300      	movs	r3, #0
 8003afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003afe:	e1ec      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b00:	2304      	movs	r3, #4
 8003b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b06:	e1e8      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b08:	2308      	movs	r3, #8
 8003b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b0e:	e1e4      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b10:	2310      	movs	r3, #16
 8003b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b16:	e1e0      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b18:	2320      	movs	r3, #32
 8003b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b1e:	e1dc      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b20:	2340      	movs	r3, #64	@ 0x40
 8003b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b26:	e1d8      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b2e:	e1d4      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a4f      	ldr	r2, [pc, #316]	@ (8003c74 <UART_SetConfig+0x340>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d130      	bne.n	8003b9c <UART_SetConfig+0x268>
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c6c <UART_SetConfig+0x338>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d826      	bhi.n	8003b94 <UART_SetConfig+0x260>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <UART_SetConfig+0x218>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b65 	.word	0x08003b65
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b6a:	e1b6      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b72:	e1b2      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b7a:	e1ae      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b82:	e1aa      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b84:	2320      	movs	r3, #32
 8003b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b8a:	e1a6      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b8c:	2340      	movs	r3, #64	@ 0x40
 8003b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b92:	e1a2      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003b9a:	e19e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a35      	ldr	r2, [pc, #212]	@ (8003c78 <UART_SetConfig+0x344>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d130      	bne.n	8003c08 <UART_SetConfig+0x2d4>
 8003ba6:	4b31      	ldr	r3, [pc, #196]	@ (8003c6c <UART_SetConfig+0x338>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d826      	bhi.n	8003c00 <UART_SetConfig+0x2cc>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <UART_SetConfig+0x284>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bd1 	.word	0x08003bd1
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	08003be1 	.word	0x08003be1
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003bd6:	e180      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003bde:	e17c      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003be6:	e178      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003bee:	e174      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003bf6:	e170      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003bf8:	2340      	movs	r3, #64	@ 0x40
 8003bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003bfe:	e16c      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c06:	e168      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c7c <UART_SetConfig+0x348>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d142      	bne.n	8003c98 <UART_SetConfig+0x364>
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <UART_SetConfig+0x338>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d838      	bhi.n	8003c90 <UART_SetConfig+0x35c>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <UART_SetConfig+0x2f0>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	08003c4d 	.word	0x08003c4d
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c42:	e14a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c4a:	e146      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c52:	e142      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c54:	2310      	movs	r3, #16
 8003c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c5a:	e13e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c5c:	cfff69f3 	.word	0xcfff69f3
 8003c60:	58000c00 	.word	0x58000c00
 8003c64:	11fff4ff 	.word	0x11fff4ff
 8003c68:	40011000 	.word	0x40011000
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	2320      	movs	r3, #32
 8003c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c86:	e128      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c88:	2340      	movs	r3, #64	@ 0x40
 8003c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c8e:	e124      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003c96:	e120      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4acb      	ldr	r2, [pc, #812]	@ (8003fcc <UART_SetConfig+0x698>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d176      	bne.n	8003d90 <UART_SetConfig+0x45c>
 8003ca2:	4bcb      	ldr	r3, [pc, #812]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003caa:	2b28      	cmp	r3, #40	@ 0x28
 8003cac:	d86c      	bhi.n	8003d88 <UART_SetConfig+0x454>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <UART_SetConfig+0x380>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003d59 	.word	0x08003d59
 8003cb8:	08003d89 	.word	0x08003d89
 8003cbc:	08003d89 	.word	0x08003d89
 8003cc0:	08003d89 	.word	0x08003d89
 8003cc4:	08003d89 	.word	0x08003d89
 8003cc8:	08003d89 	.word	0x08003d89
 8003ccc:	08003d89 	.word	0x08003d89
 8003cd0:	08003d89 	.word	0x08003d89
 8003cd4:	08003d61 	.word	0x08003d61
 8003cd8:	08003d89 	.word	0x08003d89
 8003cdc:	08003d89 	.word	0x08003d89
 8003ce0:	08003d89 	.word	0x08003d89
 8003ce4:	08003d89 	.word	0x08003d89
 8003ce8:	08003d89 	.word	0x08003d89
 8003cec:	08003d89 	.word	0x08003d89
 8003cf0:	08003d89 	.word	0x08003d89
 8003cf4:	08003d69 	.word	0x08003d69
 8003cf8:	08003d89 	.word	0x08003d89
 8003cfc:	08003d89 	.word	0x08003d89
 8003d00:	08003d89 	.word	0x08003d89
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003d89 	.word	0x08003d89
 8003d0c:	08003d89 	.word	0x08003d89
 8003d10:	08003d89 	.word	0x08003d89
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d89 	.word	0x08003d89
 8003d1c:	08003d89 	.word	0x08003d89
 8003d20:	08003d89 	.word	0x08003d89
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003d89 	.word	0x08003d89
 8003d2c:	08003d89 	.word	0x08003d89
 8003d30:	08003d89 	.word	0x08003d89
 8003d34:	08003d79 	.word	0x08003d79
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d5e:	e0bc      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d66:	e0b8      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d6e:	e0b4      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d76:	e0b0      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d7e:	e0ac      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d80:	2340      	movs	r3, #64	@ 0x40
 8003d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d86:	e0a8      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003d8e:	e0a4      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a8f      	ldr	r2, [pc, #572]	@ (8003fd4 <UART_SetConfig+0x6a0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d130      	bne.n	8003dfc <UART_SetConfig+0x4c8>
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d826      	bhi.n	8003df4 <UART_SetConfig+0x4c0>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <UART_SetConfig+0x478>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dcd 	.word	0x08003dcd
 8003db4:	08003dd5 	.word	0x08003dd5
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003dca:	e086      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003dd2:	e082      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003dda:	e07e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003de2:	e07a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003de4:	2320      	movs	r3, #32
 8003de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003dea:	e076      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003dec:	2340      	movs	r3, #64	@ 0x40
 8003dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003df2:	e072      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003dfa:	e06e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a75      	ldr	r2, [pc, #468]	@ (8003fd8 <UART_SetConfig+0x6a4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d130      	bne.n	8003e68 <UART_SetConfig+0x534>
 8003e06:	4b72      	ldr	r3, [pc, #456]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d826      	bhi.n	8003e60 <UART_SetConfig+0x52c>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <UART_SetConfig+0x4e4>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e31 	.word	0x08003e31
 8003e1c:	08003e39 	.word	0x08003e39
 8003e20:	08003e41 	.word	0x08003e41
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	2300      	movs	r3, #0
 8003e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e36:	e050      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e3e:	e04c      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e40:	2308      	movs	r3, #8
 8003e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e46:	e048      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e4e:	e044      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e50:	2320      	movs	r3, #32
 8003e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e56:	e040      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e58:	2340      	movs	r3, #64	@ 0x40
 8003e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e5e:	e03c      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e60:	2380      	movs	r3, #128	@ 0x80
 8003e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003e66:	e038      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003fdc <UART_SetConfig+0x6a8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d130      	bne.n	8003ed4 <UART_SetConfig+0x5a0>
 8003e72:	4b57      	ldr	r3, [pc, #348]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d826      	bhi.n	8003ecc <UART_SetConfig+0x598>
 8003e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e84 <UART_SetConfig+0x550>)
 8003e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e84:	08003e9d 	.word	0x08003e9d
 8003e88:	08003ea5 	.word	0x08003ea5
 8003e8c:	08003ead 	.word	0x08003ead
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ea2:	e01a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eaa:	e016      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003eac:	2308      	movs	r3, #8
 8003eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eb2:	e012      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eba:	e00e      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ec2:	e00a      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ec4:	2340      	movs	r3, #64	@ 0x40
 8003ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eca:	e006      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ecc:	2380      	movs	r3, #128	@ 0x80
 8003ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ed2:	e002      	b.n	8003eda <UART_SetConfig+0x5a6>
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3f      	ldr	r2, [pc, #252]	@ (8003fdc <UART_SetConfig+0x6a8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f040 80f8 	bne.w	80040d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	dc46      	bgt.n	8003f7c <UART_SetConfig+0x648>
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f2c0 8082 	blt.w	8003ff8 <UART_SetConfig+0x6c4>
 8003ef4:	3b02      	subs	r3, #2
 8003ef6:	2b1e      	cmp	r3, #30
 8003ef8:	d87e      	bhi.n	8003ff8 <UART_SetConfig+0x6c4>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <UART_SetConfig+0x5cc>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f83 	.word	0x08003f83
 8003f04:	08003ff9 	.word	0x08003ff9
 8003f08:	08003f8b 	.word	0x08003f8b
 8003f0c:	08003ff9 	.word	0x08003ff9
 8003f10:	08003ff9 	.word	0x08003ff9
 8003f14:	08003ff9 	.word	0x08003ff9
 8003f18:	08003f9b 	.word	0x08003f9b
 8003f1c:	08003ff9 	.word	0x08003ff9
 8003f20:	08003ff9 	.word	0x08003ff9
 8003f24:	08003ff9 	.word	0x08003ff9
 8003f28:	08003ff9 	.word	0x08003ff9
 8003f2c:	08003ff9 	.word	0x08003ff9
 8003f30:	08003ff9 	.word	0x08003ff9
 8003f34:	08003ff9 	.word	0x08003ff9
 8003f38:	08003fab 	.word	0x08003fab
 8003f3c:	08003ff9 	.word	0x08003ff9
 8003f40:	08003ff9 	.word	0x08003ff9
 8003f44:	08003ff9 	.word	0x08003ff9
 8003f48:	08003ff9 	.word	0x08003ff9
 8003f4c:	08003ff9 	.word	0x08003ff9
 8003f50:	08003ff9 	.word	0x08003ff9
 8003f54:	08003ff9 	.word	0x08003ff9
 8003f58:	08003ff9 	.word	0x08003ff9
 8003f5c:	08003ff9 	.word	0x08003ff9
 8003f60:	08003ff9 	.word	0x08003ff9
 8003f64:	08003ff9 	.word	0x08003ff9
 8003f68:	08003ff9 	.word	0x08003ff9
 8003f6c:	08003ff9 	.word	0x08003ff9
 8003f70:	08003ff9 	.word	0x08003ff9
 8003f74:	08003ff9 	.word	0x08003ff9
 8003f78:	08003feb 	.word	0x08003feb
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d037      	beq.n	8003ff0 <UART_SetConfig+0x6bc>
 8003f80:	e03a      	b.n	8003ff8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003f82:	f7fe fe69 	bl	8002c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8003f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003f88:	e03c      	b.n	8004004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fe78 	bl	8002c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f98:	e034      	b.n	8004004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe ffc4 	bl	8002f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003fa8:	e02c      	b.n	8004004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <UART_SetConfig+0x69c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	08db      	lsrs	r3, r3, #3
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <UART_SetConfig+0x6ac>)
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003fc8:	e01c      	b.n	8004004 <UART_SetConfig+0x6d0>
 8003fca:	bf00      	nop
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	40007800 	.word	0x40007800
 8003fd8:	40007c00 	.word	0x40007c00
 8003fdc:	58000c00 	.word	0x58000c00
 8003fe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800425c <UART_SetConfig+0x928>)
 8003fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003fe8:	e00c      	b.n	8004004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003fea:	4b9d      	ldr	r3, [pc, #628]	@ (8004260 <UART_SetConfig+0x92c>)
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003fee:	e009      	b.n	8004004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ff6:	e005      	b.n	8004004 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 81de 	beq.w	80043c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	4a94      	ldr	r2, [pc, #592]	@ (8004264 <UART_SetConfig+0x930>)
 8004012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004016:	461a      	mov	r2, r3
 8004018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401a:	fbb3 f3f2 	udiv	r3, r3, r2
 800401e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402c:	429a      	cmp	r2, r3
 800402e:	d305      	bcc.n	800403c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004038:	429a      	cmp	r2, r3
 800403a:	d903      	bls.n	8004044 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004042:	e1c1      	b.n	80043c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004046:	2200      	movs	r2, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	4a84      	ldr	r2, [pc, #528]	@ (8004264 <UART_SetConfig+0x930>)
 8004052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004056:	b29b      	uxth	r3, r3
 8004058:	2200      	movs	r2, #0
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004066:	f7fc f98b 	bl	8000380 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4610      	mov	r0, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	020b      	lsls	r3, r1, #8
 800407c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004080:	0202      	lsls	r2, r0, #8
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	6849      	ldr	r1, [r1, #4]
 8004086:	0849      	lsrs	r1, r1, #1
 8004088:	2000      	movs	r0, #0
 800408a:	460c      	mov	r4, r1
 800408c:	4605      	mov	r5, r0
 800408e:	eb12 0804 	adds.w	r8, r2, r4
 8004092:	eb43 0905 	adc.w	r9, r3, r5
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	469a      	mov	sl, r3
 800409e:	4693      	mov	fp, r2
 80040a0:	4652      	mov	r2, sl
 80040a2:	465b      	mov	r3, fp
 80040a4:	4640      	mov	r0, r8
 80040a6:	4649      	mov	r1, r9
 80040a8:	f7fc f96a 	bl	8000380 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ba:	d308      	bcc.n	80040ce <UART_SetConfig+0x79a>
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c2:	d204      	bcs.n	80040ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ca:	60da      	str	r2, [r3, #12]
 80040cc:	e17c      	b.n	80043c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80040d4:	e178      	b.n	80043c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040de:	f040 80c5 	bne.w	800426c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80040e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	dc48      	bgt.n	800417c <UART_SetConfig+0x848>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db7b      	blt.n	80041e6 <UART_SetConfig+0x8b2>
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d879      	bhi.n	80041e6 <UART_SetConfig+0x8b2>
 80040f2:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <UART_SetConfig+0x7c4>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004183 	.word	0x08004183
 80040fc:	0800418b 	.word	0x0800418b
 8004100:	080041e7 	.word	0x080041e7
 8004104:	080041e7 	.word	0x080041e7
 8004108:	08004193 	.word	0x08004193
 800410c:	080041e7 	.word	0x080041e7
 8004110:	080041e7 	.word	0x080041e7
 8004114:	080041e7 	.word	0x080041e7
 8004118:	080041a3 	.word	0x080041a3
 800411c:	080041e7 	.word	0x080041e7
 8004120:	080041e7 	.word	0x080041e7
 8004124:	080041e7 	.word	0x080041e7
 8004128:	080041e7 	.word	0x080041e7
 800412c:	080041e7 	.word	0x080041e7
 8004130:	080041e7 	.word	0x080041e7
 8004134:	080041e7 	.word	0x080041e7
 8004138:	080041b3 	.word	0x080041b3
 800413c:	080041e7 	.word	0x080041e7
 8004140:	080041e7 	.word	0x080041e7
 8004144:	080041e7 	.word	0x080041e7
 8004148:	080041e7 	.word	0x080041e7
 800414c:	080041e7 	.word	0x080041e7
 8004150:	080041e7 	.word	0x080041e7
 8004154:	080041e7 	.word	0x080041e7
 8004158:	080041e7 	.word	0x080041e7
 800415c:	080041e7 	.word	0x080041e7
 8004160:	080041e7 	.word	0x080041e7
 8004164:	080041e7 	.word	0x080041e7
 8004168:	080041e7 	.word	0x080041e7
 800416c:	080041e7 	.word	0x080041e7
 8004170:	080041e7 	.word	0x080041e7
 8004174:	080041e7 	.word	0x080041e7
 8004178:	080041d9 	.word	0x080041d9
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d02e      	beq.n	80041de <UART_SetConfig+0x8aa>
 8004180:	e031      	b.n	80041e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004182:	f7fe fcfb 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8004186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004188:	e033      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418a:	f7fe fd0d 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 800418e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004190:	e02f      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fd74 	bl	8002c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041a0:	e027      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041a2:	f107 0318 	add.w	r3, r7, #24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fec0 	bl	8002f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041b0:	e01f      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004268 <UART_SetConfig+0x934>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80041be:	4b2a      	ldr	r3, [pc, #168]	@ (8004268 <UART_SetConfig+0x934>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	4a24      	ldr	r2, [pc, #144]	@ (800425c <UART_SetConfig+0x928>)
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041d0:	e00f      	b.n	80041f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80041d2:	4b22      	ldr	r3, [pc, #136]	@ (800425c <UART_SetConfig+0x928>)
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041d6:	e00c      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80041d8:	4b21      	ldr	r3, [pc, #132]	@ (8004260 <UART_SetConfig+0x92c>)
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041dc:	e009      	b.n	80041f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80041e4:	e005      	b.n	80041f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80041f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80e7 	beq.w	80043c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <UART_SetConfig+0x930>)
 8004200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004204:	461a      	mov	r2, r3
 8004206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004208:	fbb3 f3f2 	udiv	r3, r3, r2
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	085b      	lsrs	r3, r3, #1
 8004214:	441a      	add	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004222:	2b0f      	cmp	r3, #15
 8004224:	d916      	bls.n	8004254 <UART_SetConfig+0x920>
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422c:	d212      	bcs.n	8004254 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	b29b      	uxth	r3, r3
 8004232:	f023 030f 	bic.w	r3, r3, #15
 8004236:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	b29a      	uxth	r2, r3
 8004244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004246:	4313      	orrs	r3, r2
 8004248:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e0b9      	b.n	80043c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800425a:	e0b5      	b.n	80043c8 <UART_SetConfig+0xa94>
 800425c:	03d09000 	.word	0x03d09000
 8004260:	003d0900 	.word	0x003d0900
 8004264:	08006cf8 	.word	0x08006cf8
 8004268:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800426c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004270:	2b20      	cmp	r3, #32
 8004272:	dc49      	bgt.n	8004308 <UART_SetConfig+0x9d4>
 8004274:	2b00      	cmp	r3, #0
 8004276:	db7c      	blt.n	8004372 <UART_SetConfig+0xa3e>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d87a      	bhi.n	8004372 <UART_SetConfig+0xa3e>
 800427c:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <UART_SetConfig+0x950>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	0800430f 	.word	0x0800430f
 8004288:	08004317 	.word	0x08004317
 800428c:	08004373 	.word	0x08004373
 8004290:	08004373 	.word	0x08004373
 8004294:	0800431f 	.word	0x0800431f
 8004298:	08004373 	.word	0x08004373
 800429c:	08004373 	.word	0x08004373
 80042a0:	08004373 	.word	0x08004373
 80042a4:	0800432f 	.word	0x0800432f
 80042a8:	08004373 	.word	0x08004373
 80042ac:	08004373 	.word	0x08004373
 80042b0:	08004373 	.word	0x08004373
 80042b4:	08004373 	.word	0x08004373
 80042b8:	08004373 	.word	0x08004373
 80042bc:	08004373 	.word	0x08004373
 80042c0:	08004373 	.word	0x08004373
 80042c4:	0800433f 	.word	0x0800433f
 80042c8:	08004373 	.word	0x08004373
 80042cc:	08004373 	.word	0x08004373
 80042d0:	08004373 	.word	0x08004373
 80042d4:	08004373 	.word	0x08004373
 80042d8:	08004373 	.word	0x08004373
 80042dc:	08004373 	.word	0x08004373
 80042e0:	08004373 	.word	0x08004373
 80042e4:	08004373 	.word	0x08004373
 80042e8:	08004373 	.word	0x08004373
 80042ec:	08004373 	.word	0x08004373
 80042f0:	08004373 	.word	0x08004373
 80042f4:	08004373 	.word	0x08004373
 80042f8:	08004373 	.word	0x08004373
 80042fc:	08004373 	.word	0x08004373
 8004300:	08004373 	.word	0x08004373
 8004304:	08004365 	.word	0x08004365
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d02e      	beq.n	800436a <UART_SetConfig+0xa36>
 800430c:	e031      	b.n	8004372 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7fe fc35 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8004312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004314:	e033      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004316:	f7fe fc47 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 800431a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800431c:	e02f      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800431e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fcae 	bl	8002c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800432c:	e027      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800432e:	f107 0318 	add.w	r3, r7, #24
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fdfa 	bl	8002f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800433c:	e01f      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800433e:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <UART_SetConfig+0xac0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800434a:	4b2a      	ldr	r3, [pc, #168]	@ (80043f4 <UART_SetConfig+0xac0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	4a28      	ldr	r2, [pc, #160]	@ (80043f8 <UART_SetConfig+0xac4>)
 8004356:	fa22 f303 	lsr.w	r3, r2, r3
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800435c:	e00f      	b.n	800437e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800435e:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <UART_SetConfig+0xac4>)
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004362:	e00c      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004364:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <UART_SetConfig+0xac8>)
 8004366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004368:	e009      	b.n	800437e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800436e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004370:	e005      	b.n	800437e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800437c:	bf00      	nop
    }

    if (pclk != 0U)
 800437e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d021      	beq.n	80043c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <UART_SetConfig+0xacc>)
 800438a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800438e:	461a      	mov	r2, r3
 8004390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004392:	fbb3 f2f2 	udiv	r2, r3, r2
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	441a      	add	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	d909      	bls.n	80043c2 <UART_SetConfig+0xa8e>
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d205      	bcs.n	80043c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e002      	b.n	80043c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80043e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3748      	adds	r7, #72	@ 0x48
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
 80043f8:	03d09000 	.word	0x03d09000
 80043fc:	003d0900 	.word	0x003d0900
 8004400:	08006cf8 	.word	0x08006cf8

08004404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01a      	beq.n	800451a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004502:	d10a      	bne.n	800451a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b098      	sub	sp, #96	@ 0x60
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004558:	f7fc ff70 	bl	800143c <HAL_GetTick>
 800455c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d12f      	bne.n	80045cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f88e 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d022      	beq.n	80045cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800459a:	653b      	str	r3, [r7, #80]	@ 0x50
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e063      	b.n	8004694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d149      	bne.n	800466e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e2:	2200      	movs	r2, #0
 80045e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f857 	bl	800469c <UART_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d03c      	beq.n	800466e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	623b      	str	r3, [r7, #32]
   return(result);
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30
 8004614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60fb      	str	r3, [r7, #12]
   return(result);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004646:	61fa      	str	r2, [r7, #28]
 8004648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	69b9      	ldr	r1, [r7, #24]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	617b      	str	r3, [r7, #20]
   return(result);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e012      	b.n	8004694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3758      	adds	r7, #88	@ 0x58
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ac:	e04f      	b.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d04b      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fc fec1 	bl	800143c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <UART_WaitOnFlagUntilTimeout+0x30>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e04e      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d037      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b80      	cmp	r3, #128	@ 0x80
 80046e2:	d034      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b40      	cmp	r3, #64	@ 0x40
 80046e8:	d031      	beq.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d110      	bne.n	800471a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2208      	movs	r2, #8
 80046fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f839 	bl	8004778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2208      	movs	r2, #8
 800470a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e029      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004728:	d111      	bne.n	800474e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f81f 	bl	8004778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d0a0      	beq.n	80046ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b095      	sub	sp, #84	@ 0x54
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800479e:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e6      	bne.n	8004780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <UART_EndRxTransfer+0xc8>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e5      	bne.n	80047b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d118      	bne.n	8004820 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	647b      	str	r3, [r7, #68]	@ 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6979      	ldr	r1, [r7, #20]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	613b      	str	r3, [r7, #16]
   return(result);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e6      	bne.n	80047ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004834:	bf00      	nop
 8004836:	3754      	adds	r7, #84	@ 0x54
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	effffffe 	.word	0xeffffffe

08004844 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004856:	2b84      	cmp	r3, #132	@ 0x84
 8004858:	d005      	beq.n	8004866 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800485a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	3303      	adds	r3, #3
 8004864:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004866:	68fb      	ldr	r3, [r7, #12]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004878:	f000 fefc 	bl	8005674 <vTaskStartScheduler>
  
  return osOK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	bd80      	pop	{r7, pc}

08004882 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004884:	b089      	sub	sp, #36	@ 0x24
 8004886:	af04      	add	r7, sp, #16
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d020      	beq.n	80048d6 <osThreadCreate+0x54>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01c      	beq.n	80048d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685c      	ldr	r4, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691e      	ldr	r6, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ffc8 	bl	8004844 <makeFreeRtosPriority>
 80048b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048be:	9202      	str	r2, [sp, #8]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	9100      	str	r1, [sp, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4632      	mov	r2, r6
 80048c8:	4629      	mov	r1, r5
 80048ca:	4620      	mov	r0, r4
 80048cc:	f000 fcec 	bl	80052a8 <xTaskCreateStatic>
 80048d0:	4603      	mov	r3, r0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e01c      	b.n	8004910 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685c      	ldr	r4, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ffaa 	bl	8004844 <makeFreeRtosPriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	9200      	str	r2, [sp, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4632      	mov	r2, r6
 80048fe:	4629      	mov	r1, r5
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fd31 	bl	8005368 <xTaskCreate>
 8004906:	4603      	mov	r3, r0
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	e000      	b.n	8004912 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800491a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <osDelay+0x16>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e000      	b.n	8004932 <osDelay+0x18>
 8004930:	2301      	movs	r3, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fe68 	bl	8005608 <vTaskDelay>
  
  return osOK;
 8004938:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004950:	f000 fefa 	bl	8005748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004954:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac8 <pvPortMalloc+0x184>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800495c:	f000 f924 	bl	8004ba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004960:	4b5a      	ldr	r3, [pc, #360]	@ (8004acc <pvPortMalloc+0x188>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8095 	bne.w	8004a98 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004974:	2208      	movs	r2, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f023 0307 	bic.w	r3, r3, #7
 800498c:	3308      	adds	r3, #8
 800498e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d06f      	beq.n	8004a98 <pvPortMalloc+0x154>
 80049b8:	4b45      	ldr	r3, [pc, #276]	@ (8004ad0 <pvPortMalloc+0x18c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d86a      	bhi.n	8004a98 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049c2:	4b44      	ldr	r3, [pc, #272]	@ (8004ad4 <pvPortMalloc+0x190>)
 80049c4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049c6:	4b43      	ldr	r3, [pc, #268]	@ (8004ad4 <pvPortMalloc+0x190>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049cc:	e004      	b.n	80049d8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d903      	bls.n	80049ea <pvPortMalloc+0xa6>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f1      	bne.n	80049ce <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049ea:	4b37      	ldr	r3, [pc, #220]	@ (8004ac8 <pvPortMalloc+0x184>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d051      	beq.n	8004a98 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2208      	movs	r2, #8
 80049fa:	4413      	add	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	1ad2      	subs	r2, r2, r3
 8004a0e:	2308      	movs	r3, #8
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d920      	bls.n	8004a58 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <pvPortMalloc+0xfc>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	613b      	str	r3, [r7, #16]
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	f000 f90a 	bl	8004c6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <pvPortMalloc+0x18c>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad0 <pvPortMalloc+0x18c>)
 8004a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a66:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <pvPortMalloc+0x18c>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <pvPortMalloc+0x194>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d203      	bcs.n	8004a7a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a72:	4b17      	ldr	r3, [pc, #92]	@ (8004ad0 <pvPortMalloc+0x18c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	@ (8004ad8 <pvPortMalloc+0x194>)
 8004a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <pvPortMalloc+0x188>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <pvPortMalloc+0x198>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <pvPortMalloc+0x198>)
 8004a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a98:	f000 fe64 	bl	8005764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <pvPortMalloc+0x17a>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60fb      	str	r3, [r7, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <pvPortMalloc+0x176>
	return pvReturn;
 8004abe:	69fb      	ldr	r3, [r7, #28]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3728      	adds	r7, #40	@ 0x28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	2400405c 	.word	0x2400405c
 8004acc:	24004070 	.word	0x24004070
 8004ad0:	24004060 	.word	0x24004060
 8004ad4:	24004054 	.word	0x24004054
 8004ad8:	24004064 	.word	0x24004064
 8004adc:	24004068 	.word	0x24004068

08004ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04f      	beq.n	8004b92 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004af2:	2308      	movs	r3, #8
 8004af4:	425b      	negs	r3, r3
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	4b25      	ldr	r3, [pc, #148]	@ (8004b9c <vPortFree+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <vPortFree+0x46>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <vPortFree+0x66>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60bb      	str	r3, [r7, #8]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <vPortFree+0xbc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01e      	beq.n	8004b92 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11a      	bne.n	8004b92 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <vPortFree+0xbc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b6c:	f000 fdec 	bl	8005748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <vPortFree+0xc0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ba0 <vPortFree+0xc0>)
 8004b7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f000 f874 	bl	8004c6c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <vPortFree+0xc4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	4a06      	ldr	r2, [pc, #24]	@ (8004ba4 <vPortFree+0xc4>)
 8004b8c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b8e:	f000 fde9 	bl	8005764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	24004070 	.word	0x24004070
 8004ba0:	24004060 	.word	0x24004060
 8004ba4:	2400406c 	.word	0x2400406c

08004ba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004bb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bb4:	4b27      	ldr	r3, [pc, #156]	@ (8004c54 <prvHeapInit+0xac>)
 8004bb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c54 <prvHeapInit+0xac>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <prvHeapInit+0xb0>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <prvHeapInit+0xb0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a15      	ldr	r2, [pc, #84]	@ (8004c5c <prvHeapInit+0xb4>)
 8004c08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <prvHeapInit+0xb4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <prvHeapInit+0xb4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <prvHeapInit+0xb8>)
 8004c36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <prvHeapInit+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <prvHeapInit+0xc0>)
 8004c42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	24000454 	.word	0x24000454
 8004c58:	24004054 	.word	0x24004054
 8004c5c:	2400405c 	.word	0x2400405c
 8004c60:	24004064 	.word	0x24004064
 8004c64:	24004060 	.word	0x24004060
 8004c68:	24004070 	.word	0x24004070

08004c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c74:	4b28      	ldr	r3, [pc, #160]	@ (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e002      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x14>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d8f7      	bhi.n	8004c7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d108      	bne.n	8004cae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d118      	bne.n	8004cf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <prvInsertBlockIntoFreeList+0xb0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d00d      	beq.n	8004cea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e008      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cea:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <prvInsertBlockIntoFreeList+0xb0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e003      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d002      	beq.n	8004d0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	24004054 	.word	0x24004054
 8004d1c:	2400405c 	.word	0x2400405c

08004d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0208 	add.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f103 0208 	add.w	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f103 0208 	add.w	r2, r3, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d103      	bne.n	8004de2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e00c      	b.n	8004dfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3308      	adds	r3, #8
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e002      	b.n	8004df0 <vListInsert+0x2e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d2f6      	bcs.n	8004dea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6892      	ldr	r2, [r2, #8]
 8004e4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d103      	bne.n	8004e68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b04      	subs	r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004eec <pxPortInitialiseStack+0x64>)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3b14      	subs	r3, #20
 8004ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3b04      	subs	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f06f 0202 	mvn.w	r2, #2
 8004ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3b20      	subs	r3, #32
 8004edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	08004ef1 	.word	0x08004ef1

08004ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004efa:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <prvTaskExitError+0x58>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d00b      	beq.n	8004f1c <prvTaskExitError+0x2c>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <prvTaskExitError+0x28>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60bb      	str	r3, [r7, #8]
}
 8004f2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f30:	bf00      	nop
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0fc      	beq.n	8004f32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	2400002c 	.word	0x2400002c
 8004f4c:	00000000 	.word	0x00000000

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <pxCurrentTCBConst2>)
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6808      	ldr	r0, [r1, #0]
 8004f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	f380 8809 	msr	PSP, r0
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	4770      	bx	lr
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst2>:
 8004f70:	2400407c 	.word	0x2400407c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f78:	4808      	ldr	r0, [pc, #32]	@ (8004f9c <prvPortStartFirstTask+0x24>)
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f380 8808 	msr	MSP, r0
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8814 	msr	CONTROL, r0
 8004f8a:	b662      	cpsie	i
 8004f8c:	b661      	cpsie	f
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	df00      	svc	0
 8004f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f9a:	bf00      	nop
 8004f9c:	e000ed08 	.word	0xe000ed08

08004fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <xPortStartScheduler+0x124>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a47      	ldr	r2, [pc, #284]	@ (80050c8 <xPortStartScheduler+0x128>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10b      	bne.n	8004fc8 <xPortStartScheduler+0x28>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60fb      	str	r3, [r7, #12]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80050c4 <xPortStartScheduler+0x124>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80050cc <xPortStartScheduler+0x12c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10b      	bne.n	8004fea <xPortStartScheduler+0x4a>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	613b      	str	r3, [r7, #16]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fea:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <xPortStartScheduler+0x130>)
 8004fec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <xPortStartScheduler+0x134>)
 8005010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005012:	4b31      	ldr	r3, [pc, #196]	@ (80050d8 <xPortStartScheduler+0x138>)
 8005014:	2207      	movs	r2, #7
 8005016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005018:	e009      	b.n	800502e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800501a:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <xPortStartScheduler+0x138>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <xPortStartScheduler+0x138>)
 8005022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005036:	2b80      	cmp	r3, #128	@ 0x80
 8005038:	d0ef      	beq.n	800501a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800503a:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <xPortStartScheduler+0x138>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1c3 0307 	rsb	r3, r3, #7
 8005042:	2b04      	cmp	r3, #4
 8005044:	d00b      	beq.n	800505e <xPortStartScheduler+0xbe>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	60bb      	str	r3, [r7, #8]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800505e:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <xPortStartScheduler+0x138>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <xPortStartScheduler+0x138>)
 8005066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005068:	4b1b      	ldr	r3, [pc, #108]	@ (80050d8 <xPortStartScheduler+0x138>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005070:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <xPortStartScheduler+0x138>)
 8005072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800507c:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <xPortStartScheduler+0x13c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <xPortStartScheduler+0x13c>)
 8005082:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005088:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <xPortStartScheduler+0x13c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a13      	ldr	r2, [pc, #76]	@ (80050dc <xPortStartScheduler+0x13c>)
 800508e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005094:	f000 f8da 	bl	800524c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <xPortStartScheduler+0x140>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800509e:	f000 f8f9 	bl	8005294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <xPortStartScheduler+0x144>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a0f      	ldr	r2, [pc, #60]	@ (80050e4 <xPortStartScheduler+0x144>)
 80050a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050ae:	f7ff ff63 	bl	8004f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050b2:	f000 fcaf 	bl	8005a14 <vTaskSwitchContext>
	prvTaskExitError();
 80050b6:	f7ff ff1b 	bl	8004ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	e000ed00 	.word	0xe000ed00
 80050c8:	410fc271 	.word	0x410fc271
 80050cc:	410fc270 	.word	0x410fc270
 80050d0:	e000e400 	.word	0xe000e400
 80050d4:	24004074 	.word	0x24004074
 80050d8:	24004078 	.word	0x24004078
 80050dc:	e000ed20 	.word	0xe000ed20
 80050e0:	2400002c 	.word	0x2400002c
 80050e4:	e000ef34 	.word	0xe000ef34

080050e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	607b      	str	r3, [r7, #4]
}
 8005100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <vPortEnterCritical+0x5c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <vPortEnterCritical+0x5c>)
 800510a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800510c:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <vPortEnterCritical+0x5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d110      	bne.n	8005136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005114:	4b0c      	ldr	r3, [pc, #48]	@ (8005148 <vPortEnterCritical+0x60>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <vPortEnterCritical+0x4e>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	603b      	str	r3, [r7, #0]
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	e7fd      	b.n	8005132 <vPortEnterCritical+0x4a>
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2400002c 	.word	0x2400002c
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005152:	4b12      	ldr	r3, [pc, #72]	@ (800519c <vPortExitCritical+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <vPortExitCritical+0x26>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	607b      	str	r3, [r7, #4]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <vPortExitCritical+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3b01      	subs	r3, #1
 8005178:	4a08      	ldr	r2, [pc, #32]	@ (800519c <vPortExitCritical+0x50>)
 800517a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <vPortExitCritical+0x50>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <vPortExitCritical+0x44>
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2400002c 	.word	0x2400002c

080051a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f01e 0f10 	tst.w	lr, #16
 80051b0:	bf08      	it	eq
 80051b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	6010      	str	r0, [r2, #0]
 80051bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051c4:	f380 8811 	msr	BASEPRI, r0
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f000 fc20 	bl	8005a14 <vTaskSwitchContext>
 80051d4:	f04f 0000 	mov.w	r0, #0
 80051d8:	f380 8811 	msr	BASEPRI, r0
 80051dc:	bc09      	pop	{r0, r3}
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	6808      	ldr	r0, [r1, #0]
 80051e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e6:	f01e 0f10 	tst.w	lr, #16
 80051ea:	bf08      	it	eq
 80051ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051f0:	f380 8809 	msr	PSP, r0
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst>:
 8005200:	2400407c 	.word	0x2400407c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005222:	f000 fb3d 	bl	80058a0 <xTaskIncrementTick>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <SysTick_Handler+0x40>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <vPortSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	@ (800528c <vPortSetupTimerInterrupt+0x40>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <vPortSetupTimerInterrupt+0x44>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	24000000 	.word	0x24000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	e000e014 	.word	0xe000e014

08005294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052a4 <vPortEnableVFP+0x10>
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800529e:	6001      	str	r1, [r0, #0]
 80052a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052a2:	bf00      	nop
 80052a4:	e000ed88 	.word	0xe000ed88

080052a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08e      	sub	sp, #56	@ 0x38
 80052ac:	af04      	add	r7, sp, #16
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	61fb      	str	r3, [r7, #28]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052f2:	23a0      	movs	r3, #160	@ 0xa0
 80052f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80052fa:	d00b      	beq.n	8005314 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61bb      	str	r3, [r7, #24]
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <xTaskCreateStatic+0xb2>
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01b      	beq.n	800535a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	2202      	movs	r2, #2
 8005330:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005334:	2300      	movs	r3, #0
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f851 	bl	80053f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005354:	f000 f8ee 	bl	8005534 <prvAddNewTaskToReadyList>
 8005358:	e001      	b.n	800535e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800535e:	697b      	ldr	r3, [r7, #20]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	3728      	adds	r7, #40	@ 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08c      	sub	sp, #48	@ 0x30
 800536c:	af04      	add	r7, sp, #16
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fae1 	bl	8004944 <pvPortMalloc>
 8005382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00e      	beq.n	80053a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800538a:	20a0      	movs	r0, #160	@ 0xa0
 800538c:	f7ff fada 	bl	8004944 <pvPortMalloc>
 8005390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	631a      	str	r2, [r3, #48]	@ 0x30
 800539e:	e005      	b.n	80053ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053a0:	6978      	ldr	r0, [r7, #20]
 80053a2:	f7ff fb9d 	bl	8004ae0 <vPortFree>
 80053a6:	e001      	b.n	80053ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	2300      	movs	r3, #0
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	9302      	str	r3, [sp, #8]
 80053c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f80f 	bl	80053f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d6:	69f8      	ldr	r0, [r7, #28]
 80053d8:	f000 f8ac 	bl	8005534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053dc:	2301      	movs	r3, #1
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e002      	b.n	80053e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e8:	69bb      	ldr	r3, [r7, #24]
	}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800540c:	440b      	add	r3, r1
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	617b      	str	r3, [r7, #20]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01f      	beq.n	8005484 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e012      	b.n	8005470 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	7819      	ldrb	r1, [r3, #0]
 8005452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	3334      	adds	r3, #52	@ 0x34
 800545a:	460a      	mov	r2, r1
 800545c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d006      	beq.n	8005478 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d9e9      	bls.n	800544a <prvInitialiseNewTask+0x56>
 8005476:	e000      	b.n	800547a <prvInitialiseNewTask+0x86>
			{
				break;
 8005478:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005482:	e003      	b.n	800548c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	2b06      	cmp	r3, #6
 8005490:	d901      	bls.n	8005496 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005492:	2306      	movs	r3, #6
 8005494:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	3304      	adds	r3, #4
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fc57 	bl	8004d60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	3318      	adds	r3, #24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fc52 	bl	8004d60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	f1c3 0207 	rsb	r2, r3, #7
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	334c      	adds	r3, #76	@ 0x4c
 80054e6:	224c      	movs	r2, #76	@ 0x4c
 80054e8:	2100      	movs	r1, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd4f 	bl	8005f8e <memset>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005528 <prvInitialiseNewTask+0x134>)
 80054f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	4a0c      	ldr	r2, [pc, #48]	@ (800552c <prvInitialiseNewTask+0x138>)
 80054fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005530 <prvInitialiseNewTask+0x13c>)
 8005500:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	f7ff fcbe 	bl	8004e88 <pxPortInitialiseStack>
 800550c:	4602      	mov	r2, r0
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800551e:	bf00      	nop
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	240041a8 	.word	0x240041a8
 800552c:	24004210 	.word	0x24004210
 8005530:	24004278 	.word	0x24004278

08005534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800553c:	f7ff fdd4 	bl	80050e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005540:	4b2a      	ldr	r3, [pc, #168]	@ (80055ec <prvAddNewTaskToReadyList+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	4a29      	ldr	r2, [pc, #164]	@ (80055ec <prvAddNewTaskToReadyList+0xb8>)
 8005548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800554a:	4b29      	ldr	r3, [pc, #164]	@ (80055f0 <prvAddNewTaskToReadyList+0xbc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005552:	4a27      	ldr	r2, [pc, #156]	@ (80055f0 <prvAddNewTaskToReadyList+0xbc>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005558:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <prvAddNewTaskToReadyList+0xb8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d110      	bne.n	8005582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005560:	f000 fad4 	bl	8005b0c <prvInitialiseTaskLists>
 8005564:	e00d      	b.n	8005582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005566:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <prvAddNewTaskToReadyList+0xc0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800556e:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <prvAddNewTaskToReadyList+0xbc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	429a      	cmp	r2, r3
 800557a:	d802      	bhi.n	8005582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800557c:	4a1c      	ldr	r2, [pc, #112]	@ (80055f0 <prvAddNewTaskToReadyList+0xbc>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <prvAddNewTaskToReadyList+0xc4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <prvAddNewTaskToReadyList+0xc4>)
 800558a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	2201      	movs	r2, #1
 8005592:	409a      	lsls	r2, r3
 8005594:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <prvAddNewTaskToReadyList+0xc8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <prvAddNewTaskToReadyList+0xc8>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a15      	ldr	r2, [pc, #84]	@ (8005600 <prvAddNewTaskToReadyList+0xcc>)
 80055ac:	441a      	add	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7ff fbe0 	bl	8004d7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055ba:	f7ff fdc7 	bl	800514c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <prvAddNewTaskToReadyList+0xc0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c6:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <prvAddNewTaskToReadyList+0xbc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <prvAddNewTaskToReadyList+0xd0>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2400417c 	.word	0x2400417c
 80055f0:	2400407c 	.word	0x2400407c
 80055f4:	24004188 	.word	0x24004188
 80055f8:	24004198 	.word	0x24004198
 80055fc:	24004184 	.word	0x24004184
 8005600:	24004080 	.word	0x24004080
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800561a:	4b14      	ldr	r3, [pc, #80]	@ (800566c <vTaskDelay+0x64>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <vTaskDelay+0x32>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60bb      	str	r3, [r7, #8]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800563a:	f000 f885 	bl	8005748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800563e:	2100      	movs	r1, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fb27 	bl	8005c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005646:	f000 f88d 	bl	8005764 <xTaskResumeAll>
 800564a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d107      	bne.n	8005662 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <vTaskDelay+0x68>)
 8005654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	240041a4 	.word	0x240041a4
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005682:	463a      	mov	r2, r7
 8005684:	1d39      	adds	r1, r7, #4
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb f8d4 	bl	8000838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	9202      	str	r2, [sp, #8]
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	2300      	movs	r3, #0
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	460a      	mov	r2, r1
 80056a2:	4921      	ldr	r1, [pc, #132]	@ (8005728 <vTaskStartScheduler+0xb4>)
 80056a4:	4821      	ldr	r0, [pc, #132]	@ (800572c <vTaskStartScheduler+0xb8>)
 80056a6:	f7ff fdff 	bl	80052a8 <xTaskCreateStatic>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <vTaskStartScheduler+0xbc>)
 80056ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <vTaskStartScheduler+0xbc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056b8:	2301      	movs	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e001      	b.n	80056c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d11b      	bne.n	8005700 <vTaskStartScheduler+0x8c>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	613b      	str	r3, [r7, #16]
}
 80056da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056dc:	4b15      	ldr	r3, [pc, #84]	@ (8005734 <vTaskStartScheduler+0xc0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	334c      	adds	r3, #76	@ 0x4c
 80056e2:	4a15      	ldr	r2, [pc, #84]	@ (8005738 <vTaskStartScheduler+0xc4>)
 80056e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056e6:	4b15      	ldr	r3, [pc, #84]	@ (800573c <vTaskStartScheduler+0xc8>)
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <vTaskStartScheduler+0xcc>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056f4:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <vTaskStartScheduler+0xd0>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056fa:	f7ff fc51 	bl	8004fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056fe:	e00f      	b.n	8005720 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d10b      	bne.n	8005720 <vTaskStartScheduler+0xac>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <vTaskStartScheduler+0xa8>
}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	08006cd4 	.word	0x08006cd4
 800572c:	08005add 	.word	0x08005add
 8005730:	240041a0 	.word	0x240041a0
 8005734:	2400407c 	.word	0x2400407c
 8005738:	2400003c 	.word	0x2400003c
 800573c:	2400419c 	.word	0x2400419c
 8005740:	24004188 	.word	0x24004188
 8005744:	24004180 	.word	0x24004180

08005748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <vTaskSuspendAll+0x18>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	4a03      	ldr	r2, [pc, #12]	@ (8005760 <vTaskSuspendAll+0x18>)
 8005754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005756:	bf00      	nop
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	240041a4 	.word	0x240041a4

08005764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005772:	4b42      	ldr	r3, [pc, #264]	@ (800587c <xTaskResumeAll+0x118>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <xTaskResumeAll+0x2e>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	603b      	str	r3, [r7, #0]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005792:	f7ff fca9 	bl	80050e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005796:	4b39      	ldr	r3, [pc, #228]	@ (800587c <xTaskResumeAll+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a37      	ldr	r2, [pc, #220]	@ (800587c <xTaskResumeAll+0x118>)
 800579e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a0:	4b36      	ldr	r3, [pc, #216]	@ (800587c <xTaskResumeAll+0x118>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d161      	bne.n	800586c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057a8:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <xTaskResumeAll+0x11c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05d      	beq.n	800586c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b0:	e02e      	b.n	8005810 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b2:	4b34      	ldr	r3, [pc, #208]	@ (8005884 <xTaskResumeAll+0x120>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3318      	adds	r3, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fb38 	bl	8004e34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fb33 	bl	8004e34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005888 <xTaskResumeAll+0x124>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005888 <xTaskResumeAll+0x124>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4a27      	ldr	r2, [pc, #156]	@ (800588c <xTaskResumeAll+0x128>)
 80057ee:	441a      	add	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7ff fabf 	bl	8004d7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005800:	4b23      	ldr	r3, [pc, #140]	@ (8005890 <xTaskResumeAll+0x12c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	429a      	cmp	r2, r3
 8005808:	d302      	bcc.n	8005810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800580a:	4b22      	ldr	r3, [pc, #136]	@ (8005894 <xTaskResumeAll+0x130>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005810:	4b1c      	ldr	r3, [pc, #112]	@ (8005884 <xTaskResumeAll+0x120>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1cc      	bne.n	80057b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800581e:	f000 fa19 	bl	8005c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005822:	4b1d      	ldr	r3, [pc, #116]	@ (8005898 <xTaskResumeAll+0x134>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800582e:	f000 f837 	bl	80058a0 <xTaskIncrementTick>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005838:	4b16      	ldr	r3, [pc, #88]	@ (8005894 <xTaskResumeAll+0x130>)
 800583a:	2201      	movs	r2, #1
 800583c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3b01      	subs	r3, #1
 8005842:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f1      	bne.n	800582e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800584a:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <xTaskResumeAll+0x134>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005850:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <xTaskResumeAll+0x130>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800585c:	4b0f      	ldr	r3, [pc, #60]	@ (800589c <xTaskResumeAll+0x138>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800586c:	f7ff fc6e 	bl	800514c <vPortExitCritical>

	return xAlreadyYielded;
 8005870:	68bb      	ldr	r3, [r7, #8]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	240041a4 	.word	0x240041a4
 8005880:	2400417c 	.word	0x2400417c
 8005884:	2400413c 	.word	0x2400413c
 8005888:	24004184 	.word	0x24004184
 800588c:	24004080 	.word	0x24004080
 8005890:	2400407c 	.word	0x2400407c
 8005894:	24004190 	.word	0x24004190
 8005898:	2400418c 	.word	0x2400418c
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058aa:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <xTaskIncrementTick+0x148>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 808f 	bne.w	80059d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058b4:	4b4d      	ldr	r3, [pc, #308]	@ (80059ec <xTaskIncrementTick+0x14c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058bc:	4a4b      	ldr	r2, [pc, #300]	@ (80059ec <xTaskIncrementTick+0x14c>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d121      	bne.n	800590c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	603b      	str	r3, [r7, #0]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <xTaskIncrementTick+0x46>
 80058ea:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <xTaskIncrementTick+0x154>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3e      	ldr	r2, [pc, #248]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4a3e      	ldr	r2, [pc, #248]	@ (80059f4 <xTaskIncrementTick+0x154>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b3e      	ldr	r3, [pc, #248]	@ (80059f8 <xTaskIncrementTick+0x158>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a3c      	ldr	r2, [pc, #240]	@ (80059f8 <xTaskIncrementTick+0x158>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	f000 f9a4 	bl	8005c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800590c:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <xTaskIncrementTick+0x15c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d348      	bcc.n	80059a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005916:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <xTaskIncrementTick+0x150>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <xTaskIncrementTick+0x15c>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	601a      	str	r2, [r3, #0]
					break;
 8005928:	e03e      	b.n	80059a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b31      	ldr	r3, [pc, #196]	@ (80059f0 <xTaskIncrementTick+0x150>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d203      	bcs.n	800594a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005942:	4a2e      	ldr	r2, [pc, #184]	@ (80059fc <xTaskIncrementTick+0x15c>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005948:	e02e      	b.n	80059a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fa70 	bl	8004e34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fa67 	bl	8004e34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	2201      	movs	r2, #1
 800596c:	409a      	lsls	r2, r3
 800596e:	4b24      	ldr	r3, [pc, #144]	@ (8005a00 <xTaskIncrementTick+0x160>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	4a22      	ldr	r2, [pc, #136]	@ (8005a00 <xTaskIncrementTick+0x160>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <xTaskIncrementTick+0x164>)
 8005986:	441a      	add	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7ff f9f3 	bl	8004d7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4b1b      	ldr	r3, [pc, #108]	@ (8005a08 <xTaskIncrementTick+0x168>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3b9      	bcc.n	8005916 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059a2:	2301      	movs	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a6:	e7b6      	b.n	8005916 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059a8:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <xTaskIncrementTick+0x168>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	4915      	ldr	r1, [pc, #84]	@ (8005a04 <xTaskIncrementTick+0x164>)
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d901      	bls.n	80059c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059c4:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <xTaskIncrementTick+0x16c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e004      	b.n	80059dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <xTaskIncrementTick+0x170>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a10 <xTaskIncrementTick+0x170>)
 80059da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	240041a4 	.word	0x240041a4
 80059ec:	24004180 	.word	0x24004180
 80059f0:	24004134 	.word	0x24004134
 80059f4:	24004138 	.word	0x24004138
 80059f8:	24004194 	.word	0x24004194
 80059fc:	2400419c 	.word	0x2400419c
 8005a00:	24004184 	.word	0x24004184
 8005a04:	24004080 	.word	0x24004080
 8005a08:	2400407c 	.word	0x2400407c
 8005a0c:	24004190 	.word	0x24004190
 8005a10:	2400418c 	.word	0x2400418c

08005a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <vTaskSwitchContext+0xb0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a22:	4b29      	ldr	r3, [pc, #164]	@ (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a28:	e045      	b.n	8005ab6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005a2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	4b26      	ldr	r3, [pc, #152]	@ (8005acc <vTaskSwitchContext+0xb8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	fab3 f383 	clz	r3, r3
 8005a3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	f1c3 031f 	rsb	r3, r3, #31
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	4922      	ldr	r1, [pc, #136]	@ (8005ad0 <vTaskSwitchContext+0xbc>)
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	607b      	str	r3, [r7, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <vTaskSwitchContext+0x5a>
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <vTaskSwitchContext+0xbc>)
 8005a7e:	4413      	add	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	3308      	adds	r3, #8
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d104      	bne.n	8005aa2 <vTaskSwitchContext+0x8e>
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad4 <vTaskSwitchContext+0xc0>)
 8005aaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <vTaskSwitchContext+0xc0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	334c      	adds	r3, #76	@ 0x4c
 8005ab2:	4a09      	ldr	r2, [pc, #36]	@ (8005ad8 <vTaskSwitchContext+0xc4>)
 8005ab4:	6013      	str	r3, [r2, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	240041a4 	.word	0x240041a4
 8005ac8:	24004190 	.word	0x24004190
 8005acc:	24004184 	.word	0x24004184
 8005ad0:	24004080 	.word	0x24004080
 8005ad4:	2400407c 	.word	0x2400407c
 8005ad8:	2400003c 	.word	0x2400003c

08005adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ae4:	f000 f852 	bl	8005b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <prvIdleTask+0x28>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d9f9      	bls.n	8005ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005af0:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <prvIdleTask+0x2c>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b00:	e7f0      	b.n	8005ae4 <prvIdleTask+0x8>
 8005b02:	bf00      	nop
 8005b04:	24004080 	.word	0x24004080
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e00c      	b.n	8005b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <prvInitialiseTaskLists+0x60>)
 8005b24:	4413      	add	r3, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f8fa 	bl	8004d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d9ef      	bls.n	8005b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b38:	480d      	ldr	r0, [pc, #52]	@ (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b3a:	f7ff f8f1 	bl	8004d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b3e:	480d      	ldr	r0, [pc, #52]	@ (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b40:	f7ff f8ee 	bl	8004d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b44:	480c      	ldr	r0, [pc, #48]	@ (8005b78 <prvInitialiseTaskLists+0x6c>)
 8005b46:	f7ff f8eb 	bl	8004d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b4a:	480c      	ldr	r0, [pc, #48]	@ (8005b7c <prvInitialiseTaskLists+0x70>)
 8005b4c:	f7ff f8e8 	bl	8004d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b50:	480b      	ldr	r0, [pc, #44]	@ (8005b80 <prvInitialiseTaskLists+0x74>)
 8005b52:	f7ff f8e5 	bl	8004d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <prvInitialiseTaskLists+0x78>)
 8005b58:	4a05      	ldr	r2, [pc, #20]	@ (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b88 <prvInitialiseTaskLists+0x7c>)
 8005b5e:	4a05      	ldr	r2, [pc, #20]	@ (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	24004080 	.word	0x24004080
 8005b70:	2400410c 	.word	0x2400410c
 8005b74:	24004120 	.word	0x24004120
 8005b78:	2400413c 	.word	0x2400413c
 8005b7c:	24004150 	.word	0x24004150
 8005b80:	24004168 	.word	0x24004168
 8005b84:	24004134 	.word	0x24004134
 8005b88:	24004138 	.word	0x24004138

08005b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b92:	e019      	b.n	8005bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b94:	f7ff faa8 	bl	80050e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <prvCheckTasksWaitingTermination+0x50>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff f945 	bl	8004e34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a0a      	ldr	r2, [pc, #40]	@ (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bbe:	f7ff fac5 	bl	800514c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f810 	bl	8005be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e1      	bne.n	8005b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	24004150 	.word	0x24004150
 8005be0:	2400417c 	.word	0x2400417c
 8005be4:	24004164 	.word	0x24004164

08005be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	334c      	adds	r3, #76	@ 0x4c
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f9e3 	bl	8005fc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe ff69 	bl	8004ae0 <vPortFree>
				vPortFree( pxTCB );
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fe ff66 	bl	8004ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c14:	e019      	b.n	8005c4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d103      	bne.n	8005c28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fe ff5d 	bl	8004ae0 <vPortFree>
	}
 8005c26:	e010      	b.n	8005c4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d00b      	beq.n	8005c4a <prvDeleteTCB+0x62>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60fb      	str	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <prvDeleteTCB+0x5e>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <prvResetNextTaskUnblockTime+0x38>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c64:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <prvResetNextTaskUnblockTime+0x3c>)
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c6c:	e008      	b.n	8005c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6e:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <prvResetNextTaskUnblockTime+0x38>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <prvResetNextTaskUnblockTime+0x3c>)
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	24004134 	.word	0x24004134
 8005c90:	2400419c 	.word	0x2400419c

08005c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c9e:	4b29      	ldr	r3, [pc, #164]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca4:	4b28      	ldr	r3, [pc, #160]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f8c2 	bl	8004e34 <uxListRemove>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cb6:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	4b21      	ldr	r3, [pc, #132]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	4a20      	ldr	r2, [pc, #128]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d10a      	bne.n	8005cec <prvAddCurrentTaskToDelayedList+0x58>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	481a      	ldr	r0, [pc, #104]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ce6:	f7ff f848 	bl	8004d7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cea:	e026      	b.n	8005d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cf4:	4b14      	ldr	r3, [pc, #80]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d209      	bcs.n	8005d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d04:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7ff f856 	bl	8004dc2 <vListInsert>
}
 8005d16:	e010      	b.n	8005d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d18:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f7ff f84c 	bl	8004dc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d202      	bcs.n	8005d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d34:	4a09      	ldr	r2, [pc, #36]	@ (8005d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6013      	str	r3, [r2, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	24004180 	.word	0x24004180
 8005d48:	2400407c 	.word	0x2400407c
 8005d4c:	24004184 	.word	0x24004184
 8005d50:	24004168 	.word	0x24004168
 8005d54:	24004138 	.word	0x24004138
 8005d58:	24004134 	.word	0x24004134
 8005d5c:	2400419c 	.word	0x2400419c

08005d60 <std>:
 8005d60:	2300      	movs	r3, #0
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6e:	6083      	str	r3, [r0, #8]
 8005d70:	8181      	strh	r1, [r0, #12]
 8005d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d74:	81c2      	strh	r2, [r0, #14]
 8005d76:	6183      	str	r3, [r0, #24]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	305c      	adds	r0, #92	@ 0x5c
 8005d7e:	f000 f906 	bl	8005f8e <memset>
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <std+0x58>)
 8005d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <std+0x5c>)
 8005d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <std+0x60>)
 8005d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc4 <std+0x64>)
 8005d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <std+0x68>)
 8005d94:	6224      	str	r4, [r4, #32]
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d006      	beq.n	8005da8 <std+0x48>
 8005d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d9e:	4294      	cmp	r4, r2
 8005da0:	d002      	beq.n	8005da8 <std+0x48>
 8005da2:	33d0      	adds	r3, #208	@ 0xd0
 8005da4:	429c      	cmp	r4, r3
 8005da6:	d105      	bne.n	8005db4 <std+0x54>
 8005da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db0:	f000 b9c4 	b.w	800613c <__retarget_lock_init_recursive>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	bf00      	nop
 8005db8:	08005f09 	.word	0x08005f09
 8005dbc:	08005f2b 	.word	0x08005f2b
 8005dc0:	08005f63 	.word	0x08005f63
 8005dc4:	08005f87 	.word	0x08005f87
 8005dc8:	240041a8 	.word	0x240041a8

08005dcc <stdio_exit_handler>:
 8005dcc:	4a02      	ldr	r2, [pc, #8]	@ (8005dd8 <stdio_exit_handler+0xc>)
 8005dce:	4903      	ldr	r1, [pc, #12]	@ (8005ddc <stdio_exit_handler+0x10>)
 8005dd0:	4803      	ldr	r0, [pc, #12]	@ (8005de0 <stdio_exit_handler+0x14>)
 8005dd2:	f000 b869 	b.w	8005ea8 <_fwalk_sglue>
 8005dd6:	bf00      	nop
 8005dd8:	24000030 	.word	0x24000030
 8005ddc:	080069d9 	.word	0x080069d9
 8005de0:	24000040 	.word	0x24000040

08005de4 <cleanup_stdio>:
 8005de4:	6841      	ldr	r1, [r0, #4]
 8005de6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <cleanup_stdio+0x34>)
 8005de8:	4299      	cmp	r1, r3
 8005dea:	b510      	push	{r4, lr}
 8005dec:	4604      	mov	r4, r0
 8005dee:	d001      	beq.n	8005df4 <cleanup_stdio+0x10>
 8005df0:	f000 fdf2 	bl	80069d8 <_fflush_r>
 8005df4:	68a1      	ldr	r1, [r4, #8]
 8005df6:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <cleanup_stdio+0x38>)
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	d002      	beq.n	8005e02 <cleanup_stdio+0x1e>
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fdeb 	bl	80069d8 <_fflush_r>
 8005e02:	68e1      	ldr	r1, [r4, #12]
 8005e04:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <cleanup_stdio+0x3c>)
 8005e06:	4299      	cmp	r1, r3
 8005e08:	d004      	beq.n	8005e14 <cleanup_stdio+0x30>
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f000 bde2 	b.w	80069d8 <_fflush_r>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	240041a8 	.word	0x240041a8
 8005e1c:	24004210 	.word	0x24004210
 8005e20:	24004278 	.word	0x24004278

08005e24 <global_stdio_init.part.0>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <global_stdio_init.part.0+0x30>)
 8005e28:	4c0b      	ldr	r4, [pc, #44]	@ (8005e58 <global_stdio_init.part.0+0x34>)
 8005e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e5c <global_stdio_init.part.0+0x38>)
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	2200      	movs	r2, #0
 8005e32:	2104      	movs	r1, #4
 8005e34:	f7ff ff94 	bl	8005d60 <std>
 8005e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	2109      	movs	r1, #9
 8005e40:	f7ff ff8e 	bl	8005d60 <std>
 8005e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e48:	2202      	movs	r2, #2
 8005e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4e:	2112      	movs	r1, #18
 8005e50:	f7ff bf86 	b.w	8005d60 <std>
 8005e54:	240042e0 	.word	0x240042e0
 8005e58:	240041a8 	.word	0x240041a8
 8005e5c:	08005dcd 	.word	0x08005dcd

08005e60 <__sfp_lock_acquire>:
 8005e60:	4801      	ldr	r0, [pc, #4]	@ (8005e68 <__sfp_lock_acquire+0x8>)
 8005e62:	f000 b96c 	b.w	800613e <__retarget_lock_acquire_recursive>
 8005e66:	bf00      	nop
 8005e68:	240042e9 	.word	0x240042e9

08005e6c <__sfp_lock_release>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	@ (8005e74 <__sfp_lock_release+0x8>)
 8005e6e:	f000 b967 	b.w	8006140 <__retarget_lock_release_recursive>
 8005e72:	bf00      	nop
 8005e74:	240042e9 	.word	0x240042e9

08005e78 <__sinit>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f7ff fff0 	bl	8005e60 <__sfp_lock_acquire>
 8005e80:	6a23      	ldr	r3, [r4, #32]
 8005e82:	b11b      	cbz	r3, 8005e8c <__sinit+0x14>
 8005e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e88:	f7ff bff0 	b.w	8005e6c <__sfp_lock_release>
 8005e8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ea0 <__sinit+0x28>)
 8005e8e:	6223      	str	r3, [r4, #32]
 8005e90:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <__sinit+0x2c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f5      	bne.n	8005e84 <__sinit+0xc>
 8005e98:	f7ff ffc4 	bl	8005e24 <global_stdio_init.part.0>
 8005e9c:	e7f2      	b.n	8005e84 <__sinit+0xc>
 8005e9e:	bf00      	nop
 8005ea0:	08005de5 	.word	0x08005de5
 8005ea4:	240042e0 	.word	0x240042e0

08005ea8 <_fwalk_sglue>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	4607      	mov	r7, r0
 8005eae:	4688      	mov	r8, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8005ebc:	d505      	bpl.n	8005eca <_fwalk_sglue+0x22>
 8005ebe:	6824      	ldr	r4, [r4, #0]
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	d1f7      	bne.n	8005eb4 <_fwalk_sglue+0xc>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d907      	bls.n	8005ee0 <_fwalk_sglue+0x38>
 8005ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	d003      	beq.n	8005ee0 <_fwalk_sglue+0x38>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c0      	blx	r8
 8005ede:	4306      	orrs	r6, r0
 8005ee0:	3568      	adds	r5, #104	@ 0x68
 8005ee2:	e7e9      	b.n	8005eb8 <_fwalk_sglue+0x10>

08005ee4 <iprintf>:
 8005ee4:	b40f      	push	{r0, r1, r2, r3}
 8005ee6:	b507      	push	{r0, r1, r2, lr}
 8005ee8:	4906      	ldr	r1, [pc, #24]	@ (8005f04 <iprintf+0x20>)
 8005eea:	ab04      	add	r3, sp, #16
 8005eec:	6808      	ldr	r0, [r1, #0]
 8005eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef2:	6881      	ldr	r1, [r0, #8]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	f000 fa47 	bl	8006388 <_vfiprintf_r>
 8005efa:	b003      	add	sp, #12
 8005efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f00:	b004      	add	sp, #16
 8005f02:	4770      	bx	lr
 8005f04:	2400003c 	.word	0x2400003c

08005f08 <__sread>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f10:	f000 f8c6 	bl	80060a0 <_read_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	bfab      	itete	ge
 8005f18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f1c:	181b      	addge	r3, r3, r0
 8005f1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f22:	bfac      	ite	ge
 8005f24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f26:	81a3      	strhlt	r3, [r4, #12]
 8005f28:	bd10      	pop	{r4, pc}

08005f2a <__swrite>:
 8005f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2e:	461f      	mov	r7, r3
 8005f30:	898b      	ldrh	r3, [r1, #12]
 8005f32:	05db      	lsls	r3, r3, #23
 8005f34:	4605      	mov	r5, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4616      	mov	r6, r2
 8005f3a:	d505      	bpl.n	8005f48 <__swrite+0x1e>
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	2302      	movs	r3, #2
 8005f42:	2200      	movs	r2, #0
 8005f44:	f000 f89a 	bl	800607c <_lseek_r>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	4632      	mov	r2, r6
 8005f56:	463b      	mov	r3, r7
 8005f58:	4628      	mov	r0, r5
 8005f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	f000 b8b1 	b.w	80060c4 <_write_r>

08005f62 <__sseek>:
 8005f62:	b510      	push	{r4, lr}
 8005f64:	460c      	mov	r4, r1
 8005f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6a:	f000 f887 	bl	800607c <_lseek_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	bf15      	itete	ne
 8005f74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f7e:	81a3      	strheq	r3, [r4, #12]
 8005f80:	bf18      	it	ne
 8005f82:	81a3      	strhne	r3, [r4, #12]
 8005f84:	bd10      	pop	{r4, pc}

08005f86 <__sclose>:
 8005f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8a:	f000 b809 	b.w	8005fa0 <_close_r>

08005f8e <memset>:
 8005f8e:	4402      	add	r2, r0
 8005f90:	4603      	mov	r3, r0
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d100      	bne.n	8005f98 <memset+0xa>
 8005f96:	4770      	bx	lr
 8005f98:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9c:	e7f9      	b.n	8005f92 <memset+0x4>
	...

08005fa0 <_close_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4d06      	ldr	r5, [pc, #24]	@ (8005fbc <_close_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fa ff34 	bl	8000e18 <_close>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_close_r+0x1a>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_close_r+0x1a>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	240042e4 	.word	0x240042e4

08005fc0 <_reclaim_reent>:
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <_reclaim_reent+0xb8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4283      	cmp	r3, r0
 8005fc6:	b570      	push	{r4, r5, r6, lr}
 8005fc8:	4604      	mov	r4, r0
 8005fca:	d053      	beq.n	8006074 <_reclaim_reent+0xb4>
 8005fcc:	69c3      	ldr	r3, [r0, #28]
 8005fce:	b31b      	cbz	r3, 8006018 <_reclaim_reent+0x58>
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	b163      	cbz	r3, 8005fee <_reclaim_reent+0x2e>
 8005fd4:	2500      	movs	r5, #0
 8005fd6:	69e3      	ldr	r3, [r4, #28]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	5959      	ldr	r1, [r3, r5]
 8005fdc:	b9b1      	cbnz	r1, 800600c <_reclaim_reent+0x4c>
 8005fde:	3504      	adds	r5, #4
 8005fe0:	2d80      	cmp	r5, #128	@ 0x80
 8005fe2:	d1f8      	bne.n	8005fd6 <_reclaim_reent+0x16>
 8005fe4:	69e3      	ldr	r3, [r4, #28]
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	68d9      	ldr	r1, [r3, #12]
 8005fea:	f000 f8ab 	bl	8006144 <_free_r>
 8005fee:	69e3      	ldr	r3, [r4, #28]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	b111      	cbz	r1, 8005ffa <_reclaim_reent+0x3a>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 f8a5 	bl	8006144 <_free_r>
 8005ffa:	69e3      	ldr	r3, [r4, #28]
 8005ffc:	689d      	ldr	r5, [r3, #8]
 8005ffe:	b15d      	cbz	r5, 8006018 <_reclaim_reent+0x58>
 8006000:	4629      	mov	r1, r5
 8006002:	4620      	mov	r0, r4
 8006004:	682d      	ldr	r5, [r5, #0]
 8006006:	f000 f89d 	bl	8006144 <_free_r>
 800600a:	e7f8      	b.n	8005ffe <_reclaim_reent+0x3e>
 800600c:	680e      	ldr	r6, [r1, #0]
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f898 	bl	8006144 <_free_r>
 8006014:	4631      	mov	r1, r6
 8006016:	e7e1      	b.n	8005fdc <_reclaim_reent+0x1c>
 8006018:	6961      	ldr	r1, [r4, #20]
 800601a:	b111      	cbz	r1, 8006022 <_reclaim_reent+0x62>
 800601c:	4620      	mov	r0, r4
 800601e:	f000 f891 	bl	8006144 <_free_r>
 8006022:	69e1      	ldr	r1, [r4, #28]
 8006024:	b111      	cbz	r1, 800602c <_reclaim_reent+0x6c>
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f88c 	bl	8006144 <_free_r>
 800602c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800602e:	b111      	cbz	r1, 8006036 <_reclaim_reent+0x76>
 8006030:	4620      	mov	r0, r4
 8006032:	f000 f887 	bl	8006144 <_free_r>
 8006036:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006038:	b111      	cbz	r1, 8006040 <_reclaim_reent+0x80>
 800603a:	4620      	mov	r0, r4
 800603c:	f000 f882 	bl	8006144 <_free_r>
 8006040:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006042:	b111      	cbz	r1, 800604a <_reclaim_reent+0x8a>
 8006044:	4620      	mov	r0, r4
 8006046:	f000 f87d 	bl	8006144 <_free_r>
 800604a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800604c:	b111      	cbz	r1, 8006054 <_reclaim_reent+0x94>
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f878 	bl	8006144 <_free_r>
 8006054:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006056:	b111      	cbz	r1, 800605e <_reclaim_reent+0x9e>
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f873 	bl	8006144 <_free_r>
 800605e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006060:	b111      	cbz	r1, 8006068 <_reclaim_reent+0xa8>
 8006062:	4620      	mov	r0, r4
 8006064:	f000 f86e 	bl	8006144 <_free_r>
 8006068:	6a23      	ldr	r3, [r4, #32]
 800606a:	b11b      	cbz	r3, 8006074 <_reclaim_reent+0xb4>
 800606c:	4620      	mov	r0, r4
 800606e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006072:	4718      	bx	r3
 8006074:	bd70      	pop	{r4, r5, r6, pc}
 8006076:	bf00      	nop
 8006078:	2400003c 	.word	0x2400003c

0800607c <_lseek_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d07      	ldr	r5, [pc, #28]	@ (800609c <_lseek_r+0x20>)
 8006080:	4604      	mov	r4, r0
 8006082:	4608      	mov	r0, r1
 8006084:	4611      	mov	r1, r2
 8006086:	2200      	movs	r2, #0
 8006088:	602a      	str	r2, [r5, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	f7fa feeb 	bl	8000e66 <_lseek>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d102      	bne.n	800609a <_lseek_r+0x1e>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	b103      	cbz	r3, 800609a <_lseek_r+0x1e>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	240042e4 	.word	0x240042e4

080060a0 <_read_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d07      	ldr	r5, [pc, #28]	@ (80060c0 <_read_r+0x20>)
 80060a4:	4604      	mov	r4, r0
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	602a      	str	r2, [r5, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f7fa fe79 	bl	8000da6 <_read>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_read_r+0x1e>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_read_r+0x1e>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	240042e4 	.word	0x240042e4

080060c4 <_write_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	@ (80060e4 <_write_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7fa fe84 	bl	8000de0 <_write>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_write_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_write_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	240042e4 	.word	0x240042e4

080060e8 <__errno>:
 80060e8:	4b01      	ldr	r3, [pc, #4]	@ (80060f0 <__errno+0x8>)
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	2400003c 	.word	0x2400003c

080060f4 <__libc_init_array>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	4d0d      	ldr	r5, [pc, #52]	@ (800612c <__libc_init_array+0x38>)
 80060f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006130 <__libc_init_array+0x3c>)
 80060fa:	1b64      	subs	r4, r4, r5
 80060fc:	10a4      	asrs	r4, r4, #2
 80060fe:	2600      	movs	r6, #0
 8006100:	42a6      	cmp	r6, r4
 8006102:	d109      	bne.n	8006118 <__libc_init_array+0x24>
 8006104:	4d0b      	ldr	r5, [pc, #44]	@ (8006134 <__libc_init_array+0x40>)
 8006106:	4c0c      	ldr	r4, [pc, #48]	@ (8006138 <__libc_init_array+0x44>)
 8006108:	f000 fdb6 	bl	8006c78 <_init>
 800610c:	1b64      	subs	r4, r4, r5
 800610e:	10a4      	asrs	r4, r4, #2
 8006110:	2600      	movs	r6, #0
 8006112:	42a6      	cmp	r6, r4
 8006114:	d105      	bne.n	8006122 <__libc_init_array+0x2e>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	f855 3b04 	ldr.w	r3, [r5], #4
 800611c:	4798      	blx	r3
 800611e:	3601      	adds	r6, #1
 8006120:	e7ee      	b.n	8006100 <__libc_init_array+0xc>
 8006122:	f855 3b04 	ldr.w	r3, [r5], #4
 8006126:	4798      	blx	r3
 8006128:	3601      	adds	r6, #1
 800612a:	e7f2      	b.n	8006112 <__libc_init_array+0x1e>
 800612c:	08006d4c 	.word	0x08006d4c
 8006130:	08006d4c 	.word	0x08006d4c
 8006134:	08006d4c 	.word	0x08006d4c
 8006138:	08006d50 	.word	0x08006d50

0800613c <__retarget_lock_init_recursive>:
 800613c:	4770      	bx	lr

0800613e <__retarget_lock_acquire_recursive>:
 800613e:	4770      	bx	lr

08006140 <__retarget_lock_release_recursive>:
 8006140:	4770      	bx	lr
	...

08006144 <_free_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4605      	mov	r5, r0
 8006148:	2900      	cmp	r1, #0
 800614a:	d041      	beq.n	80061d0 <_free_r+0x8c>
 800614c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006150:	1f0c      	subs	r4, r1, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	bfb8      	it	lt
 8006156:	18e4      	addlt	r4, r4, r3
 8006158:	f000 f8e0 	bl	800631c <__malloc_lock>
 800615c:	4a1d      	ldr	r2, [pc, #116]	@ (80061d4 <_free_r+0x90>)
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	b933      	cbnz	r3, 8006170 <_free_r+0x2c>
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	6014      	str	r4, [r2, #0]
 8006166:	4628      	mov	r0, r5
 8006168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800616c:	f000 b8dc 	b.w	8006328 <__malloc_unlock>
 8006170:	42a3      	cmp	r3, r4
 8006172:	d908      	bls.n	8006186 <_free_r+0x42>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	1821      	adds	r1, r4, r0
 8006178:	428b      	cmp	r3, r1
 800617a:	bf01      	itttt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	1809      	addeq	r1, r1, r0
 8006182:	6021      	streq	r1, [r4, #0]
 8006184:	e7ed      	b.n	8006162 <_free_r+0x1e>
 8006186:	461a      	mov	r2, r3
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b10b      	cbz	r3, 8006190 <_free_r+0x4c>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d9fa      	bls.n	8006186 <_free_r+0x42>
 8006190:	6811      	ldr	r1, [r2, #0]
 8006192:	1850      	adds	r0, r2, r1
 8006194:	42a0      	cmp	r0, r4
 8006196:	d10b      	bne.n	80061b0 <_free_r+0x6c>
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	4401      	add	r1, r0
 800619c:	1850      	adds	r0, r2, r1
 800619e:	4283      	cmp	r3, r0
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	d1e0      	bne.n	8006166 <_free_r+0x22>
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	6053      	str	r3, [r2, #4]
 80061aa:	4408      	add	r0, r1
 80061ac:	6010      	str	r0, [r2, #0]
 80061ae:	e7da      	b.n	8006166 <_free_r+0x22>
 80061b0:	d902      	bls.n	80061b8 <_free_r+0x74>
 80061b2:	230c      	movs	r3, #12
 80061b4:	602b      	str	r3, [r5, #0]
 80061b6:	e7d6      	b.n	8006166 <_free_r+0x22>
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	1821      	adds	r1, r4, r0
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf04      	itt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	bf04      	itt	eq
 80061c8:	1809      	addeq	r1, r1, r0
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	6054      	str	r4, [r2, #4]
 80061ce:	e7ca      	b.n	8006166 <_free_r+0x22>
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	bf00      	nop
 80061d4:	240042f0 	.word	0x240042f0

080061d8 <sbrk_aligned>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4e0f      	ldr	r6, [pc, #60]	@ (8006218 <sbrk_aligned+0x40>)
 80061dc:	460c      	mov	r4, r1
 80061de:	6831      	ldr	r1, [r6, #0]
 80061e0:	4605      	mov	r5, r0
 80061e2:	b911      	cbnz	r1, 80061ea <sbrk_aligned+0x12>
 80061e4:	f000 fcb4 	bl	8006b50 <_sbrk_r>
 80061e8:	6030      	str	r0, [r6, #0]
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 fcaf 	bl	8006b50 <_sbrk_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	d103      	bne.n	80061fe <sbrk_aligned+0x26>
 80061f6:	f04f 34ff 	mov.w	r4, #4294967295
 80061fa:	4620      	mov	r0, r4
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
 80061fe:	1cc4      	adds	r4, r0, #3
 8006200:	f024 0403 	bic.w	r4, r4, #3
 8006204:	42a0      	cmp	r0, r4
 8006206:	d0f8      	beq.n	80061fa <sbrk_aligned+0x22>
 8006208:	1a21      	subs	r1, r4, r0
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fca0 	bl	8006b50 <_sbrk_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d1f2      	bne.n	80061fa <sbrk_aligned+0x22>
 8006214:	e7ef      	b.n	80061f6 <sbrk_aligned+0x1e>
 8006216:	bf00      	nop
 8006218:	240042ec 	.word	0x240042ec

0800621c <_malloc_r>:
 800621c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006220:	1ccd      	adds	r5, r1, #3
 8006222:	f025 0503 	bic.w	r5, r5, #3
 8006226:	3508      	adds	r5, #8
 8006228:	2d0c      	cmp	r5, #12
 800622a:	bf38      	it	cc
 800622c:	250c      	movcc	r5, #12
 800622e:	2d00      	cmp	r5, #0
 8006230:	4606      	mov	r6, r0
 8006232:	db01      	blt.n	8006238 <_malloc_r+0x1c>
 8006234:	42a9      	cmp	r1, r5
 8006236:	d904      	bls.n	8006242 <_malloc_r+0x26>
 8006238:	230c      	movs	r3, #12
 800623a:	6033      	str	r3, [r6, #0]
 800623c:	2000      	movs	r0, #0
 800623e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006318 <_malloc_r+0xfc>
 8006246:	f000 f869 	bl	800631c <__malloc_lock>
 800624a:	f8d8 3000 	ldr.w	r3, [r8]
 800624e:	461c      	mov	r4, r3
 8006250:	bb44      	cbnz	r4, 80062a4 <_malloc_r+0x88>
 8006252:	4629      	mov	r1, r5
 8006254:	4630      	mov	r0, r6
 8006256:	f7ff ffbf 	bl	80061d8 <sbrk_aligned>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	4604      	mov	r4, r0
 800625e:	d158      	bne.n	8006312 <_malloc_r+0xf6>
 8006260:	f8d8 4000 	ldr.w	r4, [r8]
 8006264:	4627      	mov	r7, r4
 8006266:	2f00      	cmp	r7, #0
 8006268:	d143      	bne.n	80062f2 <_malloc_r+0xd6>
 800626a:	2c00      	cmp	r4, #0
 800626c:	d04b      	beq.n	8006306 <_malloc_r+0xea>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	4639      	mov	r1, r7
 8006272:	4630      	mov	r0, r6
 8006274:	eb04 0903 	add.w	r9, r4, r3
 8006278:	f000 fc6a 	bl	8006b50 <_sbrk_r>
 800627c:	4581      	cmp	r9, r0
 800627e:	d142      	bne.n	8006306 <_malloc_r+0xea>
 8006280:	6821      	ldr	r1, [r4, #0]
 8006282:	1a6d      	subs	r5, r5, r1
 8006284:	4629      	mov	r1, r5
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ffa6 	bl	80061d8 <sbrk_aligned>
 800628c:	3001      	adds	r0, #1
 800628e:	d03a      	beq.n	8006306 <_malloc_r+0xea>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	442b      	add	r3, r5
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	f8d8 3000 	ldr.w	r3, [r8]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	bb62      	cbnz	r2, 80062f8 <_malloc_r+0xdc>
 800629e:	f8c8 7000 	str.w	r7, [r8]
 80062a2:	e00f      	b.n	80062c4 <_malloc_r+0xa8>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	1b52      	subs	r2, r2, r5
 80062a8:	d420      	bmi.n	80062ec <_malloc_r+0xd0>
 80062aa:	2a0b      	cmp	r2, #11
 80062ac:	d917      	bls.n	80062de <_malloc_r+0xc2>
 80062ae:	1961      	adds	r1, r4, r5
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	6025      	str	r5, [r4, #0]
 80062b4:	bf18      	it	ne
 80062b6:	6059      	strne	r1, [r3, #4]
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	bf08      	it	eq
 80062bc:	f8c8 1000 	streq.w	r1, [r8]
 80062c0:	5162      	str	r2, [r4, r5]
 80062c2:	604b      	str	r3, [r1, #4]
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f82f 	bl	8006328 <__malloc_unlock>
 80062ca:	f104 000b 	add.w	r0, r4, #11
 80062ce:	1d23      	adds	r3, r4, #4
 80062d0:	f020 0007 	bic.w	r0, r0, #7
 80062d4:	1ac2      	subs	r2, r0, r3
 80062d6:	bf1c      	itt	ne
 80062d8:	1a1b      	subne	r3, r3, r0
 80062da:	50a3      	strne	r3, [r4, r2]
 80062dc:	e7af      	b.n	800623e <_malloc_r+0x22>
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	bf0c      	ite	eq
 80062e4:	f8c8 2000 	streq.w	r2, [r8]
 80062e8:	605a      	strne	r2, [r3, #4]
 80062ea:	e7eb      	b.n	80062c4 <_malloc_r+0xa8>
 80062ec:	4623      	mov	r3, r4
 80062ee:	6864      	ldr	r4, [r4, #4]
 80062f0:	e7ae      	b.n	8006250 <_malloc_r+0x34>
 80062f2:	463c      	mov	r4, r7
 80062f4:	687f      	ldr	r7, [r7, #4]
 80062f6:	e7b6      	b.n	8006266 <_malloc_r+0x4a>
 80062f8:	461a      	mov	r2, r3
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d1fb      	bne.n	80062f8 <_malloc_r+0xdc>
 8006300:	2300      	movs	r3, #0
 8006302:	6053      	str	r3, [r2, #4]
 8006304:	e7de      	b.n	80062c4 <_malloc_r+0xa8>
 8006306:	230c      	movs	r3, #12
 8006308:	6033      	str	r3, [r6, #0]
 800630a:	4630      	mov	r0, r6
 800630c:	f000 f80c 	bl	8006328 <__malloc_unlock>
 8006310:	e794      	b.n	800623c <_malloc_r+0x20>
 8006312:	6005      	str	r5, [r0, #0]
 8006314:	e7d6      	b.n	80062c4 <_malloc_r+0xa8>
 8006316:	bf00      	nop
 8006318:	240042f0 	.word	0x240042f0

0800631c <__malloc_lock>:
 800631c:	4801      	ldr	r0, [pc, #4]	@ (8006324 <__malloc_lock+0x8>)
 800631e:	f7ff bf0e 	b.w	800613e <__retarget_lock_acquire_recursive>
 8006322:	bf00      	nop
 8006324:	240042e8 	.word	0x240042e8

08006328 <__malloc_unlock>:
 8006328:	4801      	ldr	r0, [pc, #4]	@ (8006330 <__malloc_unlock+0x8>)
 800632a:	f7ff bf09 	b.w	8006140 <__retarget_lock_release_recursive>
 800632e:	bf00      	nop
 8006330:	240042e8 	.word	0x240042e8

08006334 <__sfputc_r>:
 8006334:	6893      	ldr	r3, [r2, #8]
 8006336:	3b01      	subs	r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	b410      	push	{r4}
 800633c:	6093      	str	r3, [r2, #8]
 800633e:	da08      	bge.n	8006352 <__sfputc_r+0x1e>
 8006340:	6994      	ldr	r4, [r2, #24]
 8006342:	42a3      	cmp	r3, r4
 8006344:	db01      	blt.n	800634a <__sfputc_r+0x16>
 8006346:	290a      	cmp	r1, #10
 8006348:	d103      	bne.n	8006352 <__sfputc_r+0x1e>
 800634a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800634e:	f000 bb6b 	b.w	8006a28 <__swbuf_r>
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	1c58      	adds	r0, r3, #1
 8006356:	6010      	str	r0, [r2, #0]
 8006358:	7019      	strb	r1, [r3, #0]
 800635a:	4608      	mov	r0, r1
 800635c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006360:	4770      	bx	lr

08006362 <__sfputs_r>:
 8006362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	4614      	mov	r4, r2
 800636a:	18d5      	adds	r5, r2, r3
 800636c:	42ac      	cmp	r4, r5
 800636e:	d101      	bne.n	8006374 <__sfputs_r+0x12>
 8006370:	2000      	movs	r0, #0
 8006372:	e007      	b.n	8006384 <__sfputs_r+0x22>
 8006374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006378:	463a      	mov	r2, r7
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffda 	bl	8006334 <__sfputc_r>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d1f3      	bne.n	800636c <__sfputs_r+0xa>
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006388 <_vfiprintf_r>:
 8006388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	460d      	mov	r5, r1
 800638e:	b09d      	sub	sp, #116	@ 0x74
 8006390:	4614      	mov	r4, r2
 8006392:	4698      	mov	r8, r3
 8006394:	4606      	mov	r6, r0
 8006396:	b118      	cbz	r0, 80063a0 <_vfiprintf_r+0x18>
 8006398:	6a03      	ldr	r3, [r0, #32]
 800639a:	b90b      	cbnz	r3, 80063a0 <_vfiprintf_r+0x18>
 800639c:	f7ff fd6c 	bl	8005e78 <__sinit>
 80063a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063a2:	07d9      	lsls	r1, r3, #31
 80063a4:	d405      	bmi.n	80063b2 <_vfiprintf_r+0x2a>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	059a      	lsls	r2, r3, #22
 80063aa:	d402      	bmi.n	80063b2 <_vfiprintf_r+0x2a>
 80063ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ae:	f7ff fec6 	bl	800613e <__retarget_lock_acquire_recursive>
 80063b2:	89ab      	ldrh	r3, [r5, #12]
 80063b4:	071b      	lsls	r3, r3, #28
 80063b6:	d501      	bpl.n	80063bc <_vfiprintf_r+0x34>
 80063b8:	692b      	ldr	r3, [r5, #16]
 80063ba:	b99b      	cbnz	r3, 80063e4 <_vfiprintf_r+0x5c>
 80063bc:	4629      	mov	r1, r5
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 fb70 	bl	8006aa4 <__swsetup_r>
 80063c4:	b170      	cbz	r0, 80063e4 <_vfiprintf_r+0x5c>
 80063c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063c8:	07dc      	lsls	r4, r3, #31
 80063ca:	d504      	bpl.n	80063d6 <_vfiprintf_r+0x4e>
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	b01d      	add	sp, #116	@ 0x74
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	89ab      	ldrh	r3, [r5, #12]
 80063d8:	0598      	lsls	r0, r3, #22
 80063da:	d4f7      	bmi.n	80063cc <_vfiprintf_r+0x44>
 80063dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063de:	f7ff feaf 	bl	8006140 <__retarget_lock_release_recursive>
 80063e2:	e7f3      	b.n	80063cc <_vfiprintf_r+0x44>
 80063e4:	2300      	movs	r3, #0
 80063e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e8:	2320      	movs	r3, #32
 80063ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f2:	2330      	movs	r3, #48	@ 0x30
 80063f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065a4 <_vfiprintf_r+0x21c>
 80063f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063fc:	f04f 0901 	mov.w	r9, #1
 8006400:	4623      	mov	r3, r4
 8006402:	469a      	mov	sl, r3
 8006404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006408:	b10a      	cbz	r2, 800640e <_vfiprintf_r+0x86>
 800640a:	2a25      	cmp	r2, #37	@ 0x25
 800640c:	d1f9      	bne.n	8006402 <_vfiprintf_r+0x7a>
 800640e:	ebba 0b04 	subs.w	fp, sl, r4
 8006412:	d00b      	beq.n	800642c <_vfiprintf_r+0xa4>
 8006414:	465b      	mov	r3, fp
 8006416:	4622      	mov	r2, r4
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f7ff ffa1 	bl	8006362 <__sfputs_r>
 8006420:	3001      	adds	r0, #1
 8006422:	f000 80a7 	beq.w	8006574 <_vfiprintf_r+0x1ec>
 8006426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006428:	445a      	add	r2, fp
 800642a:	9209      	str	r2, [sp, #36]	@ 0x24
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 809f 	beq.w	8006574 <_vfiprintf_r+0x1ec>
 8006436:	2300      	movs	r3, #0
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006440:	f10a 0a01 	add.w	sl, sl, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800644c:	931a      	str	r3, [sp, #104]	@ 0x68
 800644e:	4654      	mov	r4, sl
 8006450:	2205      	movs	r2, #5
 8006452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006456:	4853      	ldr	r0, [pc, #332]	@ (80065a4 <_vfiprintf_r+0x21c>)
 8006458:	f7f9 ff42 	bl	80002e0 <memchr>
 800645c:	9a04      	ldr	r2, [sp, #16]
 800645e:	b9d8      	cbnz	r0, 8006498 <_vfiprintf_r+0x110>
 8006460:	06d1      	lsls	r1, r2, #27
 8006462:	bf44      	itt	mi
 8006464:	2320      	movmi	r3, #32
 8006466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800646a:	0713      	lsls	r3, r2, #28
 800646c:	bf44      	itt	mi
 800646e:	232b      	movmi	r3, #43	@ 0x2b
 8006470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b2a      	cmp	r3, #42	@ 0x2a
 800647a:	d015      	beq.n	80064a8 <_vfiprintf_r+0x120>
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	4654      	mov	r4, sl
 8006480:	2000      	movs	r0, #0
 8006482:	f04f 0c0a 	mov.w	ip, #10
 8006486:	4621      	mov	r1, r4
 8006488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800648c:	3b30      	subs	r3, #48	@ 0x30
 800648e:	2b09      	cmp	r3, #9
 8006490:	d94b      	bls.n	800652a <_vfiprintf_r+0x1a2>
 8006492:	b1b0      	cbz	r0, 80064c2 <_vfiprintf_r+0x13a>
 8006494:	9207      	str	r2, [sp, #28]
 8006496:	e014      	b.n	80064c2 <_vfiprintf_r+0x13a>
 8006498:	eba0 0308 	sub.w	r3, r0, r8
 800649c:	fa09 f303 	lsl.w	r3, r9, r3
 80064a0:	4313      	orrs	r3, r2
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	46a2      	mov	sl, r4
 80064a6:	e7d2      	b.n	800644e <_vfiprintf_r+0xc6>
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	1d19      	adds	r1, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	9103      	str	r1, [sp, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bfbb      	ittet	lt
 80064b4:	425b      	neglt	r3, r3
 80064b6:	f042 0202 	orrlt.w	r2, r2, #2
 80064ba:	9307      	strge	r3, [sp, #28]
 80064bc:	9307      	strlt	r3, [sp, #28]
 80064be:	bfb8      	it	lt
 80064c0:	9204      	strlt	r2, [sp, #16]
 80064c2:	7823      	ldrb	r3, [r4, #0]
 80064c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80064c6:	d10a      	bne.n	80064de <_vfiprintf_r+0x156>
 80064c8:	7863      	ldrb	r3, [r4, #1]
 80064ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80064cc:	d132      	bne.n	8006534 <_vfiprintf_r+0x1ac>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	9203      	str	r2, [sp, #12]
 80064d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064da:	3402      	adds	r4, #2
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80065b4 <_vfiprintf_r+0x22c>
 80064e2:	7821      	ldrb	r1, [r4, #0]
 80064e4:	2203      	movs	r2, #3
 80064e6:	4650      	mov	r0, sl
 80064e8:	f7f9 fefa 	bl	80002e0 <memchr>
 80064ec:	b138      	cbz	r0, 80064fe <_vfiprintf_r+0x176>
 80064ee:	9b04      	ldr	r3, [sp, #16]
 80064f0:	eba0 000a 	sub.w	r0, r0, sl
 80064f4:	2240      	movs	r2, #64	@ 0x40
 80064f6:	4082      	lsls	r2, r0
 80064f8:	4313      	orrs	r3, r2
 80064fa:	3401      	adds	r4, #1
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4829      	ldr	r0, [pc, #164]	@ (80065a8 <_vfiprintf_r+0x220>)
 8006504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006508:	2206      	movs	r2, #6
 800650a:	f7f9 fee9 	bl	80002e0 <memchr>
 800650e:	2800      	cmp	r0, #0
 8006510:	d03f      	beq.n	8006592 <_vfiprintf_r+0x20a>
 8006512:	4b26      	ldr	r3, [pc, #152]	@ (80065ac <_vfiprintf_r+0x224>)
 8006514:	bb1b      	cbnz	r3, 800655e <_vfiprintf_r+0x1d6>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	3307      	adds	r3, #7
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	3308      	adds	r3, #8
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	443b      	add	r3, r7
 8006526:	9309      	str	r3, [sp, #36]	@ 0x24
 8006528:	e76a      	b.n	8006400 <_vfiprintf_r+0x78>
 800652a:	fb0c 3202 	mla	r2, ip, r2, r3
 800652e:	460c      	mov	r4, r1
 8006530:	2001      	movs	r0, #1
 8006532:	e7a8      	b.n	8006486 <_vfiprintf_r+0xfe>
 8006534:	2300      	movs	r3, #0
 8006536:	3401      	adds	r4, #1
 8006538:	9305      	str	r3, [sp, #20]
 800653a:	4619      	mov	r1, r3
 800653c:	f04f 0c0a 	mov.w	ip, #10
 8006540:	4620      	mov	r0, r4
 8006542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006546:	3a30      	subs	r2, #48	@ 0x30
 8006548:	2a09      	cmp	r2, #9
 800654a:	d903      	bls.n	8006554 <_vfiprintf_r+0x1cc>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0c6      	beq.n	80064de <_vfiprintf_r+0x156>
 8006550:	9105      	str	r1, [sp, #20]
 8006552:	e7c4      	b.n	80064de <_vfiprintf_r+0x156>
 8006554:	fb0c 2101 	mla	r1, ip, r1, r2
 8006558:	4604      	mov	r4, r0
 800655a:	2301      	movs	r3, #1
 800655c:	e7f0      	b.n	8006540 <_vfiprintf_r+0x1b8>
 800655e:	ab03      	add	r3, sp, #12
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	462a      	mov	r2, r5
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <_vfiprintf_r+0x228>)
 8006566:	a904      	add	r1, sp, #16
 8006568:	4630      	mov	r0, r6
 800656a:	f3af 8000 	nop.w
 800656e:	4607      	mov	r7, r0
 8006570:	1c78      	adds	r0, r7, #1
 8006572:	d1d6      	bne.n	8006522 <_vfiprintf_r+0x19a>
 8006574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006576:	07d9      	lsls	r1, r3, #31
 8006578:	d405      	bmi.n	8006586 <_vfiprintf_r+0x1fe>
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	059a      	lsls	r2, r3, #22
 800657e:	d402      	bmi.n	8006586 <_vfiprintf_r+0x1fe>
 8006580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006582:	f7ff fddd 	bl	8006140 <__retarget_lock_release_recursive>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	065b      	lsls	r3, r3, #25
 800658a:	f53f af1f 	bmi.w	80063cc <_vfiprintf_r+0x44>
 800658e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006590:	e71e      	b.n	80063d0 <_vfiprintf_r+0x48>
 8006592:	ab03      	add	r3, sp, #12
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	462a      	mov	r2, r5
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <_vfiprintf_r+0x228>)
 800659a:	a904      	add	r1, sp, #16
 800659c:	4630      	mov	r0, r6
 800659e:	f000 f879 	bl	8006694 <_printf_i>
 80065a2:	e7e4      	b.n	800656e <_vfiprintf_r+0x1e6>
 80065a4:	08006d10 	.word	0x08006d10
 80065a8:	08006d1a 	.word	0x08006d1a
 80065ac:	00000000 	.word	0x00000000
 80065b0:	08006363 	.word	0x08006363
 80065b4:	08006d16 	.word	0x08006d16

080065b8 <_printf_common>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	4616      	mov	r6, r2
 80065be:	4698      	mov	r8, r3
 80065c0:	688a      	ldr	r2, [r1, #8]
 80065c2:	690b      	ldr	r3, [r1, #16]
 80065c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bfb8      	it	lt
 80065cc:	4613      	movlt	r3, r2
 80065ce:	6033      	str	r3, [r6, #0]
 80065d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065d4:	4607      	mov	r7, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	b10a      	cbz	r2, 80065de <_printf_common+0x26>
 80065da:	3301      	adds	r3, #1
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	0699      	lsls	r1, r3, #26
 80065e2:	bf42      	ittt	mi
 80065e4:	6833      	ldrmi	r3, [r6, #0]
 80065e6:	3302      	addmi	r3, #2
 80065e8:	6033      	strmi	r3, [r6, #0]
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	f015 0506 	ands.w	r5, r5, #6
 80065f0:	d106      	bne.n	8006600 <_printf_common+0x48>
 80065f2:	f104 0a19 	add.w	sl, r4, #25
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	6832      	ldr	r2, [r6, #0]
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dc26      	bgt.n	800664e <_printf_common+0x96>
 8006600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	3b00      	subs	r3, #0
 8006608:	bf18      	it	ne
 800660a:	2301      	movne	r3, #1
 800660c:	0692      	lsls	r2, r2, #26
 800660e:	d42b      	bmi.n	8006668 <_printf_common+0xb0>
 8006610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006614:	4641      	mov	r1, r8
 8006616:	4638      	mov	r0, r7
 8006618:	47c8      	blx	r9
 800661a:	3001      	adds	r0, #1
 800661c:	d01e      	beq.n	800665c <_printf_common+0xa4>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	2b04      	cmp	r3, #4
 8006628:	bf02      	ittt	eq
 800662a:	68e5      	ldreq	r5, [r4, #12]
 800662c:	6833      	ldreq	r3, [r6, #0]
 800662e:	1aed      	subeq	r5, r5, r3
 8006630:	68a3      	ldr	r3, [r4, #8]
 8006632:	bf0c      	ite	eq
 8006634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006638:	2500      	movne	r5, #0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfc4      	itt	gt
 800663e:	1a9b      	subgt	r3, r3, r2
 8006640:	18ed      	addgt	r5, r5, r3
 8006642:	2600      	movs	r6, #0
 8006644:	341a      	adds	r4, #26
 8006646:	42b5      	cmp	r5, r6
 8006648:	d11a      	bne.n	8006680 <_printf_common+0xc8>
 800664a:	2000      	movs	r0, #0
 800664c:	e008      	b.n	8006660 <_printf_common+0xa8>
 800664e:	2301      	movs	r3, #1
 8006650:	4652      	mov	r2, sl
 8006652:	4641      	mov	r1, r8
 8006654:	4638      	mov	r0, r7
 8006656:	47c8      	blx	r9
 8006658:	3001      	adds	r0, #1
 800665a:	d103      	bne.n	8006664 <_printf_common+0xac>
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006664:	3501      	adds	r5, #1
 8006666:	e7c6      	b.n	80065f6 <_printf_common+0x3e>
 8006668:	18e1      	adds	r1, r4, r3
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	2030      	movs	r0, #48	@ 0x30
 800666e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006672:	4422      	add	r2, r4
 8006674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800667c:	3302      	adds	r3, #2
 800667e:	e7c7      	b.n	8006610 <_printf_common+0x58>
 8006680:	2301      	movs	r3, #1
 8006682:	4622      	mov	r2, r4
 8006684:	4641      	mov	r1, r8
 8006686:	4638      	mov	r0, r7
 8006688:	47c8      	blx	r9
 800668a:	3001      	adds	r0, #1
 800668c:	d0e6      	beq.n	800665c <_printf_common+0xa4>
 800668e:	3601      	adds	r6, #1
 8006690:	e7d9      	b.n	8006646 <_printf_common+0x8e>
	...

08006694 <_printf_i>:
 8006694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006698:	7e0f      	ldrb	r7, [r1, #24]
 800669a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800669c:	2f78      	cmp	r7, #120	@ 0x78
 800669e:	4691      	mov	r9, r2
 80066a0:	4680      	mov	r8, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	469a      	mov	sl, r3
 80066a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066aa:	d807      	bhi.n	80066bc <_printf_i+0x28>
 80066ac:	2f62      	cmp	r7, #98	@ 0x62
 80066ae:	d80a      	bhi.n	80066c6 <_printf_i+0x32>
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	f000 80d1 	beq.w	8006858 <_printf_i+0x1c4>
 80066b6:	2f58      	cmp	r7, #88	@ 0x58
 80066b8:	f000 80b8 	beq.w	800682c <_printf_i+0x198>
 80066bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066c4:	e03a      	b.n	800673c <_printf_i+0xa8>
 80066c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ca:	2b15      	cmp	r3, #21
 80066cc:	d8f6      	bhi.n	80066bc <_printf_i+0x28>
 80066ce:	a101      	add	r1, pc, #4	@ (adr r1, 80066d4 <_printf_i+0x40>)
 80066d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d4:	0800672d 	.word	0x0800672d
 80066d8:	08006741 	.word	0x08006741
 80066dc:	080066bd 	.word	0x080066bd
 80066e0:	080066bd 	.word	0x080066bd
 80066e4:	080066bd 	.word	0x080066bd
 80066e8:	080066bd 	.word	0x080066bd
 80066ec:	08006741 	.word	0x08006741
 80066f0:	080066bd 	.word	0x080066bd
 80066f4:	080066bd 	.word	0x080066bd
 80066f8:	080066bd 	.word	0x080066bd
 80066fc:	080066bd 	.word	0x080066bd
 8006700:	0800683f 	.word	0x0800683f
 8006704:	0800676b 	.word	0x0800676b
 8006708:	080067f9 	.word	0x080067f9
 800670c:	080066bd 	.word	0x080066bd
 8006710:	080066bd 	.word	0x080066bd
 8006714:	08006861 	.word	0x08006861
 8006718:	080066bd 	.word	0x080066bd
 800671c:	0800676b 	.word	0x0800676b
 8006720:	080066bd 	.word	0x080066bd
 8006724:	080066bd 	.word	0x080066bd
 8006728:	08006801 	.word	0x08006801
 800672c:	6833      	ldr	r3, [r6, #0]
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6032      	str	r2, [r6, #0]
 8006734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800673c:	2301      	movs	r3, #1
 800673e:	e09c      	b.n	800687a <_printf_i+0x1e6>
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1d19      	adds	r1, r3, #4
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	0606      	lsls	r6, r0, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xbc>
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	e003      	b.n	8006758 <_printf_i+0xc4>
 8006750:	0645      	lsls	r5, r0, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xb8>
 8006754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006758:	2d00      	cmp	r5, #0
 800675a:	da03      	bge.n	8006764 <_printf_i+0xd0>
 800675c:	232d      	movs	r3, #45	@ 0x2d
 800675e:	426d      	negs	r5, r5
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006764:	4858      	ldr	r0, [pc, #352]	@ (80068c8 <_printf_i+0x234>)
 8006766:	230a      	movs	r3, #10
 8006768:	e011      	b.n	800678e <_printf_i+0xfa>
 800676a:	6821      	ldr	r1, [r4, #0]
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	0608      	lsls	r0, r1, #24
 8006770:	f853 5b04 	ldr.w	r5, [r3], #4
 8006774:	d402      	bmi.n	800677c <_printf_i+0xe8>
 8006776:	0649      	lsls	r1, r1, #25
 8006778:	bf48      	it	mi
 800677a:	b2ad      	uxthmi	r5, r5
 800677c:	2f6f      	cmp	r7, #111	@ 0x6f
 800677e:	4852      	ldr	r0, [pc, #328]	@ (80068c8 <_printf_i+0x234>)
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	bf14      	ite	ne
 8006784:	230a      	movne	r3, #10
 8006786:	2308      	moveq	r3, #8
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800678e:	6866      	ldr	r6, [r4, #4]
 8006790:	60a6      	str	r6, [r4, #8]
 8006792:	2e00      	cmp	r6, #0
 8006794:	db05      	blt.n	80067a2 <_printf_i+0x10e>
 8006796:	6821      	ldr	r1, [r4, #0]
 8006798:	432e      	orrs	r6, r5
 800679a:	f021 0104 	bic.w	r1, r1, #4
 800679e:	6021      	str	r1, [r4, #0]
 80067a0:	d04b      	beq.n	800683a <_printf_i+0x1a6>
 80067a2:	4616      	mov	r6, r2
 80067a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80067a8:	fb03 5711 	mls	r7, r3, r1, r5
 80067ac:	5dc7      	ldrb	r7, [r0, r7]
 80067ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b2:	462f      	mov	r7, r5
 80067b4:	42bb      	cmp	r3, r7
 80067b6:	460d      	mov	r5, r1
 80067b8:	d9f4      	bls.n	80067a4 <_printf_i+0x110>
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d10b      	bne.n	80067d6 <_printf_i+0x142>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07df      	lsls	r7, r3, #31
 80067c2:	d508      	bpl.n	80067d6 <_printf_i+0x142>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6861      	ldr	r1, [r4, #4]
 80067c8:	4299      	cmp	r1, r3
 80067ca:	bfde      	ittt	le
 80067cc:	2330      	movle	r3, #48	@ 0x30
 80067ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067d6:	1b92      	subs	r2, r2, r6
 80067d8:	6122      	str	r2, [r4, #16]
 80067da:	f8cd a000 	str.w	sl, [sp]
 80067de:	464b      	mov	r3, r9
 80067e0:	aa03      	add	r2, sp, #12
 80067e2:	4621      	mov	r1, r4
 80067e4:	4640      	mov	r0, r8
 80067e6:	f7ff fee7 	bl	80065b8 <_printf_common>
 80067ea:	3001      	adds	r0, #1
 80067ec:	d14a      	bne.n	8006884 <_printf_i+0x1f0>
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	b004      	add	sp, #16
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	f043 0320 	orr.w	r3, r3, #32
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	4832      	ldr	r0, [pc, #200]	@ (80068cc <_printf_i+0x238>)
 8006802:	2778      	movs	r7, #120	@ 0x78
 8006804:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	6831      	ldr	r1, [r6, #0]
 800680c:	061f      	lsls	r7, r3, #24
 800680e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006812:	d402      	bmi.n	800681a <_printf_i+0x186>
 8006814:	065f      	lsls	r7, r3, #25
 8006816:	bf48      	it	mi
 8006818:	b2ad      	uxthmi	r5, r5
 800681a:	6031      	str	r1, [r6, #0]
 800681c:	07d9      	lsls	r1, r3, #31
 800681e:	bf44      	itt	mi
 8006820:	f043 0320 	orrmi.w	r3, r3, #32
 8006824:	6023      	strmi	r3, [r4, #0]
 8006826:	b11d      	cbz	r5, 8006830 <_printf_i+0x19c>
 8006828:	2310      	movs	r3, #16
 800682a:	e7ad      	b.n	8006788 <_printf_i+0xf4>
 800682c:	4826      	ldr	r0, [pc, #152]	@ (80068c8 <_printf_i+0x234>)
 800682e:	e7e9      	b.n	8006804 <_printf_i+0x170>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	f023 0320 	bic.w	r3, r3, #32
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	e7f6      	b.n	8006828 <_printf_i+0x194>
 800683a:	4616      	mov	r6, r2
 800683c:	e7bd      	b.n	80067ba <_printf_i+0x126>
 800683e:	6833      	ldr	r3, [r6, #0]
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	6961      	ldr	r1, [r4, #20]
 8006844:	1d18      	adds	r0, r3, #4
 8006846:	6030      	str	r0, [r6, #0]
 8006848:	062e      	lsls	r6, r5, #24
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	d501      	bpl.n	8006852 <_printf_i+0x1be>
 800684e:	6019      	str	r1, [r3, #0]
 8006850:	e002      	b.n	8006858 <_printf_i+0x1c4>
 8006852:	0668      	lsls	r0, r5, #25
 8006854:	d5fb      	bpl.n	800684e <_printf_i+0x1ba>
 8006856:	8019      	strh	r1, [r3, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	4616      	mov	r6, r2
 800685e:	e7bc      	b.n	80067da <_printf_i+0x146>
 8006860:	6833      	ldr	r3, [r6, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	6032      	str	r2, [r6, #0]
 8006866:	681e      	ldr	r6, [r3, #0]
 8006868:	6862      	ldr	r2, [r4, #4]
 800686a:	2100      	movs	r1, #0
 800686c:	4630      	mov	r0, r6
 800686e:	f7f9 fd37 	bl	80002e0 <memchr>
 8006872:	b108      	cbz	r0, 8006878 <_printf_i+0x1e4>
 8006874:	1b80      	subs	r0, r0, r6
 8006876:	6060      	str	r0, [r4, #4]
 8006878:	6863      	ldr	r3, [r4, #4]
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	2300      	movs	r3, #0
 800687e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006882:	e7aa      	b.n	80067da <_printf_i+0x146>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	4632      	mov	r2, r6
 8006888:	4649      	mov	r1, r9
 800688a:	4640      	mov	r0, r8
 800688c:	47d0      	blx	sl
 800688e:	3001      	adds	r0, #1
 8006890:	d0ad      	beq.n	80067ee <_printf_i+0x15a>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	079b      	lsls	r3, r3, #30
 8006896:	d413      	bmi.n	80068c0 <_printf_i+0x22c>
 8006898:	68e0      	ldr	r0, [r4, #12]
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	4298      	cmp	r0, r3
 800689e:	bfb8      	it	lt
 80068a0:	4618      	movlt	r0, r3
 80068a2:	e7a6      	b.n	80067f2 <_printf_i+0x15e>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4632      	mov	r2, r6
 80068a8:	4649      	mov	r1, r9
 80068aa:	4640      	mov	r0, r8
 80068ac:	47d0      	blx	sl
 80068ae:	3001      	adds	r0, #1
 80068b0:	d09d      	beq.n	80067ee <_printf_i+0x15a>
 80068b2:	3501      	adds	r5, #1
 80068b4:	68e3      	ldr	r3, [r4, #12]
 80068b6:	9903      	ldr	r1, [sp, #12]
 80068b8:	1a5b      	subs	r3, r3, r1
 80068ba:	42ab      	cmp	r3, r5
 80068bc:	dcf2      	bgt.n	80068a4 <_printf_i+0x210>
 80068be:	e7eb      	b.n	8006898 <_printf_i+0x204>
 80068c0:	2500      	movs	r5, #0
 80068c2:	f104 0619 	add.w	r6, r4, #25
 80068c6:	e7f5      	b.n	80068b4 <_printf_i+0x220>
 80068c8:	08006d21 	.word	0x08006d21
 80068cc:	08006d32 	.word	0x08006d32

080068d0 <__sflush_r>:
 80068d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	0716      	lsls	r6, r2, #28
 80068da:	4605      	mov	r5, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	d454      	bmi.n	800698a <__sflush_r+0xba>
 80068e0:	684b      	ldr	r3, [r1, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dc02      	bgt.n	80068ec <__sflush_r+0x1c>
 80068e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dd48      	ble.n	800697e <__sflush_r+0xae>
 80068ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	d045      	beq.n	800697e <__sflush_r+0xae>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068f8:	682f      	ldr	r7, [r5, #0]
 80068fa:	6a21      	ldr	r1, [r4, #32]
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	d030      	beq.n	8006962 <__sflush_r+0x92>
 8006900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	0759      	lsls	r1, r3, #29
 8006906:	d505      	bpl.n	8006914 <__sflush_r+0x44>
 8006908:	6863      	ldr	r3, [r4, #4]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800690e:	b10b      	cbz	r3, 8006914 <__sflush_r+0x44>
 8006910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	2300      	movs	r3, #0
 8006916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	4628      	mov	r0, r5
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	d106      	bne.n	8006932 <__sflush_r+0x62>
 8006924:	6829      	ldr	r1, [r5, #0]
 8006926:	291d      	cmp	r1, #29
 8006928:	d82b      	bhi.n	8006982 <__sflush_r+0xb2>
 800692a:	4a2a      	ldr	r2, [pc, #168]	@ (80069d4 <__sflush_r+0x104>)
 800692c:	40ca      	lsrs	r2, r1
 800692e:	07d6      	lsls	r6, r2, #31
 8006930:	d527      	bpl.n	8006982 <__sflush_r+0xb2>
 8006932:	2200      	movs	r2, #0
 8006934:	6062      	str	r2, [r4, #4]
 8006936:	04d9      	lsls	r1, r3, #19
 8006938:	6922      	ldr	r2, [r4, #16]
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	d504      	bpl.n	8006948 <__sflush_r+0x78>
 800693e:	1c42      	adds	r2, r0, #1
 8006940:	d101      	bne.n	8006946 <__sflush_r+0x76>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b903      	cbnz	r3, 8006948 <__sflush_r+0x78>
 8006946:	6560      	str	r0, [r4, #84]	@ 0x54
 8006948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800694a:	602f      	str	r7, [r5, #0]
 800694c:	b1b9      	cbz	r1, 800697e <__sflush_r+0xae>
 800694e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006952:	4299      	cmp	r1, r3
 8006954:	d002      	beq.n	800695c <__sflush_r+0x8c>
 8006956:	4628      	mov	r0, r5
 8006958:	f7ff fbf4 	bl	8006144 <_free_r>
 800695c:	2300      	movs	r3, #0
 800695e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006960:	e00d      	b.n	800697e <__sflush_r+0xae>
 8006962:	2301      	movs	r3, #1
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	4602      	mov	r2, r0
 800696a:	1c50      	adds	r0, r2, #1
 800696c:	d1c9      	bne.n	8006902 <__sflush_r+0x32>
 800696e:	682b      	ldr	r3, [r5, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0c6      	beq.n	8006902 <__sflush_r+0x32>
 8006974:	2b1d      	cmp	r3, #29
 8006976:	d001      	beq.n	800697c <__sflush_r+0xac>
 8006978:	2b16      	cmp	r3, #22
 800697a:	d11e      	bne.n	80069ba <__sflush_r+0xea>
 800697c:	602f      	str	r7, [r5, #0]
 800697e:	2000      	movs	r0, #0
 8006980:	e022      	b.n	80069c8 <__sflush_r+0xf8>
 8006982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006986:	b21b      	sxth	r3, r3
 8006988:	e01b      	b.n	80069c2 <__sflush_r+0xf2>
 800698a:	690f      	ldr	r7, [r1, #16]
 800698c:	2f00      	cmp	r7, #0
 800698e:	d0f6      	beq.n	800697e <__sflush_r+0xae>
 8006990:	0793      	lsls	r3, r2, #30
 8006992:	680e      	ldr	r6, [r1, #0]
 8006994:	bf08      	it	eq
 8006996:	694b      	ldreq	r3, [r1, #20]
 8006998:	600f      	str	r7, [r1, #0]
 800699a:	bf18      	it	ne
 800699c:	2300      	movne	r3, #0
 800699e:	eba6 0807 	sub.w	r8, r6, r7
 80069a2:	608b      	str	r3, [r1, #8]
 80069a4:	f1b8 0f00 	cmp.w	r8, #0
 80069a8:	dde9      	ble.n	800697e <__sflush_r+0xae>
 80069aa:	6a21      	ldr	r1, [r4, #32]
 80069ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069ae:	4643      	mov	r3, r8
 80069b0:	463a      	mov	r2, r7
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b0      	blx	r6
 80069b6:	2800      	cmp	r0, #0
 80069b8:	dc08      	bgt.n	80069cc <__sflush_r+0xfc>
 80069ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	4407      	add	r7, r0
 80069ce:	eba8 0800 	sub.w	r8, r8, r0
 80069d2:	e7e7      	b.n	80069a4 <__sflush_r+0xd4>
 80069d4:	20400001 	.word	0x20400001

080069d8 <_fflush_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	4605      	mov	r5, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b913      	cbnz	r3, 80069e8 <_fflush_r+0x10>
 80069e2:	2500      	movs	r5, #0
 80069e4:	4628      	mov	r0, r5
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	b118      	cbz	r0, 80069f2 <_fflush_r+0x1a>
 80069ea:	6a03      	ldr	r3, [r0, #32]
 80069ec:	b90b      	cbnz	r3, 80069f2 <_fflush_r+0x1a>
 80069ee:	f7ff fa43 	bl	8005e78 <__sinit>
 80069f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f3      	beq.n	80069e2 <_fflush_r+0xa>
 80069fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069fc:	07d0      	lsls	r0, r2, #31
 80069fe:	d404      	bmi.n	8006a0a <_fflush_r+0x32>
 8006a00:	0599      	lsls	r1, r3, #22
 8006a02:	d402      	bmi.n	8006a0a <_fflush_r+0x32>
 8006a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a06:	f7ff fb9a 	bl	800613e <__retarget_lock_acquire_recursive>
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f7ff ff5f 	bl	80068d0 <__sflush_r>
 8006a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a14:	07da      	lsls	r2, r3, #31
 8006a16:	4605      	mov	r5, r0
 8006a18:	d4e4      	bmi.n	80069e4 <_fflush_r+0xc>
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	059b      	lsls	r3, r3, #22
 8006a1e:	d4e1      	bmi.n	80069e4 <_fflush_r+0xc>
 8006a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a22:	f7ff fb8d 	bl	8006140 <__retarget_lock_release_recursive>
 8006a26:	e7dd      	b.n	80069e4 <_fflush_r+0xc>

08006a28 <__swbuf_r>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	460e      	mov	r6, r1
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b118      	cbz	r0, 8006a3a <__swbuf_r+0x12>
 8006a32:	6a03      	ldr	r3, [r0, #32]
 8006a34:	b90b      	cbnz	r3, 8006a3a <__swbuf_r+0x12>
 8006a36:	f7ff fa1f 	bl	8005e78 <__sinit>
 8006a3a:	69a3      	ldr	r3, [r4, #24]
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	071a      	lsls	r2, r3, #28
 8006a42:	d501      	bpl.n	8006a48 <__swbuf_r+0x20>
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	b943      	cbnz	r3, 8006a5a <__swbuf_r+0x32>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 f82a 	bl	8006aa4 <__swsetup_r>
 8006a50:	b118      	cbz	r0, 8006a5a <__swbuf_r+0x32>
 8006a52:	f04f 37ff 	mov.w	r7, #4294967295
 8006a56:	4638      	mov	r0, r7
 8006a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	1a98      	subs	r0, r3, r2
 8006a60:	6963      	ldr	r3, [r4, #20]
 8006a62:	b2f6      	uxtb	r6, r6
 8006a64:	4283      	cmp	r3, r0
 8006a66:	4637      	mov	r7, r6
 8006a68:	dc05      	bgt.n	8006a76 <__swbuf_r+0x4e>
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f7ff ffb3 	bl	80069d8 <_fflush_r>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d1ed      	bne.n	8006a52 <__swbuf_r+0x2a>
 8006a76:	68a3      	ldr	r3, [r4, #8]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	701e      	strb	r6, [r3, #0]
 8006a84:	6962      	ldr	r2, [r4, #20]
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d004      	beq.n	8006a96 <__swbuf_r+0x6e>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	07db      	lsls	r3, r3, #31
 8006a90:	d5e1      	bpl.n	8006a56 <__swbuf_r+0x2e>
 8006a92:	2e0a      	cmp	r6, #10
 8006a94:	d1df      	bne.n	8006a56 <__swbuf_r+0x2e>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f7ff ff9d 	bl	80069d8 <_fflush_r>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0d9      	beq.n	8006a56 <__swbuf_r+0x2e>
 8006aa2:	e7d6      	b.n	8006a52 <__swbuf_r+0x2a>

08006aa4 <__swsetup_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4b29      	ldr	r3, [pc, #164]	@ (8006b4c <__swsetup_r+0xa8>)
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	460c      	mov	r4, r1
 8006aae:	b118      	cbz	r0, 8006ab8 <__swsetup_r+0x14>
 8006ab0:	6a03      	ldr	r3, [r0, #32]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <__swsetup_r+0x14>
 8006ab4:	f7ff f9e0 	bl	8005e78 <__sinit>
 8006ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abc:	0719      	lsls	r1, r3, #28
 8006abe:	d422      	bmi.n	8006b06 <__swsetup_r+0x62>
 8006ac0:	06da      	lsls	r2, r3, #27
 8006ac2:	d407      	bmi.n	8006ad4 <__swsetup_r+0x30>
 8006ac4:	2209      	movs	r2, #9
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad2:	e033      	b.n	8006b3c <__swsetup_r+0x98>
 8006ad4:	0758      	lsls	r0, r3, #29
 8006ad6:	d512      	bpl.n	8006afe <__swsetup_r+0x5a>
 8006ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ada:	b141      	cbz	r1, 8006aee <__swsetup_r+0x4a>
 8006adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ae0:	4299      	cmp	r1, r3
 8006ae2:	d002      	beq.n	8006aea <__swsetup_r+0x46>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f7ff fb2d 	bl	8006144 <_free_r>
 8006aea:	2300      	movs	r3, #0
 8006aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	2300      	movs	r3, #0
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f043 0308 	orr.w	r3, r3, #8
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	b94b      	cbnz	r3, 8006b1e <__swsetup_r+0x7a>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b14:	d003      	beq.n	8006b1e <__swsetup_r+0x7a>
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f84f 	bl	8006bbc <__smakebuf_r>
 8006b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b22:	f013 0201 	ands.w	r2, r3, #1
 8006b26:	d00a      	beq.n	8006b3e <__swsetup_r+0x9a>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	60a2      	str	r2, [r4, #8]
 8006b2c:	6962      	ldr	r2, [r4, #20]
 8006b2e:	4252      	negs	r2, r2
 8006b30:	61a2      	str	r2, [r4, #24]
 8006b32:	6922      	ldr	r2, [r4, #16]
 8006b34:	b942      	cbnz	r2, 8006b48 <__swsetup_r+0xa4>
 8006b36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b3a:	d1c5      	bne.n	8006ac8 <__swsetup_r+0x24>
 8006b3c:	bd38      	pop	{r3, r4, r5, pc}
 8006b3e:	0799      	lsls	r1, r3, #30
 8006b40:	bf58      	it	pl
 8006b42:	6962      	ldrpl	r2, [r4, #20]
 8006b44:	60a2      	str	r2, [r4, #8]
 8006b46:	e7f4      	b.n	8006b32 <__swsetup_r+0x8e>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e7f7      	b.n	8006b3c <__swsetup_r+0x98>
 8006b4c:	2400003c 	.word	0x2400003c

08006b50 <_sbrk_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d06      	ldr	r5, [pc, #24]	@ (8006b6c <_sbrk_r+0x1c>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fa f990 	bl	8000e80 <_sbrk>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_sbrk_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_sbrk_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	240042e4 	.word	0x240042e4

08006b70 <__swhatbuf_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460c      	mov	r4, r1
 8006b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	b096      	sub	sp, #88	@ 0x58
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	461e      	mov	r6, r3
 8006b80:	da0d      	bge.n	8006b9e <__swhatbuf_r+0x2e>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b88:	f04f 0100 	mov.w	r1, #0
 8006b8c:	bf14      	ite	ne
 8006b8e:	2340      	movne	r3, #64	@ 0x40
 8006b90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b94:	2000      	movs	r0, #0
 8006b96:	6031      	str	r1, [r6, #0]
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	b016      	add	sp, #88	@ 0x58
 8006b9c:	bd70      	pop	{r4, r5, r6, pc}
 8006b9e:	466a      	mov	r2, sp
 8006ba0:	f000 f848 	bl	8006c34 <_fstat_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dbec      	blt.n	8006b82 <__swhatbuf_r+0x12>
 8006ba8:	9901      	ldr	r1, [sp, #4]
 8006baa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bb2:	4259      	negs	r1, r3
 8006bb4:	4159      	adcs	r1, r3
 8006bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bba:	e7eb      	b.n	8006b94 <__swhatbuf_r+0x24>

08006bbc <__smakebuf_r>:
 8006bbc:	898b      	ldrh	r3, [r1, #12]
 8006bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc0:	079d      	lsls	r5, r3, #30
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	d507      	bpl.n	8006bd8 <__smakebuf_r+0x1c>
 8006bc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	6123      	str	r3, [r4, #16]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6163      	str	r3, [r4, #20]
 8006bd4:	b003      	add	sp, #12
 8006bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd8:	ab01      	add	r3, sp, #4
 8006bda:	466a      	mov	r2, sp
 8006bdc:	f7ff ffc8 	bl	8006b70 <__swhatbuf_r>
 8006be0:	9f00      	ldr	r7, [sp, #0]
 8006be2:	4605      	mov	r5, r0
 8006be4:	4639      	mov	r1, r7
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff fb18 	bl	800621c <_malloc_r>
 8006bec:	b948      	cbnz	r0, 8006c02 <__smakebuf_r+0x46>
 8006bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf2:	059a      	lsls	r2, r3, #22
 8006bf4:	d4ee      	bmi.n	8006bd4 <__smakebuf_r+0x18>
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	f043 0302 	orr.w	r3, r3, #2
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	e7e2      	b.n	8006bc8 <__smakebuf_r+0xc>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	6020      	str	r0, [r4, #0]
 8006c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	9b01      	ldr	r3, [sp, #4]
 8006c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c12:	b15b      	cbz	r3, 8006c2c <__smakebuf_r+0x70>
 8006c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f81d 	bl	8006c58 <_isatty_r>
 8006c1e:	b128      	cbz	r0, 8006c2c <__smakebuf_r+0x70>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	f023 0303 	bic.w	r3, r3, #3
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	431d      	orrs	r5, r3
 8006c30:	81a5      	strh	r5, [r4, #12]
 8006c32:	e7cf      	b.n	8006bd4 <__smakebuf_r+0x18>

08006c34 <_fstat_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d07      	ldr	r5, [pc, #28]	@ (8006c54 <_fstat_r+0x20>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	f7fa f8f5 	bl	8000e30 <_fstat>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	d102      	bne.n	8006c50 <_fstat_r+0x1c>
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	b103      	cbz	r3, 8006c50 <_fstat_r+0x1c>
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	bf00      	nop
 8006c54:	240042e4 	.word	0x240042e4

08006c58 <_isatty_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d06      	ldr	r5, [pc, #24]	@ (8006c74 <_isatty_r+0x1c>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	f7fa f8f4 	bl	8000e50 <_isatty>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_isatty_r+0x1a>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_isatty_r+0x1a>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	240042e4 	.word	0x240042e4

08006c78 <_init>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr

08006c84 <_fini>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr
