
Custom_VCU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ec  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08102a8c  08102a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102acc  08102acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08102ad0  08102ad0  00003ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  10000000  08102ad4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000041a4  10000064  08102b38  00004064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10004208  08102b38  00004208  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012a0d  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a16  00000000  00000000  00016aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010f8  00000000  00000000  000194b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d05  00000000  00000000  0001a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003bb20  00000000  00000000  0001b2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013511  00000000  00000000  00056dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018ddbb  00000000  00000000  0006a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f80a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000048f4  00000000  00000000  001f80e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001fc9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08102a74 	.word	0x08102a74

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	08102a74 	.word	0x08102a74

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100310:	b480      	push	{r7}
 8100312:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100314:	4b09      	ldr	r3, [pc, #36]	@ (810033c <ExitRun0Mode+0x2c>)
 8100316:	68db      	ldr	r3, [r3, #12]
 8100318:	4a08      	ldr	r2, [pc, #32]	@ (810033c <ExitRun0Mode+0x2c>)
 810031a:	f023 0302 	bic.w	r3, r3, #2
 810031e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100320:	bf00      	nop
 8100322:	4b06      	ldr	r3, [pc, #24]	@ (810033c <ExitRun0Mode+0x2c>)
 8100324:	685b      	ldr	r3, [r3, #4]
 8100326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810032a:	2b00      	cmp	r3, #0
 810032c:	d0f9      	beq.n	8100322 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810032e:	bf00      	nop
 8100330:	bf00      	nop
 8100332:	46bd      	mov	sp, r7
 8100334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100338:	4770      	bx	lr
 810033a:	bf00      	nop
 810033c:	58024800 	.word	0x58024800

08100340 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8100340:	b480      	push	{r7}
 8100342:	b085      	sub	sp, #20
 8100344:	af00      	add	r7, sp, #0
 8100346:	60f8      	str	r0, [r7, #12]
 8100348:	60b9      	str	r1, [r7, #8]
 810034a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 810034c:	68fb      	ldr	r3, [r7, #12]
 810034e:	4a07      	ldr	r2, [pc, #28]	@ (810036c <vApplicationGetIdleTaskMemory+0x2c>)
 8100350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8100352:	68bb      	ldr	r3, [r7, #8]
 8100354:	4a06      	ldr	r2, [pc, #24]	@ (8100370 <vApplicationGetIdleTaskMemory+0x30>)
 8100356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8100358:	687b      	ldr	r3, [r7, #4]
 810035a:	2280      	movs	r2, #128	@ 0x80
 810035c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 810035e:	bf00      	nop
 8100360:	3714      	adds	r7, #20
 8100362:	46bd      	mov	sp, r7
 8100364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100368:	4770      	bx	lr
 810036a:	bf00      	nop
 810036c:	10000080 	.word	0x10000080
 8100370:	10000120 	.word	0x10000120

08100374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100374:	b5b0      	push	{r4, r5, r7, lr}
 8100376:	b088      	sub	sp, #32
 8100378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810037a:	4b23      	ldr	r3, [pc, #140]	@ (8100408 <main+0x94>)
 810037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100380:	4a21      	ldr	r2, [pc, #132]	@ (8100408 <main+0x94>)
 8100382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810038a:	4b1f      	ldr	r3, [pc, #124]	@ (8100408 <main+0x94>)
 810038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100394:	603b      	str	r3, [r7, #0]
 8100396:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100398:	2001      	movs	r0, #1
 810039a:	f000 fa95 	bl	81008c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810039e:	f000 fb1f 	bl	81009e0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003a2:	2201      	movs	r2, #1
 81003a4:	2102      	movs	r1, #2
 81003a6:	2000      	movs	r0, #0
 81003a8:	f000 faa0 	bl	81008ec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003ac:	4b17      	ldr	r3, [pc, #92]	@ (810040c <main+0x98>)
 81003ae:	681b      	ldr	r3, [r3, #0]
 81003b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81003b4:	2b70      	cmp	r3, #112	@ 0x70
 81003b6:	d108      	bne.n	81003ca <main+0x56>
 81003b8:	4b15      	ldr	r3, [pc, #84]	@ (8100410 <main+0x9c>)
 81003ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81003be:	4a14      	ldr	r2, [pc, #80]	@ (8100410 <main+0x9c>)
 81003c0:	f043 0301 	orr.w	r3, r3, #1
 81003c4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81003c8:	e007      	b.n	81003da <main+0x66>
 81003ca:	4b11      	ldr	r3, [pc, #68]	@ (8100410 <main+0x9c>)
 81003cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81003d0:	4a0f      	ldr	r2, [pc, #60]	@ (8100410 <main+0x9c>)
 81003d2:	f043 0301 	orr.w	r3, r3, #1
 81003d6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003da:	f000 f911 	bl	8100600 <HAL_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 81003de:	4b0d      	ldr	r3, [pc, #52]	@ (8100414 <main+0xa0>)
 81003e0:	1d3c      	adds	r4, r7, #4
 81003e2:	461d      	mov	r5, r3
 81003e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81003e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81003e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81003ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 81003f0:	1d3b      	adds	r3, r7, #4
 81003f2:	2100      	movs	r1, #0
 81003f4:	4618      	mov	r0, r3
 81003f6:	f000 ffec 	bl	81013d2 <osThreadCreate>
 81003fa:	4603      	mov	r3, r0
 81003fc:	4a06      	ldr	r2, [pc, #24]	@ (8100418 <main+0xa4>)
 81003fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8100400:	f000 ffe0 	bl	81013c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100404:	bf00      	nop
 8100406:	e7fd      	b.n	8100404 <main+0x90>
 8100408:	58024400 	.word	0x58024400
 810040c:	e000ed00 	.word	0xe000ed00
 8100410:	58026400 	.word	0x58026400
 8100414:	08102a98 	.word	0x08102a98
 8100418:	10000320 	.word	0x10000320

0810041c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b082      	sub	sp, #8
 8100420:	af00      	add	r7, sp, #0
 8100422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100424:	2001      	movs	r0, #1
 8100426:	f001 f820 	bl	810146a <osDelay>
 810042a:	e7fb      	b.n	8100424 <StartDefaultTask+0x8>

0810042c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810042c:	b580      	push	{r7, lr}
 810042e:	b082      	sub	sp, #8
 8100430:	af00      	add	r7, sp, #0
 8100432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8100434:	687b      	ldr	r3, [r7, #4]
 8100436:	681b      	ldr	r3, [r3, #0]
 8100438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810043c:	d101      	bne.n	8100442 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 810043e:	f000 f93d 	bl	81006bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100442:	bf00      	nop
 8100444:	3708      	adds	r7, #8
 8100446:	46bd      	mov	sp, r7
 8100448:	bd80      	pop	{r7, pc}
	...

0810044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810044c:	b580      	push	{r7, lr}
 810044e:	b082      	sub	sp, #8
 8100450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100452:	4b0c      	ldr	r3, [pc, #48]	@ (8100484 <HAL_MspInit+0x38>)
 8100454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100458:	4a0a      	ldr	r2, [pc, #40]	@ (8100484 <HAL_MspInit+0x38>)
 810045a:	f043 0302 	orr.w	r3, r3, #2
 810045e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100462:	4b08      	ldr	r3, [pc, #32]	@ (8100484 <HAL_MspInit+0x38>)
 8100464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100468:	f003 0302 	and.w	r3, r3, #2
 810046c:	607b      	str	r3, [r7, #4]
 810046e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100470:	2200      	movs	r2, #0
 8100472:	210f      	movs	r1, #15
 8100474:	f06f 0001 	mvn.w	r0, #1
 8100478:	f000 f9ec 	bl	8100854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810047c:	bf00      	nop
 810047e:	3708      	adds	r7, #8
 8100480:	46bd      	mov	sp, r7
 8100482:	bd80      	pop	{r7, pc}
 8100484:	58024400 	.word	0x58024400

08100488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100488:	b580      	push	{r7, lr}
 810048a:	b090      	sub	sp, #64	@ 0x40
 810048c:	af00      	add	r7, sp, #0
 810048e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100490:	687b      	ldr	r3, [r7, #4]
 8100492:	2b0f      	cmp	r3, #15
 8100494:	d827      	bhi.n	81004e6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8100496:	2200      	movs	r2, #0
 8100498:	6879      	ldr	r1, [r7, #4]
 810049a:	201c      	movs	r0, #28
 810049c:	f000 f9da 	bl	8100854 <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81004a0:	201c      	movs	r0, #28
 81004a2:	f000 f9f1 	bl	8100888 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81004a6:	4a29      	ldr	r2, [pc, #164]	@ (810054c <HAL_InitTick+0xc4>)
 81004a8:	687b      	ldr	r3, [r7, #4]
 81004aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81004ac:	4b28      	ldr	r3, [pc, #160]	@ (8100550 <HAL_InitTick+0xc8>)
 81004ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81004b2:	4a27      	ldr	r2, [pc, #156]	@ (8100550 <HAL_InitTick+0xc8>)
 81004b4:	f043 0301 	orr.w	r3, r3, #1
 81004b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81004bc:	4b24      	ldr	r3, [pc, #144]	@ (8100550 <HAL_InitTick+0xc8>)
 81004be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81004c2:	f003 0301 	and.w	r3, r3, #1
 81004c6:	60fb      	str	r3, [r7, #12]
 81004c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81004ca:	f107 0210 	add.w	r2, r7, #16
 81004ce:	f107 0314 	add.w	r3, r7, #20
 81004d2:	4611      	mov	r1, r2
 81004d4:	4618      	mov	r0, r3
 81004d6:	f000 fc53 	bl	8100d80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81004da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81004dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81004de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81004e0:	2b00      	cmp	r3, #0
 81004e2:	d106      	bne.n	81004f2 <HAL_InitTick+0x6a>
 81004e4:	e001      	b.n	81004ea <HAL_InitTick+0x62>
    return HAL_ERROR;
 81004e6:	2301      	movs	r3, #1
 81004e8:	e02c      	b.n	8100544 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81004ea:	f000 fc33 	bl	8100d54 <HAL_RCC_GetPCLK1Freq>
 81004ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 81004f0:	e004      	b.n	81004fc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81004f2:	f000 fc2f 	bl	8100d54 <HAL_RCC_GetPCLK1Freq>
 81004f6:	4603      	mov	r3, r0
 81004f8:	005b      	lsls	r3, r3, #1
 81004fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81004fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81004fe:	4a15      	ldr	r2, [pc, #84]	@ (8100554 <HAL_InitTick+0xcc>)
 8100500:	fba2 2303 	umull	r2, r3, r2, r3
 8100504:	0c9b      	lsrs	r3, r3, #18
 8100506:	3b01      	subs	r3, #1
 8100508:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810050a:	4b13      	ldr	r3, [pc, #76]	@ (8100558 <HAL_InitTick+0xd0>)
 810050c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100510:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8100512:	4b11      	ldr	r3, [pc, #68]	@ (8100558 <HAL_InitTick+0xd0>)
 8100514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100518:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810051a:	4a0f      	ldr	r2, [pc, #60]	@ (8100558 <HAL_InitTick+0xd0>)
 810051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810051e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8100520:	4b0d      	ldr	r3, [pc, #52]	@ (8100558 <HAL_InitTick+0xd0>)
 8100522:	2200      	movs	r2, #0
 8100524:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100526:	4b0c      	ldr	r3, [pc, #48]	@ (8100558 <HAL_InitTick+0xd0>)
 8100528:	2200      	movs	r2, #0
 810052a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 810052c:	480a      	ldr	r0, [pc, #40]	@ (8100558 <HAL_InitTick+0xd0>)
 810052e:	f000 fc69 	bl	8100e04 <HAL_TIM_Base_Init>
 8100532:	4603      	mov	r3, r0
 8100534:	2b00      	cmp	r3, #0
 8100536:	d104      	bne.n	8100542 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8100538:	4807      	ldr	r0, [pc, #28]	@ (8100558 <HAL_InitTick+0xd0>)
 810053a:	f000 fcc5 	bl	8100ec8 <HAL_TIM_Base_Start_IT>
 810053e:	4603      	mov	r3, r0
 8100540:	e000      	b.n	8100544 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8100542:	2301      	movs	r3, #1
}
 8100544:	4618      	mov	r0, r3
 8100546:	3740      	adds	r7, #64	@ 0x40
 8100548:	46bd      	mov	sp, r7
 810054a:	bd80      	pop	{r7, pc}
 810054c:	10000008 	.word	0x10000008
 8100550:	58024400 	.word	0x58024400
 8100554:	431bde83 	.word	0x431bde83
 8100558:	10000324 	.word	0x10000324

0810055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810055c:	b480      	push	{r7}
 810055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100560:	bf00      	nop
 8100562:	e7fd      	b.n	8100560 <NMI_Handler+0x4>

08100564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100564:	b480      	push	{r7}
 8100566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100568:	bf00      	nop
 810056a:	e7fd      	b.n	8100568 <HardFault_Handler+0x4>

0810056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810056c:	b480      	push	{r7}
 810056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100570:	bf00      	nop
 8100572:	e7fd      	b.n	8100570 <MemManage_Handler+0x4>

08100574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100578:	bf00      	nop
 810057a:	e7fd      	b.n	8100578 <BusFault_Handler+0x4>

0810057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810057c:	b480      	push	{r7}
 810057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100580:	bf00      	nop
 8100582:	e7fd      	b.n	8100580 <UsageFault_Handler+0x4>

08100584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100584:	b480      	push	{r7}
 8100586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100588:	bf00      	nop
 810058a:	46bd      	mov	sp, r7
 810058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100590:	4770      	bx	lr
	...

08100594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8100594:	b580      	push	{r7, lr}
 8100596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8100598:	4802      	ldr	r0, [pc, #8]	@ (81005a4 <TIM2_IRQHandler+0x10>)
 810059a:	f000 fd0d 	bl	8100fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810059e:	bf00      	nop
 81005a0:	bd80      	pop	{r7, pc}
 81005a2:	bf00      	nop
 81005a4:	10000324 	.word	0x10000324

081005a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005a8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81005e4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81005ac:	f7ff feb0 	bl	8100310 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81005b0:	f7ff fe96 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005b4:	480c      	ldr	r0, [pc, #48]	@ (81005e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005b6:	490d      	ldr	r1, [pc, #52]	@ (81005ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005b8:	4a0d      	ldr	r2, [pc, #52]	@ (81005f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005bc:	e002      	b.n	81005c4 <LoopCopyDataInit>

081005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005c2:	3304      	adds	r3, #4

081005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005c8:	d3f9      	bcc.n	81005be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005ca:	4a0a      	ldr	r2, [pc, #40]	@ (81005f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005cc:	4c0a      	ldr	r4, [pc, #40]	@ (81005f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005d0:	e001      	b.n	81005d6 <LoopFillZerobss>

081005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005d4:	3204      	adds	r2, #4

081005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005d8:	d3fb      	bcc.n	81005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005da:	f002 f9cf 	bl	810297c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005de:	f7ff fec9 	bl	8100374 <main>
  bx  lr
 81005e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005e4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005e8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81005ec:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 81005f0:	08102ad4 	.word	0x08102ad4
  ldr r2, =_sbss
 81005f4:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 81005f8:	10004208 	.word	0x10004208

081005fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81005fc:	e7fe      	b.n	81005fc <ADC3_IRQHandler>
	...

08100600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100600:	b580      	push	{r7, lr}
 8100602:	b082      	sub	sp, #8
 8100604:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100606:	4b28      	ldr	r3, [pc, #160]	@ (81006a8 <HAL_Init+0xa8>)
 8100608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810060c:	4a26      	ldr	r2, [pc, #152]	@ (81006a8 <HAL_Init+0xa8>)
 810060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100612:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100616:	4b24      	ldr	r3, [pc, #144]	@ (81006a8 <HAL_Init+0xa8>)
 8100618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810061c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100620:	603b      	str	r3, [r7, #0]
 8100622:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100624:	4b21      	ldr	r3, [pc, #132]	@ (81006ac <HAL_Init+0xac>)
 8100626:	681b      	ldr	r3, [r3, #0]
 8100628:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810062c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100630:	4a1e      	ldr	r2, [pc, #120]	@ (81006ac <HAL_Init+0xac>)
 8100632:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100636:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100638:	4b1c      	ldr	r3, [pc, #112]	@ (81006ac <HAL_Init+0xac>)
 810063a:	681b      	ldr	r3, [r3, #0]
 810063c:	4a1b      	ldr	r2, [pc, #108]	@ (81006ac <HAL_Init+0xac>)
 810063e:	f043 0301 	orr.w	r3, r3, #1
 8100642:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100644:	2003      	movs	r0, #3
 8100646:	f000 f8fa 	bl	810083e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810064a:	f000 f9d7 	bl	81009fc <HAL_RCC_GetSysClockFreq>
 810064e:	4602      	mov	r2, r0
 8100650:	4b15      	ldr	r3, [pc, #84]	@ (81006a8 <HAL_Init+0xa8>)
 8100652:	699b      	ldr	r3, [r3, #24]
 8100654:	0a1b      	lsrs	r3, r3, #8
 8100656:	f003 030f 	and.w	r3, r3, #15
 810065a:	4915      	ldr	r1, [pc, #84]	@ (81006b0 <HAL_Init+0xb0>)
 810065c:	5ccb      	ldrb	r3, [r1, r3]
 810065e:	f003 031f 	and.w	r3, r3, #31
 8100662:	fa22 f303 	lsr.w	r3, r2, r3
 8100666:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100668:	4b0f      	ldr	r3, [pc, #60]	@ (81006a8 <HAL_Init+0xa8>)
 810066a:	699b      	ldr	r3, [r3, #24]
 810066c:	f003 030f 	and.w	r3, r3, #15
 8100670:	4a0f      	ldr	r2, [pc, #60]	@ (81006b0 <HAL_Init+0xb0>)
 8100672:	5cd3      	ldrb	r3, [r2, r3]
 8100674:	f003 031f 	and.w	r3, r3, #31
 8100678:	687a      	ldr	r2, [r7, #4]
 810067a:	fa22 f303 	lsr.w	r3, r2, r3
 810067e:	4a0d      	ldr	r2, [pc, #52]	@ (81006b4 <HAL_Init+0xb4>)
 8100680:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100682:	4b0c      	ldr	r3, [pc, #48]	@ (81006b4 <HAL_Init+0xb4>)
 8100684:	681b      	ldr	r3, [r3, #0]
 8100686:	4a0c      	ldr	r2, [pc, #48]	@ (81006b8 <HAL_Init+0xb8>)
 8100688:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810068a:	200f      	movs	r0, #15
 810068c:	f7ff fefc 	bl	8100488 <HAL_InitTick>
 8100690:	4603      	mov	r3, r0
 8100692:	2b00      	cmp	r3, #0
 8100694:	d001      	beq.n	810069a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100696:	2301      	movs	r3, #1
 8100698:	e002      	b.n	81006a0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810069a:	f7ff fed7 	bl	810044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810069e:	2300      	movs	r3, #0
}
 81006a0:	4618      	mov	r0, r3
 81006a2:	3708      	adds	r7, #8
 81006a4:	46bd      	mov	sp, r7
 81006a6:	bd80      	pop	{r7, pc}
 81006a8:	58024400 	.word	0x58024400
 81006ac:	40024400 	.word	0x40024400
 81006b0:	08102abc 	.word	0x08102abc
 81006b4:	10000004 	.word	0x10000004
 81006b8:	10000000 	.word	0x10000000

081006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006bc:	b480      	push	{r7}
 81006be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006c0:	4b06      	ldr	r3, [pc, #24]	@ (81006dc <HAL_IncTick+0x20>)
 81006c2:	781b      	ldrb	r3, [r3, #0]
 81006c4:	461a      	mov	r2, r3
 81006c6:	4b06      	ldr	r3, [pc, #24]	@ (81006e0 <HAL_IncTick+0x24>)
 81006c8:	681b      	ldr	r3, [r3, #0]
 81006ca:	4413      	add	r3, r2
 81006cc:	4a04      	ldr	r2, [pc, #16]	@ (81006e0 <HAL_IncTick+0x24>)
 81006ce:	6013      	str	r3, [r2, #0]
}
 81006d0:	bf00      	nop
 81006d2:	46bd      	mov	sp, r7
 81006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d8:	4770      	bx	lr
 81006da:	bf00      	nop
 81006dc:	1000000c 	.word	0x1000000c
 81006e0:	10000370 	.word	0x10000370

081006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006e4:	b480      	push	{r7}
 81006e6:	b085      	sub	sp, #20
 81006e8:	af00      	add	r7, sp, #0
 81006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006ec:	687b      	ldr	r3, [r7, #4]
 81006ee:	f003 0307 	and.w	r3, r3, #7
 81006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8100728 <__NVIC_SetPriorityGrouping+0x44>)
 81006f6:	68db      	ldr	r3, [r3, #12]
 81006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81006fa:	68ba      	ldr	r2, [r7, #8]
 81006fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100700:	4013      	ands	r3, r2
 8100702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100704:	68fb      	ldr	r3, [r7, #12]
 8100706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100708:	68bb      	ldr	r3, [r7, #8]
 810070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810070c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100716:	4a04      	ldr	r2, [pc, #16]	@ (8100728 <__NVIC_SetPriorityGrouping+0x44>)
 8100718:	68bb      	ldr	r3, [r7, #8]
 810071a:	60d3      	str	r3, [r2, #12]
}
 810071c:	bf00      	nop
 810071e:	3714      	adds	r7, #20
 8100720:	46bd      	mov	sp, r7
 8100722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100726:	4770      	bx	lr
 8100728:	e000ed00 	.word	0xe000ed00

0810072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810072c:	b480      	push	{r7}
 810072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100730:	4b04      	ldr	r3, [pc, #16]	@ (8100744 <__NVIC_GetPriorityGrouping+0x18>)
 8100732:	68db      	ldr	r3, [r3, #12]
 8100734:	0a1b      	lsrs	r3, r3, #8
 8100736:	f003 0307 	and.w	r3, r3, #7
}
 810073a:	4618      	mov	r0, r3
 810073c:	46bd      	mov	sp, r7
 810073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100742:	4770      	bx	lr
 8100744:	e000ed00 	.word	0xe000ed00

08100748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100748:	b480      	push	{r7}
 810074a:	b083      	sub	sp, #12
 810074c:	af00      	add	r7, sp, #0
 810074e:	4603      	mov	r3, r0
 8100750:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100756:	2b00      	cmp	r3, #0
 8100758:	db0b      	blt.n	8100772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810075a:	88fb      	ldrh	r3, [r7, #6]
 810075c:	f003 021f 	and.w	r2, r3, #31
 8100760:	4907      	ldr	r1, [pc, #28]	@ (8100780 <__NVIC_EnableIRQ+0x38>)
 8100762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100766:	095b      	lsrs	r3, r3, #5
 8100768:	2001      	movs	r0, #1
 810076a:	fa00 f202 	lsl.w	r2, r0, r2
 810076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100772:	bf00      	nop
 8100774:	370c      	adds	r7, #12
 8100776:	46bd      	mov	sp, r7
 8100778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810077c:	4770      	bx	lr
 810077e:	bf00      	nop
 8100780:	e000e100 	.word	0xe000e100

08100784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100784:	b480      	push	{r7}
 8100786:	b083      	sub	sp, #12
 8100788:	af00      	add	r7, sp, #0
 810078a:	4603      	mov	r3, r0
 810078c:	6039      	str	r1, [r7, #0]
 810078e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100794:	2b00      	cmp	r3, #0
 8100796:	db0a      	blt.n	81007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100798:	683b      	ldr	r3, [r7, #0]
 810079a:	b2da      	uxtb	r2, r3
 810079c:	490c      	ldr	r1, [pc, #48]	@ (81007d0 <__NVIC_SetPriority+0x4c>)
 810079e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007a2:	0112      	lsls	r2, r2, #4
 81007a4:	b2d2      	uxtb	r2, r2
 81007a6:	440b      	add	r3, r1
 81007a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007ac:	e00a      	b.n	81007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007ae:	683b      	ldr	r3, [r7, #0]
 81007b0:	b2da      	uxtb	r2, r3
 81007b2:	4908      	ldr	r1, [pc, #32]	@ (81007d4 <__NVIC_SetPriority+0x50>)
 81007b4:	88fb      	ldrh	r3, [r7, #6]
 81007b6:	f003 030f 	and.w	r3, r3, #15
 81007ba:	3b04      	subs	r3, #4
 81007bc:	0112      	lsls	r2, r2, #4
 81007be:	b2d2      	uxtb	r2, r2
 81007c0:	440b      	add	r3, r1
 81007c2:	761a      	strb	r2, [r3, #24]
}
 81007c4:	bf00      	nop
 81007c6:	370c      	adds	r7, #12
 81007c8:	46bd      	mov	sp, r7
 81007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ce:	4770      	bx	lr
 81007d0:	e000e100 	.word	0xe000e100
 81007d4:	e000ed00 	.word	0xe000ed00

081007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007d8:	b480      	push	{r7}
 81007da:	b089      	sub	sp, #36	@ 0x24
 81007dc:	af00      	add	r7, sp, #0
 81007de:	60f8      	str	r0, [r7, #12]
 81007e0:	60b9      	str	r1, [r7, #8]
 81007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81007e4:	68fb      	ldr	r3, [r7, #12]
 81007e6:	f003 0307 	and.w	r3, r3, #7
 81007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81007ec:	69fb      	ldr	r3, [r7, #28]
 81007ee:	f1c3 0307 	rsb	r3, r3, #7
 81007f2:	2b04      	cmp	r3, #4
 81007f4:	bf28      	it	cs
 81007f6:	2304      	movcs	r3, #4
 81007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81007fa:	69fb      	ldr	r3, [r7, #28]
 81007fc:	3304      	adds	r3, #4
 81007fe:	2b06      	cmp	r3, #6
 8100800:	d902      	bls.n	8100808 <NVIC_EncodePriority+0x30>
 8100802:	69fb      	ldr	r3, [r7, #28]
 8100804:	3b03      	subs	r3, #3
 8100806:	e000      	b.n	810080a <NVIC_EncodePriority+0x32>
 8100808:	2300      	movs	r3, #0
 810080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810080c:	f04f 32ff 	mov.w	r2, #4294967295
 8100810:	69bb      	ldr	r3, [r7, #24]
 8100812:	fa02 f303 	lsl.w	r3, r2, r3
 8100816:	43da      	mvns	r2, r3
 8100818:	68bb      	ldr	r3, [r7, #8]
 810081a:	401a      	ands	r2, r3
 810081c:	697b      	ldr	r3, [r7, #20]
 810081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100820:	f04f 31ff 	mov.w	r1, #4294967295
 8100824:	697b      	ldr	r3, [r7, #20]
 8100826:	fa01 f303 	lsl.w	r3, r1, r3
 810082a:	43d9      	mvns	r1, r3
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100830:	4313      	orrs	r3, r2
         );
}
 8100832:	4618      	mov	r0, r3
 8100834:	3724      	adds	r7, #36	@ 0x24
 8100836:	46bd      	mov	sp, r7
 8100838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810083c:	4770      	bx	lr

0810083e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810083e:	b580      	push	{r7, lr}
 8100840:	b082      	sub	sp, #8
 8100842:	af00      	add	r7, sp, #0
 8100844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100846:	6878      	ldr	r0, [r7, #4]
 8100848:	f7ff ff4c 	bl	81006e4 <__NVIC_SetPriorityGrouping>
}
 810084c:	bf00      	nop
 810084e:	3708      	adds	r7, #8
 8100850:	46bd      	mov	sp, r7
 8100852:	bd80      	pop	{r7, pc}

08100854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100854:	b580      	push	{r7, lr}
 8100856:	b086      	sub	sp, #24
 8100858:	af00      	add	r7, sp, #0
 810085a:	4603      	mov	r3, r0
 810085c:	60b9      	str	r1, [r7, #8]
 810085e:	607a      	str	r2, [r7, #4]
 8100860:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100862:	f7ff ff63 	bl	810072c <__NVIC_GetPriorityGrouping>
 8100866:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100868:	687a      	ldr	r2, [r7, #4]
 810086a:	68b9      	ldr	r1, [r7, #8]
 810086c:	6978      	ldr	r0, [r7, #20]
 810086e:	f7ff ffb3 	bl	81007d8 <NVIC_EncodePriority>
 8100872:	4602      	mov	r2, r0
 8100874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100878:	4611      	mov	r1, r2
 810087a:	4618      	mov	r0, r3
 810087c:	f7ff ff82 	bl	8100784 <__NVIC_SetPriority>
}
 8100880:	bf00      	nop
 8100882:	3718      	adds	r7, #24
 8100884:	46bd      	mov	sp, r7
 8100886:	bd80      	pop	{r7, pc}

08100888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100888:	b580      	push	{r7, lr}
 810088a:	b082      	sub	sp, #8
 810088c:	af00      	add	r7, sp, #0
 810088e:	4603      	mov	r3, r0
 8100890:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100896:	4618      	mov	r0, r3
 8100898:	f7ff ff56 	bl	8100748 <__NVIC_EnableIRQ>
}
 810089c:	bf00      	nop
 810089e:	3708      	adds	r7, #8
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}

081008a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81008a4:	b480      	push	{r7}
 81008a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81008a8:	4b06      	ldr	r3, [pc, #24]	@ (81008c4 <HAL_GetCurrentCPUID+0x20>)
 81008aa:	681b      	ldr	r3, [r3, #0]
 81008ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81008b0:	2b70      	cmp	r3, #112	@ 0x70
 81008b2:	d101      	bne.n	81008b8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 81008b4:	2303      	movs	r3, #3
 81008b6:	e000      	b.n	81008ba <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 81008b8:	2301      	movs	r3, #1
  }
}
 81008ba:	4618      	mov	r0, r3
 81008bc:	46bd      	mov	sp, r7
 81008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008c2:	4770      	bx	lr
 81008c4:	e000ed00 	.word	0xe000ed00

081008c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81008c8:	b480      	push	{r7}
 81008ca:	b083      	sub	sp, #12
 81008cc:	af00      	add	r7, sp, #0
 81008ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81008d0:	4b05      	ldr	r3, [pc, #20]	@ (81008e8 <HAL_HSEM_ActivateNotification+0x20>)
 81008d2:	681a      	ldr	r2, [r3, #0]
 81008d4:	4904      	ldr	r1, [pc, #16]	@ (81008e8 <HAL_HSEM_ActivateNotification+0x20>)
 81008d6:	687b      	ldr	r3, [r7, #4]
 81008d8:	4313      	orrs	r3, r2
 81008da:	600b      	str	r3, [r1, #0]
#endif
}
 81008dc:	bf00      	nop
 81008de:	370c      	adds	r7, #12
 81008e0:	46bd      	mov	sp, r7
 81008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008e6:	4770      	bx	lr
 81008e8:	58026510 	.word	0x58026510

081008ec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81008ec:	b580      	push	{r7, lr}
 81008ee:	b084      	sub	sp, #16
 81008f0:	af00      	add	r7, sp, #0
 81008f2:	60f8      	str	r0, [r7, #12]
 81008f4:	460b      	mov	r3, r1
 81008f6:	607a      	str	r2, [r7, #4]
 81008f8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81008fa:	4b37      	ldr	r3, [pc, #220]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fc:	681b      	ldr	r3, [r3, #0]
 81008fe:	f023 0201 	bic.w	r2, r3, #1
 8100902:	4935      	ldr	r1, [pc, #212]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100904:	68fb      	ldr	r3, [r7, #12]
 8100906:	4313      	orrs	r3, r2
 8100908:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810090a:	687b      	ldr	r3, [r7, #4]
 810090c:	2b00      	cmp	r3, #0
 810090e:	d123      	bne.n	8100958 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100910:	f7ff ffc8 	bl	81008a4 <HAL_GetCurrentCPUID>
 8100914:	4603      	mov	r3, r0
 8100916:	2b03      	cmp	r3, #3
 8100918:	d158      	bne.n	81009cc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810091a:	4b2f      	ldr	r3, [pc, #188]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810091c:	691b      	ldr	r3, [r3, #16]
 810091e:	4a2e      	ldr	r2, [pc, #184]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100920:	f023 0301 	bic.w	r3, r3, #1
 8100924:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100926:	4b2d      	ldr	r3, [pc, #180]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100928:	691b      	ldr	r3, [r3, #16]
 810092a:	4a2c      	ldr	r2, [pc, #176]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810092c:	f043 0304 	orr.w	r3, r3, #4
 8100930:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100932:	f3bf 8f4f 	dsb	sy
}
 8100936:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100938:	f3bf 8f6f 	isb	sy
}
 810093c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810093e:	7afb      	ldrb	r3, [r7, #11]
 8100940:	2b01      	cmp	r3, #1
 8100942:	d101      	bne.n	8100948 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100944:	bf30      	wfi
 8100946:	e000      	b.n	810094a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100948:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810094a:	4b24      	ldr	r3, [pc, #144]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810094c:	691b      	ldr	r3, [r3, #16]
 810094e:	4a23      	ldr	r2, [pc, #140]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100950:	f023 0304 	bic.w	r3, r3, #4
 8100954:	6113      	str	r3, [r2, #16]
 8100956:	e03c      	b.n	81009d2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100958:	687b      	ldr	r3, [r7, #4]
 810095a:	2b01      	cmp	r3, #1
 810095c:	d123      	bne.n	81009a6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810095e:	f7ff ffa1 	bl	81008a4 <HAL_GetCurrentCPUID>
 8100962:	4603      	mov	r3, r0
 8100964:	2b01      	cmp	r3, #1
 8100966:	d133      	bne.n	81009d0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100968:	4b1b      	ldr	r3, [pc, #108]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810096a:	695b      	ldr	r3, [r3, #20]
 810096c:	4a1a      	ldr	r2, [pc, #104]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810096e:	f023 0302 	bic.w	r3, r3, #2
 8100972:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100974:	4b19      	ldr	r3, [pc, #100]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100976:	691b      	ldr	r3, [r3, #16]
 8100978:	4a18      	ldr	r2, [pc, #96]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810097a:	f043 0304 	orr.w	r3, r3, #4
 810097e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100980:	f3bf 8f4f 	dsb	sy
}
 8100984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100986:	f3bf 8f6f 	isb	sy
}
 810098a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810098c:	7afb      	ldrb	r3, [r7, #11]
 810098e:	2b01      	cmp	r3, #1
 8100990:	d101      	bne.n	8100996 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100992:	bf30      	wfi
 8100994:	e000      	b.n	8100998 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100996:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100998:	4b10      	ldr	r3, [pc, #64]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810099a:	691b      	ldr	r3, [r3, #16]
 810099c:	4a0f      	ldr	r2, [pc, #60]	@ (81009dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810099e:	f023 0304 	bic.w	r3, r3, #4
 81009a2:	6113      	str	r3, [r2, #16]
 81009a4:	e015      	b.n	81009d2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81009a6:	f7ff ff7d 	bl	81008a4 <HAL_GetCurrentCPUID>
 81009aa:	4603      	mov	r3, r0
 81009ac:	2b03      	cmp	r3, #3
 81009ae:	d106      	bne.n	81009be <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81009b0:	4b09      	ldr	r3, [pc, #36]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81009b2:	691b      	ldr	r3, [r3, #16]
 81009b4:	4a08      	ldr	r2, [pc, #32]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81009b6:	f023 0304 	bic.w	r3, r3, #4
 81009ba:	6113      	str	r3, [r2, #16]
 81009bc:	e009      	b.n	81009d2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81009be:	4b06      	ldr	r3, [pc, #24]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81009c0:	695b      	ldr	r3, [r3, #20]
 81009c2:	4a05      	ldr	r2, [pc, #20]	@ (81009d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81009c4:	f023 0304 	bic.w	r3, r3, #4
 81009c8:	6153      	str	r3, [r2, #20]
 81009ca:	e002      	b.n	81009d2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81009cc:	bf00      	nop
 81009ce:	e000      	b.n	81009d2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81009d0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81009d2:	3710      	adds	r7, #16
 81009d4:	46bd      	mov	sp, r7
 81009d6:	bd80      	pop	{r7, pc}
 81009d8:	58024800 	.word	0x58024800
 81009dc:	e000ed00 	.word	0xe000ed00

081009e0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81009e0:	b580      	push	{r7, lr}
 81009e2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81009e4:	f7ff ff5e 	bl	81008a4 <HAL_GetCurrentCPUID>
 81009e8:	4603      	mov	r3, r0
 81009ea:	2b03      	cmp	r3, #3
 81009ec:	d101      	bne.n	81009f2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81009ee:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81009f0:	e001      	b.n	81009f6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81009f2:	bf40      	sev
    __WFE ();
 81009f4:	bf20      	wfe
}
 81009f6:	bf00      	nop
 81009f8:	bd80      	pop	{r7, pc}
	...

081009fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81009fc:	b480      	push	{r7}
 81009fe:	b089      	sub	sp, #36	@ 0x24
 8100a00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100a02:	4bb3      	ldr	r3, [pc, #716]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a04:	691b      	ldr	r3, [r3, #16]
 8100a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8100a0a:	2b18      	cmp	r3, #24
 8100a0c:	f200 8155 	bhi.w	8100cba <HAL_RCC_GetSysClockFreq+0x2be>
 8100a10:	a201      	add	r2, pc, #4	@ (adr r2, 8100a18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100a16:	bf00      	nop
 8100a18:	08100a7d 	.word	0x08100a7d
 8100a1c:	08100cbb 	.word	0x08100cbb
 8100a20:	08100cbb 	.word	0x08100cbb
 8100a24:	08100cbb 	.word	0x08100cbb
 8100a28:	08100cbb 	.word	0x08100cbb
 8100a2c:	08100cbb 	.word	0x08100cbb
 8100a30:	08100cbb 	.word	0x08100cbb
 8100a34:	08100cbb 	.word	0x08100cbb
 8100a38:	08100aa3 	.word	0x08100aa3
 8100a3c:	08100cbb 	.word	0x08100cbb
 8100a40:	08100cbb 	.word	0x08100cbb
 8100a44:	08100cbb 	.word	0x08100cbb
 8100a48:	08100cbb 	.word	0x08100cbb
 8100a4c:	08100cbb 	.word	0x08100cbb
 8100a50:	08100cbb 	.word	0x08100cbb
 8100a54:	08100cbb 	.word	0x08100cbb
 8100a58:	08100aa9 	.word	0x08100aa9
 8100a5c:	08100cbb 	.word	0x08100cbb
 8100a60:	08100cbb 	.word	0x08100cbb
 8100a64:	08100cbb 	.word	0x08100cbb
 8100a68:	08100cbb 	.word	0x08100cbb
 8100a6c:	08100cbb 	.word	0x08100cbb
 8100a70:	08100cbb 	.word	0x08100cbb
 8100a74:	08100cbb 	.word	0x08100cbb
 8100a78:	08100aaf 	.word	0x08100aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a7c:	4b94      	ldr	r3, [pc, #592]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a7e:	681b      	ldr	r3, [r3, #0]
 8100a80:	f003 0320 	and.w	r3, r3, #32
 8100a84:	2b00      	cmp	r3, #0
 8100a86:	d009      	beq.n	8100a9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100a88:	4b91      	ldr	r3, [pc, #580]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a8a:	681b      	ldr	r3, [r3, #0]
 8100a8c:	08db      	lsrs	r3, r3, #3
 8100a8e:	f003 0303 	and.w	r3, r3, #3
 8100a92:	4a90      	ldr	r2, [pc, #576]	@ (8100cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a94:	fa22 f303 	lsr.w	r3, r2, r3
 8100a98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100a9a:	e111      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8100cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a9e:	61bb      	str	r3, [r7, #24]
      break;
 8100aa0:	e10e      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8100cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100aa4:	61bb      	str	r3, [r7, #24]
      break;
 8100aa6:	e10b      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8100cdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100aaa:	61bb      	str	r3, [r7, #24]
      break;
 8100aac:	e108      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100aae:	4b88      	ldr	r3, [pc, #544]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100ab2:	f003 0303 	and.w	r3, r3, #3
 8100ab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100ab8:	4b85      	ldr	r3, [pc, #532]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100abc:	091b      	lsrs	r3, r3, #4
 8100abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100ac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100ac4:	4b82      	ldr	r3, [pc, #520]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100ac8:	f003 0301 	and.w	r3, r3, #1
 8100acc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100ace:	4b80      	ldr	r3, [pc, #512]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100ad2:	08db      	lsrs	r3, r3, #3
 8100ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100ad8:	68fa      	ldr	r2, [r7, #12]
 8100ada:	fb02 f303 	mul.w	r3, r2, r3
 8100ade:	ee07 3a90 	vmov	s15, r3
 8100ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100aea:	693b      	ldr	r3, [r7, #16]
 8100aec:	2b00      	cmp	r3, #0
 8100aee:	f000 80e1 	beq.w	8100cb4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8100af2:	697b      	ldr	r3, [r7, #20]
 8100af4:	2b02      	cmp	r3, #2
 8100af6:	f000 8083 	beq.w	8100c00 <HAL_RCC_GetSysClockFreq+0x204>
 8100afa:	697b      	ldr	r3, [r7, #20]
 8100afc:	2b02      	cmp	r3, #2
 8100afe:	f200 80a1 	bhi.w	8100c44 <HAL_RCC_GetSysClockFreq+0x248>
 8100b02:	697b      	ldr	r3, [r7, #20]
 8100b04:	2b00      	cmp	r3, #0
 8100b06:	d003      	beq.n	8100b10 <HAL_RCC_GetSysClockFreq+0x114>
 8100b08:	697b      	ldr	r3, [r7, #20]
 8100b0a:	2b01      	cmp	r3, #1
 8100b0c:	d056      	beq.n	8100bbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8100b0e:	e099      	b.n	8100c44 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100b10:	4b6f      	ldr	r3, [pc, #444]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b12:	681b      	ldr	r3, [r3, #0]
 8100b14:	f003 0320 	and.w	r3, r3, #32
 8100b18:	2b00      	cmp	r3, #0
 8100b1a:	d02d      	beq.n	8100b78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b1e:	681b      	ldr	r3, [r3, #0]
 8100b20:	08db      	lsrs	r3, r3, #3
 8100b22:	f003 0303 	and.w	r3, r3, #3
 8100b26:	4a6b      	ldr	r2, [pc, #428]	@ (8100cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100b28:	fa22 f303 	lsr.w	r3, r2, r3
 8100b2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	ee07 3a90 	vmov	s15, r3
 8100b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b38:	693b      	ldr	r3, [r7, #16]
 8100b3a:	ee07 3a90 	vmov	s15, r3
 8100b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b46:	4b62      	ldr	r3, [pc, #392]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b4e:	ee07 3a90 	vmov	s15, r3
 8100b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8100ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100b76:	e087      	b.n	8100c88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b78:	693b      	ldr	r3, [r7, #16]
 8100b7a:	ee07 3a90 	vmov	s15, r3
 8100b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8100ce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b8a:	4b51      	ldr	r3, [pc, #324]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b92:	ee07 3a90 	vmov	s15, r3
 8100b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8100ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100bba:	e065      	b.n	8100c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100bbc:	693b      	ldr	r3, [r7, #16]
 8100bbe:	ee07 3a90 	vmov	s15, r3
 8100bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100bc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8100ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bce:	4b40      	ldr	r3, [pc, #256]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bd6:	ee07 3a90 	vmov	s15, r3
 8100bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8100be2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8100ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100bfe:	e043      	b.n	8100c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100c00:	693b      	ldr	r3, [r7, #16]
 8100c02:	ee07 3a90 	vmov	s15, r3
 8100c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100c0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8100cec <HAL_RCC_GetSysClockFreq+0x2f0>
 8100c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100c12:	4b2f      	ldr	r3, [pc, #188]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c1a:	ee07 3a90 	vmov	s15, r3
 8100c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8100ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100c42:	e021      	b.n	8100c88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100c44:	693b      	ldr	r3, [r7, #16]
 8100c46:	ee07 3a90 	vmov	s15, r3
 8100c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100c4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8100ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100c56:	4b1e      	ldr	r3, [pc, #120]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c5e:	ee07 3a90 	vmov	s15, r3
 8100c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8100ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100c86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100c88:	4b11      	ldr	r3, [pc, #68]	@ (8100cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c8c:	0a5b      	lsrs	r3, r3, #9
 8100c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100c92:	3301      	adds	r3, #1
 8100c94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100c96:	683b      	ldr	r3, [r7, #0]
 8100c98:	ee07 3a90 	vmov	s15, r3
 8100c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8100ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100cac:	ee17 3a90 	vmov	r3, s15
 8100cb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100cb2:	e005      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100cb4:	2300      	movs	r3, #0
 8100cb6:	61bb      	str	r3, [r7, #24]
      break;
 8100cb8:	e002      	b.n	8100cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100cba:	4b07      	ldr	r3, [pc, #28]	@ (8100cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100cbc:	61bb      	str	r3, [r7, #24]
      break;
 8100cbe:	bf00      	nop
  }

  return sysclockfreq;
 8100cc0:	69bb      	ldr	r3, [r7, #24]
}
 8100cc2:	4618      	mov	r0, r3
 8100cc4:	3724      	adds	r7, #36	@ 0x24
 8100cc6:	46bd      	mov	sp, r7
 8100cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ccc:	4770      	bx	lr
 8100cce:	bf00      	nop
 8100cd0:	58024400 	.word	0x58024400
 8100cd4:	03d09000 	.word	0x03d09000
 8100cd8:	003d0900 	.word	0x003d0900
 8100cdc:	017d7840 	.word	0x017d7840
 8100ce0:	46000000 	.word	0x46000000
 8100ce4:	4c742400 	.word	0x4c742400
 8100ce8:	4a742400 	.word	0x4a742400
 8100cec:	4bbebc20 	.word	0x4bbebc20

08100cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8100cf0:	b580      	push	{r7, lr}
 8100cf2:	b082      	sub	sp, #8
 8100cf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8100cf6:	f7ff fe81 	bl	81009fc <HAL_RCC_GetSysClockFreq>
 8100cfa:	4602      	mov	r2, r0
 8100cfc:	4b11      	ldr	r3, [pc, #68]	@ (8100d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8100cfe:	699b      	ldr	r3, [r3, #24]
 8100d00:	0a1b      	lsrs	r3, r3, #8
 8100d02:	f003 030f 	and.w	r3, r3, #15
 8100d06:	4910      	ldr	r1, [pc, #64]	@ (8100d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8100d08:	5ccb      	ldrb	r3, [r1, r3]
 8100d0a:	f003 031f 	and.w	r3, r3, #31
 8100d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8100d12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100d14:	4b0b      	ldr	r3, [pc, #44]	@ (8100d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8100d16:	699b      	ldr	r3, [r3, #24]
 8100d18:	f003 030f 	and.w	r3, r3, #15
 8100d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8100d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8100d1e:	5cd3      	ldrb	r3, [r2, r3]
 8100d20:	f003 031f 	and.w	r3, r3, #31
 8100d24:	687a      	ldr	r2, [r7, #4]
 8100d26:	fa22 f303 	lsr.w	r3, r2, r3
 8100d2a:	4a08      	ldr	r2, [pc, #32]	@ (8100d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8100d2c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100d2e:	4b07      	ldr	r3, [pc, #28]	@ (8100d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8100d30:	681b      	ldr	r3, [r3, #0]
 8100d32:	4a07      	ldr	r2, [pc, #28]	@ (8100d50 <HAL_RCC_GetHCLKFreq+0x60>)
 8100d34:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8100d36:	4b05      	ldr	r3, [pc, #20]	@ (8100d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8100d38:	681b      	ldr	r3, [r3, #0]
}
 8100d3a:	4618      	mov	r0, r3
 8100d3c:	3708      	adds	r7, #8
 8100d3e:	46bd      	mov	sp, r7
 8100d40:	bd80      	pop	{r7, pc}
 8100d42:	bf00      	nop
 8100d44:	58024400 	.word	0x58024400
 8100d48:	08102abc 	.word	0x08102abc
 8100d4c:	10000004 	.word	0x10000004
 8100d50:	10000000 	.word	0x10000000

08100d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8100d54:	b580      	push	{r7, lr}
 8100d56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8100d58:	f7ff ffca 	bl	8100cf0 <HAL_RCC_GetHCLKFreq>
 8100d5c:	4602      	mov	r2, r0
 8100d5e:	4b06      	ldr	r3, [pc, #24]	@ (8100d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8100d60:	69db      	ldr	r3, [r3, #28]
 8100d62:	091b      	lsrs	r3, r3, #4
 8100d64:	f003 0307 	and.w	r3, r3, #7
 8100d68:	4904      	ldr	r1, [pc, #16]	@ (8100d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8100d6a:	5ccb      	ldrb	r3, [r1, r3]
 8100d6c:	f003 031f 	and.w	r3, r3, #31
 8100d70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8100d74:	4618      	mov	r0, r3
 8100d76:	bd80      	pop	{r7, pc}
 8100d78:	58024400 	.word	0x58024400
 8100d7c:	08102abc 	.word	0x08102abc

08100d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8100d80:	b480      	push	{r7}
 8100d82:	b083      	sub	sp, #12
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	6078      	str	r0, [r7, #4]
 8100d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	223f      	movs	r2, #63	@ 0x3f
 8100d8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8100d90:	4b1a      	ldr	r3, [pc, #104]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100d92:	691b      	ldr	r3, [r3, #16]
 8100d94:	f003 0207 	and.w	r2, r3, #7
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8100d9c:	4b17      	ldr	r3, [pc, #92]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100d9e:	699b      	ldr	r3, [r3, #24]
 8100da0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8100da8:	4b14      	ldr	r3, [pc, #80]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100daa:	699b      	ldr	r3, [r3, #24]
 8100dac:	f003 020f 	and.w	r2, r3, #15
 8100db0:	687b      	ldr	r3, [r7, #4]
 8100db2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8100db4:	4b11      	ldr	r3, [pc, #68]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100db6:	699b      	ldr	r3, [r3, #24]
 8100db8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8100dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100dc2:	69db      	ldr	r3, [r3, #28]
 8100dc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100dc8:	687b      	ldr	r3, [r7, #4]
 8100dca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8100dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100dce:	69db      	ldr	r3, [r3, #28]
 8100dd0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8100dd8:	4b08      	ldr	r3, [pc, #32]	@ (8100dfc <HAL_RCC_GetClockConfig+0x7c>)
 8100dda:	6a1b      	ldr	r3, [r3, #32]
 8100ddc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8100de0:	687b      	ldr	r3, [r7, #4]
 8100de2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8100de4:	4b06      	ldr	r3, [pc, #24]	@ (8100e00 <HAL_RCC_GetClockConfig+0x80>)
 8100de6:	681b      	ldr	r3, [r3, #0]
 8100de8:	f003 020f 	and.w	r2, r3, #15
 8100dec:	683b      	ldr	r3, [r7, #0]
 8100dee:	601a      	str	r2, [r3, #0]
}
 8100df0:	bf00      	nop
 8100df2:	370c      	adds	r7, #12
 8100df4:	46bd      	mov	sp, r7
 8100df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfa:	4770      	bx	lr
 8100dfc:	58024400 	.word	0x58024400
 8100e00:	52002000 	.word	0x52002000

08100e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8100e04:	b580      	push	{r7, lr}
 8100e06:	b082      	sub	sp, #8
 8100e08:	af00      	add	r7, sp, #0
 8100e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	2b00      	cmp	r3, #0
 8100e10:	d101      	bne.n	8100e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8100e12:	2301      	movs	r3, #1
 8100e14:	e049      	b.n	8100eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8100e16:	687b      	ldr	r3, [r7, #4]
 8100e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8100e1c:	b2db      	uxtb	r3, r3
 8100e1e:	2b00      	cmp	r3, #0
 8100e20:	d106      	bne.n	8100e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8100e22:	687b      	ldr	r3, [r7, #4]
 8100e24:	2200      	movs	r2, #0
 8100e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8100e2a:	6878      	ldr	r0, [r7, #4]
 8100e2c:	f000 f841 	bl	8100eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100e30:	687b      	ldr	r3, [r7, #4]
 8100e32:	2202      	movs	r2, #2
 8100e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	681a      	ldr	r2, [r3, #0]
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	3304      	adds	r3, #4
 8100e40:	4619      	mov	r1, r3
 8100e42:	4610      	mov	r0, r2
 8100e44:	f000 f9e8 	bl	8101218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	2201      	movs	r2, #1
 8100e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	2201      	movs	r2, #1
 8100e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	2201      	movs	r2, #1
 8100e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	2201      	movs	r2, #1
 8100e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8100e68:	687b      	ldr	r3, [r7, #4]
 8100e6a:	2201      	movs	r2, #1
 8100e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	2201      	movs	r2, #1
 8100e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	2201      	movs	r2, #1
 8100e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8100e80:	687b      	ldr	r3, [r7, #4]
 8100e82:	2201      	movs	r2, #1
 8100e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	2201      	movs	r2, #1
 8100e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	2201      	movs	r2, #1
 8100e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	2201      	movs	r2, #1
 8100e9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	2201      	movs	r2, #1
 8100ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8100ea8:	2300      	movs	r3, #0
}
 8100eaa:	4618      	mov	r0, r3
 8100eac:	3708      	adds	r7, #8
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	bd80      	pop	{r7, pc}

08100eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8100eb2:	b480      	push	{r7}
 8100eb4:	b083      	sub	sp, #12
 8100eb6:	af00      	add	r7, sp, #0
 8100eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8100eba:	bf00      	nop
 8100ebc:	370c      	adds	r7, #12
 8100ebe:	46bd      	mov	sp, r7
 8100ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec4:	4770      	bx	lr
	...

08100ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8100ec8:	b480      	push	{r7}
 8100eca:	b085      	sub	sp, #20
 8100ecc:	af00      	add	r7, sp, #0
 8100ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8100ed0:	687b      	ldr	r3, [r7, #4]
 8100ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8100ed6:	b2db      	uxtb	r3, r3
 8100ed8:	2b01      	cmp	r3, #1
 8100eda:	d001      	beq.n	8100ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8100edc:	2301      	movs	r3, #1
 8100ede:	e054      	b.n	8100f8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8100ee0:	687b      	ldr	r3, [r7, #4]
 8100ee2:	2202      	movs	r2, #2
 8100ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	681b      	ldr	r3, [r3, #0]
 8100eec:	68da      	ldr	r2, [r3, #12]
 8100eee:	687b      	ldr	r3, [r7, #4]
 8100ef0:	681b      	ldr	r3, [r3, #0]
 8100ef2:	f042 0201 	orr.w	r2, r2, #1
 8100ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8100ef8:	687b      	ldr	r3, [r7, #4]
 8100efa:	681b      	ldr	r3, [r3, #0]
 8100efc:	4a26      	ldr	r2, [pc, #152]	@ (8100f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8100efe:	4293      	cmp	r3, r2
 8100f00:	d022      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	681b      	ldr	r3, [r3, #0]
 8100f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8100f0a:	d01d      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	4a22      	ldr	r2, [pc, #136]	@ (8100f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8100f12:	4293      	cmp	r3, r2
 8100f14:	d018      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	681b      	ldr	r3, [r3, #0]
 8100f1a:	4a21      	ldr	r2, [pc, #132]	@ (8100fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8100f1c:	4293      	cmp	r3, r2
 8100f1e:	d013      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	681b      	ldr	r3, [r3, #0]
 8100f24:	4a1f      	ldr	r2, [pc, #124]	@ (8100fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d00e      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	681b      	ldr	r3, [r3, #0]
 8100f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8100fa8 <HAL_TIM_Base_Start_IT+0xe0>)
 8100f30:	4293      	cmp	r3, r2
 8100f32:	d009      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f34:	687b      	ldr	r3, [r7, #4]
 8100f36:	681b      	ldr	r3, [r3, #0]
 8100f38:	4a1c      	ldr	r2, [pc, #112]	@ (8100fac <HAL_TIM_Base_Start_IT+0xe4>)
 8100f3a:	4293      	cmp	r3, r2
 8100f3c:	d004      	beq.n	8100f48 <HAL_TIM_Base_Start_IT+0x80>
 8100f3e:	687b      	ldr	r3, [r7, #4]
 8100f40:	681b      	ldr	r3, [r3, #0]
 8100f42:	4a1b      	ldr	r2, [pc, #108]	@ (8100fb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8100f44:	4293      	cmp	r3, r2
 8100f46:	d115      	bne.n	8100f74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	681b      	ldr	r3, [r3, #0]
 8100f4c:	689a      	ldr	r2, [r3, #8]
 8100f4e:	4b19      	ldr	r3, [pc, #100]	@ (8100fb4 <HAL_TIM_Base_Start_IT+0xec>)
 8100f50:	4013      	ands	r3, r2
 8100f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100f54:	68fb      	ldr	r3, [r7, #12]
 8100f56:	2b06      	cmp	r3, #6
 8100f58:	d015      	beq.n	8100f86 <HAL_TIM_Base_Start_IT+0xbe>
 8100f5a:	68fb      	ldr	r3, [r7, #12]
 8100f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8100f60:	d011      	beq.n	8100f86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8100f62:	687b      	ldr	r3, [r7, #4]
 8100f64:	681b      	ldr	r3, [r3, #0]
 8100f66:	681a      	ldr	r2, [r3, #0]
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	f042 0201 	orr.w	r2, r2, #1
 8100f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100f72:	e008      	b.n	8100f86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	681b      	ldr	r3, [r3, #0]
 8100f78:	681a      	ldr	r2, [r3, #0]
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	f042 0201 	orr.w	r2, r2, #1
 8100f82:	601a      	str	r2, [r3, #0]
 8100f84:	e000      	b.n	8100f88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8100f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8100f88:	2300      	movs	r3, #0
}
 8100f8a:	4618      	mov	r0, r3
 8100f8c:	3714      	adds	r7, #20
 8100f8e:	46bd      	mov	sp, r7
 8100f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f94:	4770      	bx	lr
 8100f96:	bf00      	nop
 8100f98:	40010000 	.word	0x40010000
 8100f9c:	40000400 	.word	0x40000400
 8100fa0:	40000800 	.word	0x40000800
 8100fa4:	40000c00 	.word	0x40000c00
 8100fa8:	40010400 	.word	0x40010400
 8100fac:	40001800 	.word	0x40001800
 8100fb0:	40014000 	.word	0x40014000
 8100fb4:	00010007 	.word	0x00010007

08100fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	b084      	sub	sp, #16
 8100fbc:	af00      	add	r7, sp, #0
 8100fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	68db      	ldr	r3, [r3, #12]
 8100fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8100fc8:	687b      	ldr	r3, [r7, #4]
 8100fca:	681b      	ldr	r3, [r3, #0]
 8100fcc:	691b      	ldr	r3, [r3, #16]
 8100fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8100fd0:	68bb      	ldr	r3, [r7, #8]
 8100fd2:	f003 0302 	and.w	r3, r3, #2
 8100fd6:	2b00      	cmp	r3, #0
 8100fd8:	d020      	beq.n	810101c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8100fda:	68fb      	ldr	r3, [r7, #12]
 8100fdc:	f003 0302 	and.w	r3, r3, #2
 8100fe0:	2b00      	cmp	r3, #0
 8100fe2:	d01b      	beq.n	810101c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8100fe4:	687b      	ldr	r3, [r7, #4]
 8100fe6:	681b      	ldr	r3, [r3, #0]
 8100fe8:	f06f 0202 	mvn.w	r2, #2
 8100fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	2201      	movs	r2, #1
 8100ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8100ff4:	687b      	ldr	r3, [r7, #4]
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	699b      	ldr	r3, [r3, #24]
 8100ffa:	f003 0303 	and.w	r3, r3, #3
 8100ffe:	2b00      	cmp	r3, #0
 8101000:	d003      	beq.n	810100a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101002:	6878      	ldr	r0, [r7, #4]
 8101004:	f000 f8e9 	bl	81011da <HAL_TIM_IC_CaptureCallback>
 8101008:	e005      	b.n	8101016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810100a:	6878      	ldr	r0, [r7, #4]
 810100c:	f000 f8db 	bl	81011c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101010:	6878      	ldr	r0, [r7, #4]
 8101012:	f000 f8ec 	bl	81011ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	2200      	movs	r2, #0
 810101a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810101c:	68bb      	ldr	r3, [r7, #8]
 810101e:	f003 0304 	and.w	r3, r3, #4
 8101022:	2b00      	cmp	r3, #0
 8101024:	d020      	beq.n	8101068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8101026:	68fb      	ldr	r3, [r7, #12]
 8101028:	f003 0304 	and.w	r3, r3, #4
 810102c:	2b00      	cmp	r3, #0
 810102e:	d01b      	beq.n	8101068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	f06f 0204 	mvn.w	r2, #4
 8101038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810103a:	687b      	ldr	r3, [r7, #4]
 810103c:	2202      	movs	r2, #2
 810103e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101040:	687b      	ldr	r3, [r7, #4]
 8101042:	681b      	ldr	r3, [r3, #0]
 8101044:	699b      	ldr	r3, [r3, #24]
 8101046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810104a:	2b00      	cmp	r3, #0
 810104c:	d003      	beq.n	8101056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810104e:	6878      	ldr	r0, [r7, #4]
 8101050:	f000 f8c3 	bl	81011da <HAL_TIM_IC_CaptureCallback>
 8101054:	e005      	b.n	8101062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101056:	6878      	ldr	r0, [r7, #4]
 8101058:	f000 f8b5 	bl	81011c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810105c:	6878      	ldr	r0, [r7, #4]
 810105e:	f000 f8c6 	bl	81011ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	2200      	movs	r2, #0
 8101066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8101068:	68bb      	ldr	r3, [r7, #8]
 810106a:	f003 0308 	and.w	r3, r3, #8
 810106e:	2b00      	cmp	r3, #0
 8101070:	d020      	beq.n	81010b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8101072:	68fb      	ldr	r3, [r7, #12]
 8101074:	f003 0308 	and.w	r3, r3, #8
 8101078:	2b00      	cmp	r3, #0
 810107a:	d01b      	beq.n	81010b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	681b      	ldr	r3, [r3, #0]
 8101080:	f06f 0208 	mvn.w	r2, #8
 8101084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101086:	687b      	ldr	r3, [r7, #4]
 8101088:	2204      	movs	r2, #4
 810108a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	69db      	ldr	r3, [r3, #28]
 8101092:	f003 0303 	and.w	r3, r3, #3
 8101096:	2b00      	cmp	r3, #0
 8101098:	d003      	beq.n	81010a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810109a:	6878      	ldr	r0, [r7, #4]
 810109c:	f000 f89d 	bl	81011da <HAL_TIM_IC_CaptureCallback>
 81010a0:	e005      	b.n	81010ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81010a2:	6878      	ldr	r0, [r7, #4]
 81010a4:	f000 f88f 	bl	81011c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81010a8:	6878      	ldr	r0, [r7, #4]
 81010aa:	f000 f8a0 	bl	81011ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81010ae:	687b      	ldr	r3, [r7, #4]
 81010b0:	2200      	movs	r2, #0
 81010b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81010b4:	68bb      	ldr	r3, [r7, #8]
 81010b6:	f003 0310 	and.w	r3, r3, #16
 81010ba:	2b00      	cmp	r3, #0
 81010bc:	d020      	beq.n	8101100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81010be:	68fb      	ldr	r3, [r7, #12]
 81010c0:	f003 0310 	and.w	r3, r3, #16
 81010c4:	2b00      	cmp	r3, #0
 81010c6:	d01b      	beq.n	8101100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	f06f 0210 	mvn.w	r2, #16
 81010d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	2208      	movs	r2, #8
 81010d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	69db      	ldr	r3, [r3, #28]
 81010de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81010e2:	2b00      	cmp	r3, #0
 81010e4:	d003      	beq.n	81010ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81010e6:	6878      	ldr	r0, [r7, #4]
 81010e8:	f000 f877 	bl	81011da <HAL_TIM_IC_CaptureCallback>
 81010ec:	e005      	b.n	81010fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81010ee:	6878      	ldr	r0, [r7, #4]
 81010f0:	f000 f869 	bl	81011c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81010f4:	6878      	ldr	r0, [r7, #4]
 81010f6:	f000 f87a 	bl	81011ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	2200      	movs	r2, #0
 81010fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8101100:	68bb      	ldr	r3, [r7, #8]
 8101102:	f003 0301 	and.w	r3, r3, #1
 8101106:	2b00      	cmp	r3, #0
 8101108:	d00c      	beq.n	8101124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810110a:	68fb      	ldr	r3, [r7, #12]
 810110c:	f003 0301 	and.w	r3, r3, #1
 8101110:	2b00      	cmp	r3, #0
 8101112:	d007      	beq.n	8101124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	681b      	ldr	r3, [r3, #0]
 8101118:	f06f 0201 	mvn.w	r2, #1
 810111c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810111e:	6878      	ldr	r0, [r7, #4]
 8101120:	f7ff f984 	bl	810042c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101124:	68bb      	ldr	r3, [r7, #8]
 8101126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810112a:	2b00      	cmp	r3, #0
 810112c:	d104      	bne.n	8101138 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810112e:	68bb      	ldr	r3, [r7, #8]
 8101130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8101134:	2b00      	cmp	r3, #0
 8101136:	d00c      	beq.n	8101152 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101138:	68fb      	ldr	r3, [r7, #12]
 810113a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810113e:	2b00      	cmp	r3, #0
 8101140:	d007      	beq.n	8101152 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	681b      	ldr	r3, [r3, #0]
 8101146:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810114a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810114c:	6878      	ldr	r0, [r7, #4]
 810114e:	f000 f90d 	bl	810136c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8101152:	68bb      	ldr	r3, [r7, #8]
 8101154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101158:	2b00      	cmp	r3, #0
 810115a:	d00c      	beq.n	8101176 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810115c:	68fb      	ldr	r3, [r7, #12]
 810115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101162:	2b00      	cmp	r3, #0
 8101164:	d007      	beq.n	8101176 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	681b      	ldr	r3, [r3, #0]
 810116a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810116e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101170:	6878      	ldr	r0, [r7, #4]
 8101172:	f000 f905 	bl	8101380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8101176:	68bb      	ldr	r3, [r7, #8]
 8101178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810117c:	2b00      	cmp	r3, #0
 810117e:	d00c      	beq.n	810119a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8101180:	68fb      	ldr	r3, [r7, #12]
 8101182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101186:	2b00      	cmp	r3, #0
 8101188:	d007      	beq.n	810119a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810118a:	687b      	ldr	r3, [r7, #4]
 810118c:	681b      	ldr	r3, [r3, #0]
 810118e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8101192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101194:	6878      	ldr	r0, [r7, #4]
 8101196:	f000 f834 	bl	8101202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810119a:	68bb      	ldr	r3, [r7, #8]
 810119c:	f003 0320 	and.w	r3, r3, #32
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d00c      	beq.n	81011be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81011a4:	68fb      	ldr	r3, [r7, #12]
 81011a6:	f003 0320 	and.w	r3, r3, #32
 81011aa:	2b00      	cmp	r3, #0
 81011ac:	d007      	beq.n	81011be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	681b      	ldr	r3, [r3, #0]
 81011b2:	f06f 0220 	mvn.w	r2, #32
 81011b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81011b8:	6878      	ldr	r0, [r7, #4]
 81011ba:	f000 f8cd 	bl	8101358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81011be:	bf00      	nop
 81011c0:	3710      	adds	r7, #16
 81011c2:	46bd      	mov	sp, r7
 81011c4:	bd80      	pop	{r7, pc}

081011c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81011c6:	b480      	push	{r7}
 81011c8:	b083      	sub	sp, #12
 81011ca:	af00      	add	r7, sp, #0
 81011cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81011ce:	bf00      	nop
 81011d0:	370c      	adds	r7, #12
 81011d2:	46bd      	mov	sp, r7
 81011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d8:	4770      	bx	lr

081011da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81011da:	b480      	push	{r7}
 81011dc:	b083      	sub	sp, #12
 81011de:	af00      	add	r7, sp, #0
 81011e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81011e2:	bf00      	nop
 81011e4:	370c      	adds	r7, #12
 81011e6:	46bd      	mov	sp, r7
 81011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ec:	4770      	bx	lr

081011ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81011ee:	b480      	push	{r7}
 81011f0:	b083      	sub	sp, #12
 81011f2:	af00      	add	r7, sp, #0
 81011f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81011f6:	bf00      	nop
 81011f8:	370c      	adds	r7, #12
 81011fa:	46bd      	mov	sp, r7
 81011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101200:	4770      	bx	lr

08101202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101202:	b480      	push	{r7}
 8101204:	b083      	sub	sp, #12
 8101206:	af00      	add	r7, sp, #0
 8101208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810120a:	bf00      	nop
 810120c:	370c      	adds	r7, #12
 810120e:	46bd      	mov	sp, r7
 8101210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101214:	4770      	bx	lr
	...

08101218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8101218:	b480      	push	{r7}
 810121a:	b085      	sub	sp, #20
 810121c:	af00      	add	r7, sp, #0
 810121e:	6078      	str	r0, [r7, #4]
 8101220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	4a43      	ldr	r2, [pc, #268]	@ (8101338 <TIM_Base_SetConfig+0x120>)
 810122c:	4293      	cmp	r3, r2
 810122e:	d013      	beq.n	8101258 <TIM_Base_SetConfig+0x40>
 8101230:	687b      	ldr	r3, [r7, #4]
 8101232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101236:	d00f      	beq.n	8101258 <TIM_Base_SetConfig+0x40>
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	4a40      	ldr	r2, [pc, #256]	@ (810133c <TIM_Base_SetConfig+0x124>)
 810123c:	4293      	cmp	r3, r2
 810123e:	d00b      	beq.n	8101258 <TIM_Base_SetConfig+0x40>
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	4a3f      	ldr	r2, [pc, #252]	@ (8101340 <TIM_Base_SetConfig+0x128>)
 8101244:	4293      	cmp	r3, r2
 8101246:	d007      	beq.n	8101258 <TIM_Base_SetConfig+0x40>
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	4a3e      	ldr	r2, [pc, #248]	@ (8101344 <TIM_Base_SetConfig+0x12c>)
 810124c:	4293      	cmp	r3, r2
 810124e:	d003      	beq.n	8101258 <TIM_Base_SetConfig+0x40>
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	4a3d      	ldr	r2, [pc, #244]	@ (8101348 <TIM_Base_SetConfig+0x130>)
 8101254:	4293      	cmp	r3, r2
 8101256:	d108      	bne.n	810126a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101258:	68fb      	ldr	r3, [r7, #12]
 810125a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810125e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101260:	683b      	ldr	r3, [r7, #0]
 8101262:	685b      	ldr	r3, [r3, #4]
 8101264:	68fa      	ldr	r2, [r7, #12]
 8101266:	4313      	orrs	r3, r2
 8101268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	4a32      	ldr	r2, [pc, #200]	@ (8101338 <TIM_Base_SetConfig+0x120>)
 810126e:	4293      	cmp	r3, r2
 8101270:	d01f      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101278:	d01b      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	4a2f      	ldr	r2, [pc, #188]	@ (810133c <TIM_Base_SetConfig+0x124>)
 810127e:	4293      	cmp	r3, r2
 8101280:	d017      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	4a2e      	ldr	r2, [pc, #184]	@ (8101340 <TIM_Base_SetConfig+0x128>)
 8101286:	4293      	cmp	r3, r2
 8101288:	d013      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	4a2d      	ldr	r2, [pc, #180]	@ (8101344 <TIM_Base_SetConfig+0x12c>)
 810128e:	4293      	cmp	r3, r2
 8101290:	d00f      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 8101292:	687b      	ldr	r3, [r7, #4]
 8101294:	4a2c      	ldr	r2, [pc, #176]	@ (8101348 <TIM_Base_SetConfig+0x130>)
 8101296:	4293      	cmp	r3, r2
 8101298:	d00b      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	4a2b      	ldr	r2, [pc, #172]	@ (810134c <TIM_Base_SetConfig+0x134>)
 810129e:	4293      	cmp	r3, r2
 81012a0:	d007      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 81012a2:	687b      	ldr	r3, [r7, #4]
 81012a4:	4a2a      	ldr	r2, [pc, #168]	@ (8101350 <TIM_Base_SetConfig+0x138>)
 81012a6:	4293      	cmp	r3, r2
 81012a8:	d003      	beq.n	81012b2 <TIM_Base_SetConfig+0x9a>
 81012aa:	687b      	ldr	r3, [r7, #4]
 81012ac:	4a29      	ldr	r2, [pc, #164]	@ (8101354 <TIM_Base_SetConfig+0x13c>)
 81012ae:	4293      	cmp	r3, r2
 81012b0:	d108      	bne.n	81012c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81012b2:	68fb      	ldr	r3, [r7, #12]
 81012b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81012b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81012ba:	683b      	ldr	r3, [r7, #0]
 81012bc:	68db      	ldr	r3, [r3, #12]
 81012be:	68fa      	ldr	r2, [r7, #12]
 81012c0:	4313      	orrs	r3, r2
 81012c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81012c4:	68fb      	ldr	r3, [r7, #12]
 81012c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81012ca:	683b      	ldr	r3, [r7, #0]
 81012cc:	695b      	ldr	r3, [r3, #20]
 81012ce:	4313      	orrs	r3, r2
 81012d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81012d2:	683b      	ldr	r3, [r7, #0]
 81012d4:	689a      	ldr	r2, [r3, #8]
 81012d6:	687b      	ldr	r3, [r7, #4]
 81012d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81012da:	683b      	ldr	r3, [r7, #0]
 81012dc:	681a      	ldr	r2, [r3, #0]
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	4a14      	ldr	r2, [pc, #80]	@ (8101338 <TIM_Base_SetConfig+0x120>)
 81012e6:	4293      	cmp	r3, r2
 81012e8:	d00f      	beq.n	810130a <TIM_Base_SetConfig+0xf2>
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	4a16      	ldr	r2, [pc, #88]	@ (8101348 <TIM_Base_SetConfig+0x130>)
 81012ee:	4293      	cmp	r3, r2
 81012f0:	d00b      	beq.n	810130a <TIM_Base_SetConfig+0xf2>
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	4a15      	ldr	r2, [pc, #84]	@ (810134c <TIM_Base_SetConfig+0x134>)
 81012f6:	4293      	cmp	r3, r2
 81012f8:	d007      	beq.n	810130a <TIM_Base_SetConfig+0xf2>
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	4a14      	ldr	r2, [pc, #80]	@ (8101350 <TIM_Base_SetConfig+0x138>)
 81012fe:	4293      	cmp	r3, r2
 8101300:	d003      	beq.n	810130a <TIM_Base_SetConfig+0xf2>
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	4a13      	ldr	r2, [pc, #76]	@ (8101354 <TIM_Base_SetConfig+0x13c>)
 8101306:	4293      	cmp	r3, r2
 8101308:	d103      	bne.n	8101312 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810130a:	683b      	ldr	r3, [r7, #0]
 810130c:	691a      	ldr	r2, [r3, #16]
 810130e:	687b      	ldr	r3, [r7, #4]
 8101310:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	f043 0204 	orr.w	r2, r3, #4
 810131a:	687b      	ldr	r3, [r7, #4]
 810131c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	2201      	movs	r2, #1
 8101322:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8101324:	687b      	ldr	r3, [r7, #4]
 8101326:	68fa      	ldr	r2, [r7, #12]
 8101328:	601a      	str	r2, [r3, #0]
}
 810132a:	bf00      	nop
 810132c:	3714      	adds	r7, #20
 810132e:	46bd      	mov	sp, r7
 8101330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101334:	4770      	bx	lr
 8101336:	bf00      	nop
 8101338:	40010000 	.word	0x40010000
 810133c:	40000400 	.word	0x40000400
 8101340:	40000800 	.word	0x40000800
 8101344:	40000c00 	.word	0x40000c00
 8101348:	40010400 	.word	0x40010400
 810134c:	40014000 	.word	0x40014000
 8101350:	40014400 	.word	0x40014400
 8101354:	40014800 	.word	0x40014800

08101358 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101358:	b480      	push	{r7}
 810135a:	b083      	sub	sp, #12
 810135c:	af00      	add	r7, sp, #0
 810135e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101360:	bf00      	nop
 8101362:	370c      	adds	r7, #12
 8101364:	46bd      	mov	sp, r7
 8101366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136a:	4770      	bx	lr

0810136c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810136c:	b480      	push	{r7}
 810136e:	b083      	sub	sp, #12
 8101370:	af00      	add	r7, sp, #0
 8101372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101374:	bf00      	nop
 8101376:	370c      	adds	r7, #12
 8101378:	46bd      	mov	sp, r7
 810137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137e:	4770      	bx	lr

08101380 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101380:	b480      	push	{r7}
 8101382:	b083      	sub	sp, #12
 8101384:	af00      	add	r7, sp, #0
 8101386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101388:	bf00      	nop
 810138a:	370c      	adds	r7, #12
 810138c:	46bd      	mov	sp, r7
 810138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101392:	4770      	bx	lr

08101394 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8101394:	b480      	push	{r7}
 8101396:	b085      	sub	sp, #20
 8101398:	af00      	add	r7, sp, #0
 810139a:	4603      	mov	r3, r0
 810139c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 810139e:	2300      	movs	r3, #0
 81013a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 81013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013a6:	2b84      	cmp	r3, #132	@ 0x84
 81013a8:	d005      	beq.n	81013b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 81013aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	4413      	add	r3, r2
 81013b2:	3303      	adds	r3, #3
 81013b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 81013b6:	68fb      	ldr	r3, [r7, #12]
}
 81013b8:	4618      	mov	r0, r3
 81013ba:	3714      	adds	r7, #20
 81013bc:	46bd      	mov	sp, r7
 81013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c2:	4770      	bx	lr

081013c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 81013c4:	b580      	push	{r7, lr}
 81013c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 81013c8:	f000 fefc 	bl	81021c4 <vTaskStartScheduler>
  
  return osOK;
 81013cc:	2300      	movs	r3, #0
}
 81013ce:	4618      	mov	r0, r3
 81013d0:	bd80      	pop	{r7, pc}

081013d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 81013d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 81013d4:	b089      	sub	sp, #36	@ 0x24
 81013d6:	af04      	add	r7, sp, #16
 81013d8:	6078      	str	r0, [r7, #4]
 81013da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	695b      	ldr	r3, [r3, #20]
 81013e0:	2b00      	cmp	r3, #0
 81013e2:	d020      	beq.n	8101426 <osThreadCreate+0x54>
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	699b      	ldr	r3, [r3, #24]
 81013e8:	2b00      	cmp	r3, #0
 81013ea:	d01c      	beq.n	8101426 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	685c      	ldr	r4, [r3, #4]
 81013f0:	687b      	ldr	r3, [r7, #4]
 81013f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	691e      	ldr	r6, [r3, #16]
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 81013fe:	4618      	mov	r0, r3
 8101400:	f7ff ffc8 	bl	8101394 <makeFreeRtosPriority>
 8101404:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	695b      	ldr	r3, [r3, #20]
 810140a:	687a      	ldr	r2, [r7, #4]
 810140c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810140e:	9202      	str	r2, [sp, #8]
 8101410:	9301      	str	r3, [sp, #4]
 8101412:	9100      	str	r1, [sp, #0]
 8101414:	683b      	ldr	r3, [r7, #0]
 8101416:	4632      	mov	r2, r6
 8101418:	4629      	mov	r1, r5
 810141a:	4620      	mov	r0, r4
 810141c:	f000 fcec 	bl	8101df8 <xTaskCreateStatic>
 8101420:	4603      	mov	r3, r0
 8101422:	60fb      	str	r3, [r7, #12]
 8101424:	e01c      	b.n	8101460 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	685c      	ldr	r4, [r3, #4]
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101432:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8101434:	687b      	ldr	r3, [r7, #4]
 8101436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810143a:	4618      	mov	r0, r3
 810143c:	f7ff ffaa 	bl	8101394 <makeFreeRtosPriority>
 8101440:	4602      	mov	r2, r0
 8101442:	f107 030c 	add.w	r3, r7, #12
 8101446:	9301      	str	r3, [sp, #4]
 8101448:	9200      	str	r2, [sp, #0]
 810144a:	683b      	ldr	r3, [r7, #0]
 810144c:	4632      	mov	r2, r6
 810144e:	4629      	mov	r1, r5
 8101450:	4620      	mov	r0, r4
 8101452:	f000 fd31 	bl	8101eb8 <xTaskCreate>
 8101456:	4603      	mov	r3, r0
 8101458:	2b01      	cmp	r3, #1
 810145a:	d001      	beq.n	8101460 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 810145c:	2300      	movs	r3, #0
 810145e:	e000      	b.n	8101462 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8101460:	68fb      	ldr	r3, [r7, #12]
}
 8101462:	4618      	mov	r0, r3
 8101464:	3714      	adds	r7, #20
 8101466:	46bd      	mov	sp, r7
 8101468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810146a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 810146a:	b580      	push	{r7, lr}
 810146c:	b084      	sub	sp, #16
 810146e:	af00      	add	r7, sp, #0
 8101470:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8101472:	687b      	ldr	r3, [r7, #4]
 8101474:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8101476:	68fb      	ldr	r3, [r7, #12]
 8101478:	2b00      	cmp	r3, #0
 810147a:	d001      	beq.n	8101480 <osDelay+0x16>
 810147c:	68fb      	ldr	r3, [r7, #12]
 810147e:	e000      	b.n	8101482 <osDelay+0x18>
 8101480:	2301      	movs	r3, #1
 8101482:	4618      	mov	r0, r3
 8101484:	f000 fe68 	bl	8102158 <vTaskDelay>
  
  return osOK;
 8101488:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 810148a:	4618      	mov	r0, r3
 810148c:	3710      	adds	r7, #16
 810148e:	46bd      	mov	sp, r7
 8101490:	bd80      	pop	{r7, pc}
	...

08101494 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101494:	b580      	push	{r7, lr}
 8101496:	b08a      	sub	sp, #40	@ 0x28
 8101498:	af00      	add	r7, sp, #0
 810149a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810149c:	2300      	movs	r3, #0
 810149e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81014a0:	f000 fefa 	bl	8102298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81014a4:	4b5c      	ldr	r3, [pc, #368]	@ (8101618 <pvPortMalloc+0x184>)
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	2b00      	cmp	r3, #0
 81014aa:	d101      	bne.n	81014b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81014ac:	f000 f924 	bl	81016f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81014b0:	4b5a      	ldr	r3, [pc, #360]	@ (810161c <pvPortMalloc+0x188>)
 81014b2:	681a      	ldr	r2, [r3, #0]
 81014b4:	687b      	ldr	r3, [r7, #4]
 81014b6:	4013      	ands	r3, r2
 81014b8:	2b00      	cmp	r3, #0
 81014ba:	f040 8095 	bne.w	81015e8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81014be:	687b      	ldr	r3, [r7, #4]
 81014c0:	2b00      	cmp	r3, #0
 81014c2:	d01e      	beq.n	8101502 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81014c4:	2208      	movs	r2, #8
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	4413      	add	r3, r2
 81014ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	f003 0307 	and.w	r3, r3, #7
 81014d2:	2b00      	cmp	r3, #0
 81014d4:	d015      	beq.n	8101502 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	f023 0307 	bic.w	r3, r3, #7
 81014dc:	3308      	adds	r3, #8
 81014de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81014e0:	687b      	ldr	r3, [r7, #4]
 81014e2:	f003 0307 	and.w	r3, r3, #7
 81014e6:	2b00      	cmp	r3, #0
 81014e8:	d00b      	beq.n	8101502 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81014ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81014ee:	f383 8811 	msr	BASEPRI, r3
 81014f2:	f3bf 8f6f 	isb	sy
 81014f6:	f3bf 8f4f 	dsb	sy
 81014fa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81014fc:	bf00      	nop
 81014fe:	bf00      	nop
 8101500:	e7fd      	b.n	81014fe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	2b00      	cmp	r3, #0
 8101506:	d06f      	beq.n	81015e8 <pvPortMalloc+0x154>
 8101508:	4b45      	ldr	r3, [pc, #276]	@ (8101620 <pvPortMalloc+0x18c>)
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	687a      	ldr	r2, [r7, #4]
 810150e:	429a      	cmp	r2, r3
 8101510:	d86a      	bhi.n	81015e8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101512:	4b44      	ldr	r3, [pc, #272]	@ (8101624 <pvPortMalloc+0x190>)
 8101514:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101516:	4b43      	ldr	r3, [pc, #268]	@ (8101624 <pvPortMalloc+0x190>)
 8101518:	681b      	ldr	r3, [r3, #0]
 810151a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810151c:	e004      	b.n	8101528 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101520:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101524:	681b      	ldr	r3, [r3, #0]
 8101526:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810152a:	685b      	ldr	r3, [r3, #4]
 810152c:	687a      	ldr	r2, [r7, #4]
 810152e:	429a      	cmp	r2, r3
 8101530:	d903      	bls.n	810153a <pvPortMalloc+0xa6>
 8101532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101534:	681b      	ldr	r3, [r3, #0]
 8101536:	2b00      	cmp	r3, #0
 8101538:	d1f1      	bne.n	810151e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810153a:	4b37      	ldr	r3, [pc, #220]	@ (8101618 <pvPortMalloc+0x184>)
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101540:	429a      	cmp	r2, r3
 8101542:	d051      	beq.n	81015e8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101544:	6a3b      	ldr	r3, [r7, #32]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	2208      	movs	r2, #8
 810154a:	4413      	add	r3, r2
 810154c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101550:	681a      	ldr	r2, [r3, #0]
 8101552:	6a3b      	ldr	r3, [r7, #32]
 8101554:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101558:	685a      	ldr	r2, [r3, #4]
 810155a:	687b      	ldr	r3, [r7, #4]
 810155c:	1ad2      	subs	r2, r2, r3
 810155e:	2308      	movs	r3, #8
 8101560:	005b      	lsls	r3, r3, #1
 8101562:	429a      	cmp	r2, r3
 8101564:	d920      	bls.n	81015a8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101568:	687b      	ldr	r3, [r7, #4]
 810156a:	4413      	add	r3, r2
 810156c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810156e:	69bb      	ldr	r3, [r7, #24]
 8101570:	f003 0307 	and.w	r3, r3, #7
 8101574:	2b00      	cmp	r3, #0
 8101576:	d00b      	beq.n	8101590 <pvPortMalloc+0xfc>
	__asm volatile
 8101578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810157c:	f383 8811 	msr	BASEPRI, r3
 8101580:	f3bf 8f6f 	isb	sy
 8101584:	f3bf 8f4f 	dsb	sy
 8101588:	613b      	str	r3, [r7, #16]
}
 810158a:	bf00      	nop
 810158c:	bf00      	nop
 810158e:	e7fd      	b.n	810158c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101592:	685a      	ldr	r2, [r3, #4]
 8101594:	687b      	ldr	r3, [r7, #4]
 8101596:	1ad2      	subs	r2, r2, r3
 8101598:	69bb      	ldr	r3, [r7, #24]
 810159a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810159e:	687a      	ldr	r2, [r7, #4]
 81015a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81015a2:	69b8      	ldr	r0, [r7, #24]
 81015a4:	f000 f90a 	bl	81017bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8101620 <pvPortMalloc+0x18c>)
 81015aa:	681a      	ldr	r2, [r3, #0]
 81015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015ae:	685b      	ldr	r3, [r3, #4]
 81015b0:	1ad3      	subs	r3, r2, r3
 81015b2:	4a1b      	ldr	r2, [pc, #108]	@ (8101620 <pvPortMalloc+0x18c>)
 81015b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8101620 <pvPortMalloc+0x18c>)
 81015b8:	681a      	ldr	r2, [r3, #0]
 81015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8101628 <pvPortMalloc+0x194>)
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	429a      	cmp	r2, r3
 81015c0:	d203      	bcs.n	81015ca <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81015c2:	4b17      	ldr	r3, [pc, #92]	@ (8101620 <pvPortMalloc+0x18c>)
 81015c4:	681b      	ldr	r3, [r3, #0]
 81015c6:	4a18      	ldr	r2, [pc, #96]	@ (8101628 <pvPortMalloc+0x194>)
 81015c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015cc:	685a      	ldr	r2, [r3, #4]
 81015ce:	4b13      	ldr	r3, [pc, #76]	@ (810161c <pvPortMalloc+0x188>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	431a      	orrs	r2, r3
 81015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81015da:	2200      	movs	r2, #0
 81015dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81015de:	4b13      	ldr	r3, [pc, #76]	@ (810162c <pvPortMalloc+0x198>)
 81015e0:	681b      	ldr	r3, [r3, #0]
 81015e2:	3301      	adds	r3, #1
 81015e4:	4a11      	ldr	r2, [pc, #68]	@ (810162c <pvPortMalloc+0x198>)
 81015e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81015e8:	f000 fe64 	bl	81022b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81015ec:	69fb      	ldr	r3, [r7, #28]
 81015ee:	f003 0307 	and.w	r3, r3, #7
 81015f2:	2b00      	cmp	r3, #0
 81015f4:	d00b      	beq.n	810160e <pvPortMalloc+0x17a>
	__asm volatile
 81015f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81015fa:	f383 8811 	msr	BASEPRI, r3
 81015fe:	f3bf 8f6f 	isb	sy
 8101602:	f3bf 8f4f 	dsb	sy
 8101606:	60fb      	str	r3, [r7, #12]
}
 8101608:	bf00      	nop
 810160a:	bf00      	nop
 810160c:	e7fd      	b.n	810160a <pvPortMalloc+0x176>
	return pvReturn;
 810160e:	69fb      	ldr	r3, [r7, #28]
}
 8101610:	4618      	mov	r0, r3
 8101612:	3728      	adds	r7, #40	@ 0x28
 8101614:	46bd      	mov	sp, r7
 8101616:	bd80      	pop	{r7, pc}
 8101618:	10003f7c 	.word	0x10003f7c
 810161c:	10003f90 	.word	0x10003f90
 8101620:	10003f80 	.word	0x10003f80
 8101624:	10003f74 	.word	0x10003f74
 8101628:	10003f84 	.word	0x10003f84
 810162c:	10003f88 	.word	0x10003f88

08101630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101630:	b580      	push	{r7, lr}
 8101632:	b086      	sub	sp, #24
 8101634:	af00      	add	r7, sp, #0
 8101636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	2b00      	cmp	r3, #0
 8101640:	d04f      	beq.n	81016e2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101642:	2308      	movs	r3, #8
 8101644:	425b      	negs	r3, r3
 8101646:	697a      	ldr	r2, [r7, #20]
 8101648:	4413      	add	r3, r2
 810164a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810164c:	697b      	ldr	r3, [r7, #20]
 810164e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101650:	693b      	ldr	r3, [r7, #16]
 8101652:	685a      	ldr	r2, [r3, #4]
 8101654:	4b25      	ldr	r3, [pc, #148]	@ (81016ec <vPortFree+0xbc>)
 8101656:	681b      	ldr	r3, [r3, #0]
 8101658:	4013      	ands	r3, r2
 810165a:	2b00      	cmp	r3, #0
 810165c:	d10b      	bne.n	8101676 <vPortFree+0x46>
	__asm volatile
 810165e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101662:	f383 8811 	msr	BASEPRI, r3
 8101666:	f3bf 8f6f 	isb	sy
 810166a:	f3bf 8f4f 	dsb	sy
 810166e:	60fb      	str	r3, [r7, #12]
}
 8101670:	bf00      	nop
 8101672:	bf00      	nop
 8101674:	e7fd      	b.n	8101672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101676:	693b      	ldr	r3, [r7, #16]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	2b00      	cmp	r3, #0
 810167c:	d00b      	beq.n	8101696 <vPortFree+0x66>
	__asm volatile
 810167e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101682:	f383 8811 	msr	BASEPRI, r3
 8101686:	f3bf 8f6f 	isb	sy
 810168a:	f3bf 8f4f 	dsb	sy
 810168e:	60bb      	str	r3, [r7, #8]
}
 8101690:	bf00      	nop
 8101692:	bf00      	nop
 8101694:	e7fd      	b.n	8101692 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101696:	693b      	ldr	r3, [r7, #16]
 8101698:	685a      	ldr	r2, [r3, #4]
 810169a:	4b14      	ldr	r3, [pc, #80]	@ (81016ec <vPortFree+0xbc>)
 810169c:	681b      	ldr	r3, [r3, #0]
 810169e:	4013      	ands	r3, r2
 81016a0:	2b00      	cmp	r3, #0
 81016a2:	d01e      	beq.n	81016e2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81016a4:	693b      	ldr	r3, [r7, #16]
 81016a6:	681b      	ldr	r3, [r3, #0]
 81016a8:	2b00      	cmp	r3, #0
 81016aa:	d11a      	bne.n	81016e2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81016ac:	693b      	ldr	r3, [r7, #16]
 81016ae:	685a      	ldr	r2, [r3, #4]
 81016b0:	4b0e      	ldr	r3, [pc, #56]	@ (81016ec <vPortFree+0xbc>)
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	43db      	mvns	r3, r3
 81016b6:	401a      	ands	r2, r3
 81016b8:	693b      	ldr	r3, [r7, #16]
 81016ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81016bc:	f000 fdec 	bl	8102298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81016c0:	693b      	ldr	r3, [r7, #16]
 81016c2:	685a      	ldr	r2, [r3, #4]
 81016c4:	4b0a      	ldr	r3, [pc, #40]	@ (81016f0 <vPortFree+0xc0>)
 81016c6:	681b      	ldr	r3, [r3, #0]
 81016c8:	4413      	add	r3, r2
 81016ca:	4a09      	ldr	r2, [pc, #36]	@ (81016f0 <vPortFree+0xc0>)
 81016cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81016ce:	6938      	ldr	r0, [r7, #16]
 81016d0:	f000 f874 	bl	81017bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81016d4:	4b07      	ldr	r3, [pc, #28]	@ (81016f4 <vPortFree+0xc4>)
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	3301      	adds	r3, #1
 81016da:	4a06      	ldr	r2, [pc, #24]	@ (81016f4 <vPortFree+0xc4>)
 81016dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81016de:	f000 fde9 	bl	81022b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81016e2:	bf00      	nop
 81016e4:	3718      	adds	r7, #24
 81016e6:	46bd      	mov	sp, r7
 81016e8:	bd80      	pop	{r7, pc}
 81016ea:	bf00      	nop
 81016ec:	10003f90 	.word	0x10003f90
 81016f0:	10003f80 	.word	0x10003f80
 81016f4:	10003f8c 	.word	0x10003f8c

081016f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81016f8:	b480      	push	{r7}
 81016fa:	b085      	sub	sp, #20
 81016fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81016fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8101702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8101704:	4b27      	ldr	r3, [pc, #156]	@ (81017a4 <prvHeapInit+0xac>)
 8101706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101708:	68fb      	ldr	r3, [r7, #12]
 810170a:	f003 0307 	and.w	r3, r3, #7
 810170e:	2b00      	cmp	r3, #0
 8101710:	d00c      	beq.n	810172c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8101712:	68fb      	ldr	r3, [r7, #12]
 8101714:	3307      	adds	r3, #7
 8101716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101718:	68fb      	ldr	r3, [r7, #12]
 810171a:	f023 0307 	bic.w	r3, r3, #7
 810171e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101720:	68ba      	ldr	r2, [r7, #8]
 8101722:	68fb      	ldr	r3, [r7, #12]
 8101724:	1ad3      	subs	r3, r2, r3
 8101726:	4a1f      	ldr	r2, [pc, #124]	@ (81017a4 <prvHeapInit+0xac>)
 8101728:	4413      	add	r3, r2
 810172a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810172c:	68fb      	ldr	r3, [r7, #12]
 810172e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101730:	4a1d      	ldr	r2, [pc, #116]	@ (81017a8 <prvHeapInit+0xb0>)
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101736:	4b1c      	ldr	r3, [pc, #112]	@ (81017a8 <prvHeapInit+0xb0>)
 8101738:	2200      	movs	r2, #0
 810173a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	68ba      	ldr	r2, [r7, #8]
 8101740:	4413      	add	r3, r2
 8101742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101744:	2208      	movs	r2, #8
 8101746:	68fb      	ldr	r3, [r7, #12]
 8101748:	1a9b      	subs	r3, r3, r2
 810174a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	f023 0307 	bic.w	r3, r3, #7
 8101752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101754:	68fb      	ldr	r3, [r7, #12]
 8101756:	4a15      	ldr	r2, [pc, #84]	@ (81017ac <prvHeapInit+0xb4>)
 8101758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810175a:	4b14      	ldr	r3, [pc, #80]	@ (81017ac <prvHeapInit+0xb4>)
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	2200      	movs	r2, #0
 8101760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101762:	4b12      	ldr	r3, [pc, #72]	@ (81017ac <prvHeapInit+0xb4>)
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	2200      	movs	r2, #0
 8101768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810176e:	683b      	ldr	r3, [r7, #0]
 8101770:	68fa      	ldr	r2, [r7, #12]
 8101772:	1ad2      	subs	r2, r2, r3
 8101774:	683b      	ldr	r3, [r7, #0]
 8101776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101778:	4b0c      	ldr	r3, [pc, #48]	@ (81017ac <prvHeapInit+0xb4>)
 810177a:	681a      	ldr	r2, [r3, #0]
 810177c:	683b      	ldr	r3, [r7, #0]
 810177e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101780:	683b      	ldr	r3, [r7, #0]
 8101782:	685b      	ldr	r3, [r3, #4]
 8101784:	4a0a      	ldr	r2, [pc, #40]	@ (81017b0 <prvHeapInit+0xb8>)
 8101786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101788:	683b      	ldr	r3, [r7, #0]
 810178a:	685b      	ldr	r3, [r3, #4]
 810178c:	4a09      	ldr	r2, [pc, #36]	@ (81017b4 <prvHeapInit+0xbc>)
 810178e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101790:	4b09      	ldr	r3, [pc, #36]	@ (81017b8 <prvHeapInit+0xc0>)
 8101792:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8101796:	601a      	str	r2, [r3, #0]
}
 8101798:	bf00      	nop
 810179a:	3714      	adds	r7, #20
 810179c:	46bd      	mov	sp, r7
 810179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a2:	4770      	bx	lr
 81017a4:	10000374 	.word	0x10000374
 81017a8:	10003f74 	.word	0x10003f74
 81017ac:	10003f7c 	.word	0x10003f7c
 81017b0:	10003f84 	.word	0x10003f84
 81017b4:	10003f80 	.word	0x10003f80
 81017b8:	10003f90 	.word	0x10003f90

081017bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81017bc:	b480      	push	{r7}
 81017be:	b085      	sub	sp, #20
 81017c0:	af00      	add	r7, sp, #0
 81017c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81017c4:	4b28      	ldr	r3, [pc, #160]	@ (8101868 <prvInsertBlockIntoFreeList+0xac>)
 81017c6:	60fb      	str	r3, [r7, #12]
 81017c8:	e002      	b.n	81017d0 <prvInsertBlockIntoFreeList+0x14>
 81017ca:	68fb      	ldr	r3, [r7, #12]
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	60fb      	str	r3, [r7, #12]
 81017d0:	68fb      	ldr	r3, [r7, #12]
 81017d2:	681b      	ldr	r3, [r3, #0]
 81017d4:	687a      	ldr	r2, [r7, #4]
 81017d6:	429a      	cmp	r2, r3
 81017d8:	d8f7      	bhi.n	81017ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81017da:	68fb      	ldr	r3, [r7, #12]
 81017dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81017de:	68fb      	ldr	r3, [r7, #12]
 81017e0:	685b      	ldr	r3, [r3, #4]
 81017e2:	68ba      	ldr	r2, [r7, #8]
 81017e4:	4413      	add	r3, r2
 81017e6:	687a      	ldr	r2, [r7, #4]
 81017e8:	429a      	cmp	r2, r3
 81017ea:	d108      	bne.n	81017fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81017ec:	68fb      	ldr	r3, [r7, #12]
 81017ee:	685a      	ldr	r2, [r3, #4]
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	685b      	ldr	r3, [r3, #4]
 81017f4:	441a      	add	r2, r3
 81017f6:	68fb      	ldr	r3, [r7, #12]
 81017f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81017fa:	68fb      	ldr	r3, [r7, #12]
 81017fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	685b      	ldr	r3, [r3, #4]
 8101806:	68ba      	ldr	r2, [r7, #8]
 8101808:	441a      	add	r2, r3
 810180a:	68fb      	ldr	r3, [r7, #12]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	429a      	cmp	r2, r3
 8101810:	d118      	bne.n	8101844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8101812:	68fb      	ldr	r3, [r7, #12]
 8101814:	681a      	ldr	r2, [r3, #0]
 8101816:	4b15      	ldr	r3, [pc, #84]	@ (810186c <prvInsertBlockIntoFreeList+0xb0>)
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	429a      	cmp	r2, r3
 810181c:	d00d      	beq.n	810183a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	685a      	ldr	r2, [r3, #4]
 8101822:	68fb      	ldr	r3, [r7, #12]
 8101824:	681b      	ldr	r3, [r3, #0]
 8101826:	685b      	ldr	r3, [r3, #4]
 8101828:	441a      	add	r2, r3
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810182e:	68fb      	ldr	r3, [r7, #12]
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	681a      	ldr	r2, [r3, #0]
 8101834:	687b      	ldr	r3, [r7, #4]
 8101836:	601a      	str	r2, [r3, #0]
 8101838:	e008      	b.n	810184c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810183a:	4b0c      	ldr	r3, [pc, #48]	@ (810186c <prvInsertBlockIntoFreeList+0xb0>)
 810183c:	681a      	ldr	r2, [r3, #0]
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	601a      	str	r2, [r3, #0]
 8101842:	e003      	b.n	810184c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8101844:	68fb      	ldr	r3, [r7, #12]
 8101846:	681a      	ldr	r2, [r3, #0]
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810184c:	68fa      	ldr	r2, [r7, #12]
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	429a      	cmp	r2, r3
 8101852:	d002      	beq.n	810185a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8101854:	68fb      	ldr	r3, [r7, #12]
 8101856:	687a      	ldr	r2, [r7, #4]
 8101858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810185a:	bf00      	nop
 810185c:	3714      	adds	r7, #20
 810185e:	46bd      	mov	sp, r7
 8101860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101864:	4770      	bx	lr
 8101866:	bf00      	nop
 8101868:	10003f74 	.word	0x10003f74
 810186c:	10003f7c 	.word	0x10003f7c

08101870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	f103 0208 	add.w	r2, r3, #8
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101882:	687b      	ldr	r3, [r7, #4]
 8101884:	f04f 32ff 	mov.w	r2, #4294967295
 8101888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	f103 0208 	add.w	r2, r3, #8
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101894:	687b      	ldr	r3, [r7, #4]
 8101896:	f103 0208 	add.w	r2, r3, #8
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	2200      	movs	r2, #0
 81018a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81018a4:	bf00      	nop
 81018a6:	370c      	adds	r7, #12
 81018a8:	46bd      	mov	sp, r7
 81018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ae:	4770      	bx	lr

081018b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81018b0:	b480      	push	{r7}
 81018b2:	b083      	sub	sp, #12
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	2200      	movs	r2, #0
 81018bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81018be:	bf00      	nop
 81018c0:	370c      	adds	r7, #12
 81018c2:	46bd      	mov	sp, r7
 81018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c8:	4770      	bx	lr

081018ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81018ca:	b480      	push	{r7}
 81018cc:	b085      	sub	sp, #20
 81018ce:	af00      	add	r7, sp, #0
 81018d0:	6078      	str	r0, [r7, #4]
 81018d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	685b      	ldr	r3, [r3, #4]
 81018d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81018da:	683b      	ldr	r3, [r7, #0]
 81018dc:	68fa      	ldr	r2, [r7, #12]
 81018de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81018e0:	68fb      	ldr	r3, [r7, #12]
 81018e2:	689a      	ldr	r2, [r3, #8]
 81018e4:	683b      	ldr	r3, [r7, #0]
 81018e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81018e8:	68fb      	ldr	r3, [r7, #12]
 81018ea:	689b      	ldr	r3, [r3, #8]
 81018ec:	683a      	ldr	r2, [r7, #0]
 81018ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	683a      	ldr	r2, [r7, #0]
 81018f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81018f6:	683b      	ldr	r3, [r7, #0]
 81018f8:	687a      	ldr	r2, [r7, #4]
 81018fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	1c5a      	adds	r2, r3, #1
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	601a      	str	r2, [r3, #0]
}
 8101906:	bf00      	nop
 8101908:	3714      	adds	r7, #20
 810190a:	46bd      	mov	sp, r7
 810190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101910:	4770      	bx	lr

08101912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101912:	b480      	push	{r7}
 8101914:	b085      	sub	sp, #20
 8101916:	af00      	add	r7, sp, #0
 8101918:	6078      	str	r0, [r7, #4]
 810191a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810191c:	683b      	ldr	r3, [r7, #0]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101922:	68bb      	ldr	r3, [r7, #8]
 8101924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101928:	d103      	bne.n	8101932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	691b      	ldr	r3, [r3, #16]
 810192e:	60fb      	str	r3, [r7, #12]
 8101930:	e00c      	b.n	810194c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	3308      	adds	r3, #8
 8101936:	60fb      	str	r3, [r7, #12]
 8101938:	e002      	b.n	8101940 <vListInsert+0x2e>
 810193a:	68fb      	ldr	r3, [r7, #12]
 810193c:	685b      	ldr	r3, [r3, #4]
 810193e:	60fb      	str	r3, [r7, #12]
 8101940:	68fb      	ldr	r3, [r7, #12]
 8101942:	685b      	ldr	r3, [r3, #4]
 8101944:	681b      	ldr	r3, [r3, #0]
 8101946:	68ba      	ldr	r2, [r7, #8]
 8101948:	429a      	cmp	r2, r3
 810194a:	d2f6      	bcs.n	810193a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810194c:	68fb      	ldr	r3, [r7, #12]
 810194e:	685a      	ldr	r2, [r3, #4]
 8101950:	683b      	ldr	r3, [r7, #0]
 8101952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101954:	683b      	ldr	r3, [r7, #0]
 8101956:	685b      	ldr	r3, [r3, #4]
 8101958:	683a      	ldr	r2, [r7, #0]
 810195a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810195c:	683b      	ldr	r3, [r7, #0]
 810195e:	68fa      	ldr	r2, [r7, #12]
 8101960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101962:	68fb      	ldr	r3, [r7, #12]
 8101964:	683a      	ldr	r2, [r7, #0]
 8101966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101968:	683b      	ldr	r3, [r7, #0]
 810196a:	687a      	ldr	r2, [r7, #4]
 810196c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	681b      	ldr	r3, [r3, #0]
 8101972:	1c5a      	adds	r2, r3, #1
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	601a      	str	r2, [r3, #0]
}
 8101978:	bf00      	nop
 810197a:	3714      	adds	r7, #20
 810197c:	46bd      	mov	sp, r7
 810197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101982:	4770      	bx	lr

08101984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101984:	b480      	push	{r7}
 8101986:	b085      	sub	sp, #20
 8101988:	af00      	add	r7, sp, #0
 810198a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	691b      	ldr	r3, [r3, #16]
 8101990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101992:	687b      	ldr	r3, [r7, #4]
 8101994:	685b      	ldr	r3, [r3, #4]
 8101996:	687a      	ldr	r2, [r7, #4]
 8101998:	6892      	ldr	r2, [r2, #8]
 810199a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	689b      	ldr	r3, [r3, #8]
 81019a0:	687a      	ldr	r2, [r7, #4]
 81019a2:	6852      	ldr	r2, [r2, #4]
 81019a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81019a6:	68fb      	ldr	r3, [r7, #12]
 81019a8:	685b      	ldr	r3, [r3, #4]
 81019aa:	687a      	ldr	r2, [r7, #4]
 81019ac:	429a      	cmp	r2, r3
 81019ae:	d103      	bne.n	81019b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81019b0:	687b      	ldr	r3, [r7, #4]
 81019b2:	689a      	ldr	r2, [r3, #8]
 81019b4:	68fb      	ldr	r3, [r7, #12]
 81019b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	2200      	movs	r2, #0
 81019bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81019be:	68fb      	ldr	r3, [r7, #12]
 81019c0:	681b      	ldr	r3, [r3, #0]
 81019c2:	1e5a      	subs	r2, r3, #1
 81019c4:	68fb      	ldr	r3, [r7, #12]
 81019c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81019c8:	68fb      	ldr	r3, [r7, #12]
 81019ca:	681b      	ldr	r3, [r3, #0]
}
 81019cc:	4618      	mov	r0, r3
 81019ce:	3714      	adds	r7, #20
 81019d0:	46bd      	mov	sp, r7
 81019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019d6:	4770      	bx	lr

081019d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81019d8:	b480      	push	{r7}
 81019da:	b085      	sub	sp, #20
 81019dc:	af00      	add	r7, sp, #0
 81019de:	60f8      	str	r0, [r7, #12]
 81019e0:	60b9      	str	r1, [r7, #8]
 81019e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81019e4:	68fb      	ldr	r3, [r7, #12]
 81019e6:	3b04      	subs	r3, #4
 81019e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81019ea:	68fb      	ldr	r3, [r7, #12]
 81019ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81019f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81019f2:	68fb      	ldr	r3, [r7, #12]
 81019f4:	3b04      	subs	r3, #4
 81019f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81019f8:	68bb      	ldr	r3, [r7, #8]
 81019fa:	f023 0201 	bic.w	r2, r3, #1
 81019fe:	68fb      	ldr	r3, [r7, #12]
 8101a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101a02:	68fb      	ldr	r3, [r7, #12]
 8101a04:	3b04      	subs	r3, #4
 8101a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101a08:	4a0c      	ldr	r2, [pc, #48]	@ (8101a3c <pxPortInitialiseStack+0x64>)
 8101a0a:	68fb      	ldr	r3, [r7, #12]
 8101a0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101a0e:	68fb      	ldr	r3, [r7, #12]
 8101a10:	3b14      	subs	r3, #20
 8101a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101a14:	687a      	ldr	r2, [r7, #4]
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101a1a:	68fb      	ldr	r3, [r7, #12]
 8101a1c:	3b04      	subs	r3, #4
 8101a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101a20:	68fb      	ldr	r3, [r7, #12]
 8101a22:	f06f 0202 	mvn.w	r2, #2
 8101a26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101a28:	68fb      	ldr	r3, [r7, #12]
 8101a2a:	3b20      	subs	r3, #32
 8101a2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101a2e:	68fb      	ldr	r3, [r7, #12]
}
 8101a30:	4618      	mov	r0, r3
 8101a32:	3714      	adds	r7, #20
 8101a34:	46bd      	mov	sp, r7
 8101a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a3a:	4770      	bx	lr
 8101a3c:	08101a41 	.word	0x08101a41

08101a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101a40:	b480      	push	{r7}
 8101a42:	b085      	sub	sp, #20
 8101a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8101a46:	2300      	movs	r3, #0
 8101a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101a4a:	4b13      	ldr	r3, [pc, #76]	@ (8101a98 <prvTaskExitError+0x58>)
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101a52:	d00b      	beq.n	8101a6c <prvTaskExitError+0x2c>
	__asm volatile
 8101a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a58:	f383 8811 	msr	BASEPRI, r3
 8101a5c:	f3bf 8f6f 	isb	sy
 8101a60:	f3bf 8f4f 	dsb	sy
 8101a64:	60fb      	str	r3, [r7, #12]
}
 8101a66:	bf00      	nop
 8101a68:	bf00      	nop
 8101a6a:	e7fd      	b.n	8101a68 <prvTaskExitError+0x28>
	__asm volatile
 8101a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a70:	f383 8811 	msr	BASEPRI, r3
 8101a74:	f3bf 8f6f 	isb	sy
 8101a78:	f3bf 8f4f 	dsb	sy
 8101a7c:	60bb      	str	r3, [r7, #8]
}
 8101a7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101a80:	bf00      	nop
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d0fc      	beq.n	8101a82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101a88:	bf00      	nop
 8101a8a:	bf00      	nop
 8101a8c:	3714      	adds	r7, #20
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a94:	4770      	bx	lr
 8101a96:	bf00      	nop
 8101a98:	10000010 	.word	0x10000010
 8101a9c:	00000000 	.word	0x00000000

08101aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101aa0:	4b07      	ldr	r3, [pc, #28]	@ (8101ac0 <pxCurrentTCBConst2>)
 8101aa2:	6819      	ldr	r1, [r3, #0]
 8101aa4:	6808      	ldr	r0, [r1, #0]
 8101aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101aaa:	f380 8809 	msr	PSP, r0
 8101aae:	f3bf 8f6f 	isb	sy
 8101ab2:	f04f 0000 	mov.w	r0, #0
 8101ab6:	f380 8811 	msr	BASEPRI, r0
 8101aba:	4770      	bx	lr
 8101abc:	f3af 8000 	nop.w

08101ac0 <pxCurrentTCBConst2>:
 8101ac0:	10003f9c 	.word	0x10003f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101ac4:	bf00      	nop
 8101ac6:	bf00      	nop

08101ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101ac8:	4808      	ldr	r0, [pc, #32]	@ (8101aec <prvPortStartFirstTask+0x24>)
 8101aca:	6800      	ldr	r0, [r0, #0]
 8101acc:	6800      	ldr	r0, [r0, #0]
 8101ace:	f380 8808 	msr	MSP, r0
 8101ad2:	f04f 0000 	mov.w	r0, #0
 8101ad6:	f380 8814 	msr	CONTROL, r0
 8101ada:	b662      	cpsie	i
 8101adc:	b661      	cpsie	f
 8101ade:	f3bf 8f4f 	dsb	sy
 8101ae2:	f3bf 8f6f 	isb	sy
 8101ae6:	df00      	svc	0
 8101ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8101aea:	bf00      	nop
 8101aec:	e000ed08 	.word	0xe000ed08

08101af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101af0:	b580      	push	{r7, lr}
 8101af2:	b086      	sub	sp, #24
 8101af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101af6:	4b47      	ldr	r3, [pc, #284]	@ (8101c14 <xPortStartScheduler+0x124>)
 8101af8:	681b      	ldr	r3, [r3, #0]
 8101afa:	4a47      	ldr	r2, [pc, #284]	@ (8101c18 <xPortStartScheduler+0x128>)
 8101afc:	4293      	cmp	r3, r2
 8101afe:	d10b      	bne.n	8101b18 <xPortStartScheduler+0x28>
	__asm volatile
 8101b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101b04:	f383 8811 	msr	BASEPRI, r3
 8101b08:	f3bf 8f6f 	isb	sy
 8101b0c:	f3bf 8f4f 	dsb	sy
 8101b10:	60fb      	str	r3, [r7, #12]
}
 8101b12:	bf00      	nop
 8101b14:	bf00      	nop
 8101b16:	e7fd      	b.n	8101b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101b18:	4b3e      	ldr	r3, [pc, #248]	@ (8101c14 <xPortStartScheduler+0x124>)
 8101b1a:	681b      	ldr	r3, [r3, #0]
 8101b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8101c1c <xPortStartScheduler+0x12c>)
 8101b1e:	4293      	cmp	r3, r2
 8101b20:	d10b      	bne.n	8101b3a <xPortStartScheduler+0x4a>
	__asm volatile
 8101b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101b26:	f383 8811 	msr	BASEPRI, r3
 8101b2a:	f3bf 8f6f 	isb	sy
 8101b2e:	f3bf 8f4f 	dsb	sy
 8101b32:	613b      	str	r3, [r7, #16]
}
 8101b34:	bf00      	nop
 8101b36:	bf00      	nop
 8101b38:	e7fd      	b.n	8101b36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8101b3a:	4b39      	ldr	r3, [pc, #228]	@ (8101c20 <xPortStartScheduler+0x130>)
 8101b3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8101b3e:	697b      	ldr	r3, [r7, #20]
 8101b40:	781b      	ldrb	r3, [r3, #0]
 8101b42:	b2db      	uxtb	r3, r3
 8101b44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8101b46:	697b      	ldr	r3, [r7, #20]
 8101b48:	22ff      	movs	r2, #255	@ 0xff
 8101b4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8101b4c:	697b      	ldr	r3, [r7, #20]
 8101b4e:	781b      	ldrb	r3, [r3, #0]
 8101b50:	b2db      	uxtb	r3, r3
 8101b52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8101b54:	78fb      	ldrb	r3, [r7, #3]
 8101b56:	b2db      	uxtb	r3, r3
 8101b58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8101b5c:	b2da      	uxtb	r2, r3
 8101b5e:	4b31      	ldr	r3, [pc, #196]	@ (8101c24 <xPortStartScheduler+0x134>)
 8101b60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8101b62:	4b31      	ldr	r3, [pc, #196]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101b64:	2207      	movs	r2, #7
 8101b66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101b68:	e009      	b.n	8101b7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8101b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	3b01      	subs	r3, #1
 8101b70:	4a2d      	ldr	r2, [pc, #180]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101b72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101b74:	78fb      	ldrb	r3, [r7, #3]
 8101b76:	b2db      	uxtb	r3, r3
 8101b78:	005b      	lsls	r3, r3, #1
 8101b7a:	b2db      	uxtb	r3, r3
 8101b7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101b7e:	78fb      	ldrb	r3, [r7, #3]
 8101b80:	b2db      	uxtb	r3, r3
 8101b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101b86:	2b80      	cmp	r3, #128	@ 0x80
 8101b88:	d0ef      	beq.n	8101b6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101b8a:	4b27      	ldr	r3, [pc, #156]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101b8c:	681b      	ldr	r3, [r3, #0]
 8101b8e:	f1c3 0307 	rsb	r3, r3, #7
 8101b92:	2b04      	cmp	r3, #4
 8101b94:	d00b      	beq.n	8101bae <xPortStartScheduler+0xbe>
	__asm volatile
 8101b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101b9a:	f383 8811 	msr	BASEPRI, r3
 8101b9e:	f3bf 8f6f 	isb	sy
 8101ba2:	f3bf 8f4f 	dsb	sy
 8101ba6:	60bb      	str	r3, [r7, #8]
}
 8101ba8:	bf00      	nop
 8101baa:	bf00      	nop
 8101bac:	e7fd      	b.n	8101baa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101bae:	4b1e      	ldr	r3, [pc, #120]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	021b      	lsls	r3, r3, #8
 8101bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101bb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8101bc0:	4a19      	ldr	r2, [pc, #100]	@ (8101c28 <xPortStartScheduler+0x138>)
 8101bc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	b2da      	uxtb	r2, r3
 8101bc8:	697b      	ldr	r3, [r7, #20]
 8101bca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101bcc:	4b17      	ldr	r3, [pc, #92]	@ (8101c2c <xPortStartScheduler+0x13c>)
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	4a16      	ldr	r2, [pc, #88]	@ (8101c2c <xPortStartScheduler+0x13c>)
 8101bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101bd8:	4b14      	ldr	r3, [pc, #80]	@ (8101c2c <xPortStartScheduler+0x13c>)
 8101bda:	681b      	ldr	r3, [r3, #0]
 8101bdc:	4a13      	ldr	r2, [pc, #76]	@ (8101c2c <xPortStartScheduler+0x13c>)
 8101bde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8101be2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8101be4:	f000 f8da 	bl	8101d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8101be8:	4b11      	ldr	r3, [pc, #68]	@ (8101c30 <xPortStartScheduler+0x140>)
 8101bea:	2200      	movs	r2, #0
 8101bec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8101bee:	f000 f8f9 	bl	8101de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8101bf2:	4b10      	ldr	r3, [pc, #64]	@ (8101c34 <xPortStartScheduler+0x144>)
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8101c34 <xPortStartScheduler+0x144>)
 8101bf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8101bfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8101bfe:	f7ff ff63 	bl	8101ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8101c02:	f000 fcaf 	bl	8102564 <vTaskSwitchContext>
	prvTaskExitError();
 8101c06:	f7ff ff1b 	bl	8101a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8101c0a:	2300      	movs	r3, #0
}
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	3718      	adds	r7, #24
 8101c10:	46bd      	mov	sp, r7
 8101c12:	bd80      	pop	{r7, pc}
 8101c14:	e000ed00 	.word	0xe000ed00
 8101c18:	410fc271 	.word	0x410fc271
 8101c1c:	410fc270 	.word	0x410fc270
 8101c20:	e000e400 	.word	0xe000e400
 8101c24:	10003f94 	.word	0x10003f94
 8101c28:	10003f98 	.word	0x10003f98
 8101c2c:	e000ed20 	.word	0xe000ed20
 8101c30:	10000010 	.word	0x10000010
 8101c34:	e000ef34 	.word	0xe000ef34

08101c38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8101c38:	b480      	push	{r7}
 8101c3a:	b083      	sub	sp, #12
 8101c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8101c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c42:	f383 8811 	msr	BASEPRI, r3
 8101c46:	f3bf 8f6f 	isb	sy
 8101c4a:	f3bf 8f4f 	dsb	sy
 8101c4e:	607b      	str	r3, [r7, #4]
}
 8101c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8101c52:	4b10      	ldr	r3, [pc, #64]	@ (8101c94 <vPortEnterCritical+0x5c>)
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	3301      	adds	r3, #1
 8101c58:	4a0e      	ldr	r2, [pc, #56]	@ (8101c94 <vPortEnterCritical+0x5c>)
 8101c5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8101c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8101c94 <vPortEnterCritical+0x5c>)
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	2b01      	cmp	r3, #1
 8101c62:	d110      	bne.n	8101c86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101c64:	4b0c      	ldr	r3, [pc, #48]	@ (8101c98 <vPortEnterCritical+0x60>)
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	b2db      	uxtb	r3, r3
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d00b      	beq.n	8101c86 <vPortEnterCritical+0x4e>
	__asm volatile
 8101c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c72:	f383 8811 	msr	BASEPRI, r3
 8101c76:	f3bf 8f6f 	isb	sy
 8101c7a:	f3bf 8f4f 	dsb	sy
 8101c7e:	603b      	str	r3, [r7, #0]
}
 8101c80:	bf00      	nop
 8101c82:	bf00      	nop
 8101c84:	e7fd      	b.n	8101c82 <vPortEnterCritical+0x4a>
	}
}
 8101c86:	bf00      	nop
 8101c88:	370c      	adds	r7, #12
 8101c8a:	46bd      	mov	sp, r7
 8101c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c90:	4770      	bx	lr
 8101c92:	bf00      	nop
 8101c94:	10000010 	.word	0x10000010
 8101c98:	e000ed04 	.word	0xe000ed04

08101c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8101c9c:	b480      	push	{r7}
 8101c9e:	b083      	sub	sp, #12
 8101ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8101ca2:	4b12      	ldr	r3, [pc, #72]	@ (8101cec <vPortExitCritical+0x50>)
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	2b00      	cmp	r3, #0
 8101ca8:	d10b      	bne.n	8101cc2 <vPortExitCritical+0x26>
	__asm volatile
 8101caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101cae:	f383 8811 	msr	BASEPRI, r3
 8101cb2:	f3bf 8f6f 	isb	sy
 8101cb6:	f3bf 8f4f 	dsb	sy
 8101cba:	607b      	str	r3, [r7, #4]
}
 8101cbc:	bf00      	nop
 8101cbe:	bf00      	nop
 8101cc0:	e7fd      	b.n	8101cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8101cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8101cec <vPortExitCritical+0x50>)
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	3b01      	subs	r3, #1
 8101cc8:	4a08      	ldr	r2, [pc, #32]	@ (8101cec <vPortExitCritical+0x50>)
 8101cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8101ccc:	4b07      	ldr	r3, [pc, #28]	@ (8101cec <vPortExitCritical+0x50>)
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d105      	bne.n	8101ce0 <vPortExitCritical+0x44>
 8101cd4:	2300      	movs	r3, #0
 8101cd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8101cd8:	683b      	ldr	r3, [r7, #0]
 8101cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8101cde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8101ce0:	bf00      	nop
 8101ce2:	370c      	adds	r7, #12
 8101ce4:	46bd      	mov	sp, r7
 8101ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cea:	4770      	bx	lr
 8101cec:	10000010 	.word	0x10000010

08101cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8101cf0:	f3ef 8009 	mrs	r0, PSP
 8101cf4:	f3bf 8f6f 	isb	sy
 8101cf8:	4b15      	ldr	r3, [pc, #84]	@ (8101d50 <pxCurrentTCBConst>)
 8101cfa:	681a      	ldr	r2, [r3, #0]
 8101cfc:	f01e 0f10 	tst.w	lr, #16
 8101d00:	bf08      	it	eq
 8101d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8101d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101d0a:	6010      	str	r0, [r2, #0]
 8101d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8101d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8101d14:	f380 8811 	msr	BASEPRI, r0
 8101d18:	f3bf 8f4f 	dsb	sy
 8101d1c:	f3bf 8f6f 	isb	sy
 8101d20:	f000 fc20 	bl	8102564 <vTaskSwitchContext>
 8101d24:	f04f 0000 	mov.w	r0, #0
 8101d28:	f380 8811 	msr	BASEPRI, r0
 8101d2c:	bc09      	pop	{r0, r3}
 8101d2e:	6819      	ldr	r1, [r3, #0]
 8101d30:	6808      	ldr	r0, [r1, #0]
 8101d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101d36:	f01e 0f10 	tst.w	lr, #16
 8101d3a:	bf08      	it	eq
 8101d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8101d40:	f380 8809 	msr	PSP, r0
 8101d44:	f3bf 8f6f 	isb	sy
 8101d48:	4770      	bx	lr
 8101d4a:	bf00      	nop
 8101d4c:	f3af 8000 	nop.w

08101d50 <pxCurrentTCBConst>:
 8101d50:	10003f9c 	.word	0x10003f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8101d54:	bf00      	nop
 8101d56:	bf00      	nop

08101d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8101d58:	b580      	push	{r7, lr}
 8101d5a:	b082      	sub	sp, #8
 8101d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8101d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101d62:	f383 8811 	msr	BASEPRI, r3
 8101d66:	f3bf 8f6f 	isb	sy
 8101d6a:	f3bf 8f4f 	dsb	sy
 8101d6e:	607b      	str	r3, [r7, #4]
}
 8101d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101d72:	f000 fb3d 	bl	81023f0 <xTaskIncrementTick>
 8101d76:	4603      	mov	r3, r0
 8101d78:	2b00      	cmp	r3, #0
 8101d7a:	d003      	beq.n	8101d84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8101d7c:	4b06      	ldr	r3, [pc, #24]	@ (8101d98 <SysTick_Handler+0x40>)
 8101d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101d82:	601a      	str	r2, [r3, #0]
 8101d84:	2300      	movs	r3, #0
 8101d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101d88:	683b      	ldr	r3, [r7, #0]
 8101d8a:	f383 8811 	msr	BASEPRI, r3
}
 8101d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101d90:	bf00      	nop
 8101d92:	3708      	adds	r7, #8
 8101d94:	46bd      	mov	sp, r7
 8101d96:	bd80      	pop	{r7, pc}
 8101d98:	e000ed04 	.word	0xe000ed04

08101d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8101d9c:	b480      	push	{r7}
 8101d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8101da0:	4b0b      	ldr	r3, [pc, #44]	@ (8101dd0 <vPortSetupTimerInterrupt+0x34>)
 8101da2:	2200      	movs	r2, #0
 8101da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8101da6:	4b0b      	ldr	r3, [pc, #44]	@ (8101dd4 <vPortSetupTimerInterrupt+0x38>)
 8101da8:	2200      	movs	r2, #0
 8101daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8101dac:	4b0a      	ldr	r3, [pc, #40]	@ (8101dd8 <vPortSetupTimerInterrupt+0x3c>)
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	4a0a      	ldr	r2, [pc, #40]	@ (8101ddc <vPortSetupTimerInterrupt+0x40>)
 8101db2:	fba2 2303 	umull	r2, r3, r2, r3
 8101db6:	099b      	lsrs	r3, r3, #6
 8101db8:	4a09      	ldr	r2, [pc, #36]	@ (8101de0 <vPortSetupTimerInterrupt+0x44>)
 8101dba:	3b01      	subs	r3, #1
 8101dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8101dbe:	4b04      	ldr	r3, [pc, #16]	@ (8101dd0 <vPortSetupTimerInterrupt+0x34>)
 8101dc0:	2207      	movs	r2, #7
 8101dc2:	601a      	str	r2, [r3, #0]
}
 8101dc4:	bf00      	nop
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dcc:	4770      	bx	lr
 8101dce:	bf00      	nop
 8101dd0:	e000e010 	.word	0xe000e010
 8101dd4:	e000e018 	.word	0xe000e018
 8101dd8:	10000004 	.word	0x10000004
 8101ddc:	10624dd3 	.word	0x10624dd3
 8101de0:	e000e014 	.word	0xe000e014

08101de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8101de4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8101df4 <vPortEnableVFP+0x10>
 8101de8:	6801      	ldr	r1, [r0, #0]
 8101dea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8101dee:	6001      	str	r1, [r0, #0]
 8101df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8101df2:	bf00      	nop
 8101df4:	e000ed88 	.word	0xe000ed88

08101df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8101df8:	b580      	push	{r7, lr}
 8101dfa:	b08e      	sub	sp, #56	@ 0x38
 8101dfc:	af04      	add	r7, sp, #16
 8101dfe:	60f8      	str	r0, [r7, #12]
 8101e00:	60b9      	str	r1, [r7, #8]
 8101e02:	607a      	str	r2, [r7, #4]
 8101e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8101e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	d10b      	bne.n	8101e24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8101e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e10:	f383 8811 	msr	BASEPRI, r3
 8101e14:	f3bf 8f6f 	isb	sy
 8101e18:	f3bf 8f4f 	dsb	sy
 8101e1c:	623b      	str	r3, [r7, #32]
}
 8101e1e:	bf00      	nop
 8101e20:	bf00      	nop
 8101e22:	e7fd      	b.n	8101e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8101e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e26:	2b00      	cmp	r3, #0
 8101e28:	d10b      	bne.n	8101e42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8101e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e2e:	f383 8811 	msr	BASEPRI, r3
 8101e32:	f3bf 8f6f 	isb	sy
 8101e36:	f3bf 8f4f 	dsb	sy
 8101e3a:	61fb      	str	r3, [r7, #28]
}
 8101e3c:	bf00      	nop
 8101e3e:	bf00      	nop
 8101e40:	e7fd      	b.n	8101e3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8101e42:	23a0      	movs	r3, #160	@ 0xa0
 8101e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8101e46:	693b      	ldr	r3, [r7, #16]
 8101e48:	2ba0      	cmp	r3, #160	@ 0xa0
 8101e4a:	d00b      	beq.n	8101e64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8101e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e50:	f383 8811 	msr	BASEPRI, r3
 8101e54:	f3bf 8f6f 	isb	sy
 8101e58:	f3bf 8f4f 	dsb	sy
 8101e5c:	61bb      	str	r3, [r7, #24]
}
 8101e5e:	bf00      	nop
 8101e60:	bf00      	nop
 8101e62:	e7fd      	b.n	8101e60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8101e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8101e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d01e      	beq.n	8101eaa <xTaskCreateStatic+0xb2>
 8101e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101e6e:	2b00      	cmp	r3, #0
 8101e70:	d01b      	beq.n	8101eaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8101e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8101e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8101e7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8101e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101e7e:	2202      	movs	r2, #2
 8101e80:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8101e84:	2300      	movs	r3, #0
 8101e86:	9303      	str	r3, [sp, #12]
 8101e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101e8a:	9302      	str	r3, [sp, #8]
 8101e8c:	f107 0314 	add.w	r3, r7, #20
 8101e90:	9301      	str	r3, [sp, #4]
 8101e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101e94:	9300      	str	r3, [sp, #0]
 8101e96:	683b      	ldr	r3, [r7, #0]
 8101e98:	687a      	ldr	r2, [r7, #4]
 8101e9a:	68b9      	ldr	r1, [r7, #8]
 8101e9c:	68f8      	ldr	r0, [r7, #12]
 8101e9e:	f000 f851 	bl	8101f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8101ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101ea4:	f000 f8ee 	bl	8102084 <prvAddNewTaskToReadyList>
 8101ea8:	e001      	b.n	8101eae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8101eaa:	2300      	movs	r3, #0
 8101eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8101eae:	697b      	ldr	r3, [r7, #20]
	}
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	3728      	adds	r7, #40	@ 0x28
 8101eb4:	46bd      	mov	sp, r7
 8101eb6:	bd80      	pop	{r7, pc}

08101eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8101eb8:	b580      	push	{r7, lr}
 8101eba:	b08c      	sub	sp, #48	@ 0x30
 8101ebc:	af04      	add	r7, sp, #16
 8101ebe:	60f8      	str	r0, [r7, #12]
 8101ec0:	60b9      	str	r1, [r7, #8]
 8101ec2:	603b      	str	r3, [r7, #0]
 8101ec4:	4613      	mov	r3, r2
 8101ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8101ec8:	88fb      	ldrh	r3, [r7, #6]
 8101eca:	009b      	lsls	r3, r3, #2
 8101ecc:	4618      	mov	r0, r3
 8101ece:	f7ff fae1 	bl	8101494 <pvPortMalloc>
 8101ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8101ed4:	697b      	ldr	r3, [r7, #20]
 8101ed6:	2b00      	cmp	r3, #0
 8101ed8:	d00e      	beq.n	8101ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8101eda:	20a0      	movs	r0, #160	@ 0xa0
 8101edc:	f7ff fada 	bl	8101494 <pvPortMalloc>
 8101ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8101ee2:	69fb      	ldr	r3, [r7, #28]
 8101ee4:	2b00      	cmp	r3, #0
 8101ee6:	d003      	beq.n	8101ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8101ee8:	69fb      	ldr	r3, [r7, #28]
 8101eea:	697a      	ldr	r2, [r7, #20]
 8101eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8101eee:	e005      	b.n	8101efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8101ef0:	6978      	ldr	r0, [r7, #20]
 8101ef2:	f7ff fb9d 	bl	8101630 <vPortFree>
 8101ef6:	e001      	b.n	8101efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8101efc:	69fb      	ldr	r3, [r7, #28]
 8101efe:	2b00      	cmp	r3, #0
 8101f00:	d017      	beq.n	8101f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8101f02:	69fb      	ldr	r3, [r7, #28]
 8101f04:	2200      	movs	r2, #0
 8101f06:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8101f0a:	88fa      	ldrh	r2, [r7, #6]
 8101f0c:	2300      	movs	r3, #0
 8101f0e:	9303      	str	r3, [sp, #12]
 8101f10:	69fb      	ldr	r3, [r7, #28]
 8101f12:	9302      	str	r3, [sp, #8]
 8101f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101f16:	9301      	str	r3, [sp, #4]
 8101f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f1a:	9300      	str	r3, [sp, #0]
 8101f1c:	683b      	ldr	r3, [r7, #0]
 8101f1e:	68b9      	ldr	r1, [r7, #8]
 8101f20:	68f8      	ldr	r0, [r7, #12]
 8101f22:	f000 f80f 	bl	8101f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8101f26:	69f8      	ldr	r0, [r7, #28]
 8101f28:	f000 f8ac 	bl	8102084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8101f2c:	2301      	movs	r3, #1
 8101f2e:	61bb      	str	r3, [r7, #24]
 8101f30:	e002      	b.n	8101f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8101f32:	f04f 33ff 	mov.w	r3, #4294967295
 8101f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8101f38:	69bb      	ldr	r3, [r7, #24]
	}
 8101f3a:	4618      	mov	r0, r3
 8101f3c:	3720      	adds	r7, #32
 8101f3e:	46bd      	mov	sp, r7
 8101f40:	bd80      	pop	{r7, pc}
	...

08101f44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8101f44:	b580      	push	{r7, lr}
 8101f46:	b088      	sub	sp, #32
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	60f8      	str	r0, [r7, #12]
 8101f4c:	60b9      	str	r1, [r7, #8]
 8101f4e:	607a      	str	r2, [r7, #4]
 8101f50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8101f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8101f5c:	3b01      	subs	r3, #1
 8101f5e:	009b      	lsls	r3, r3, #2
 8101f60:	4413      	add	r3, r2
 8101f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8101f64:	69bb      	ldr	r3, [r7, #24]
 8101f66:	f023 0307 	bic.w	r3, r3, #7
 8101f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8101f6c:	69bb      	ldr	r3, [r7, #24]
 8101f6e:	f003 0307 	and.w	r3, r3, #7
 8101f72:	2b00      	cmp	r3, #0
 8101f74:	d00b      	beq.n	8101f8e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8101f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101f7a:	f383 8811 	msr	BASEPRI, r3
 8101f7e:	f3bf 8f6f 	isb	sy
 8101f82:	f3bf 8f4f 	dsb	sy
 8101f86:	617b      	str	r3, [r7, #20]
}
 8101f88:	bf00      	nop
 8101f8a:	bf00      	nop
 8101f8c:	e7fd      	b.n	8101f8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8101f8e:	68bb      	ldr	r3, [r7, #8]
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d01f      	beq.n	8101fd4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8101f94:	2300      	movs	r3, #0
 8101f96:	61fb      	str	r3, [r7, #28]
 8101f98:	e012      	b.n	8101fc0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8101f9a:	68ba      	ldr	r2, [r7, #8]
 8101f9c:	69fb      	ldr	r3, [r7, #28]
 8101f9e:	4413      	add	r3, r2
 8101fa0:	7819      	ldrb	r1, [r3, #0]
 8101fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8101fa4:	69fb      	ldr	r3, [r7, #28]
 8101fa6:	4413      	add	r3, r2
 8101fa8:	3334      	adds	r3, #52	@ 0x34
 8101faa:	460a      	mov	r2, r1
 8101fac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8101fae:	68ba      	ldr	r2, [r7, #8]
 8101fb0:	69fb      	ldr	r3, [r7, #28]
 8101fb2:	4413      	add	r3, r2
 8101fb4:	781b      	ldrb	r3, [r3, #0]
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	d006      	beq.n	8101fc8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8101fba:	69fb      	ldr	r3, [r7, #28]
 8101fbc:	3301      	adds	r3, #1
 8101fbe:	61fb      	str	r3, [r7, #28]
 8101fc0:	69fb      	ldr	r3, [r7, #28]
 8101fc2:	2b0f      	cmp	r3, #15
 8101fc4:	d9e9      	bls.n	8101f9a <prvInitialiseNewTask+0x56>
 8101fc6:	e000      	b.n	8101fca <prvInitialiseNewTask+0x86>
			{
				break;
 8101fc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8101fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101fcc:	2200      	movs	r2, #0
 8101fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8101fd2:	e003      	b.n	8101fdc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8101fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101fd6:	2200      	movs	r2, #0
 8101fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8101fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101fde:	2b06      	cmp	r3, #6
 8101fe0:	d901      	bls.n	8101fe6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8101fe2:	2306      	movs	r3, #6
 8101fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8101fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101fea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8101fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101ff0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8101ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ff4:	2200      	movs	r2, #0
 8101ff6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8101ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ffa:	3304      	adds	r3, #4
 8101ffc:	4618      	mov	r0, r3
 8101ffe:	f7ff fc57 	bl	81018b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8102002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102004:	3318      	adds	r3, #24
 8102006:	4618      	mov	r0, r3
 8102008:	f7ff fc52 	bl	81018b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810200e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102010:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102014:	f1c3 0207 	rsb	r2, r3, #7
 8102018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810201a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810201e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102020:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8102022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102024:	2200      	movs	r2, #0
 8102026:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810202c:	2200      	movs	r2, #0
 810202e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8102032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102034:	334c      	adds	r3, #76	@ 0x4c
 8102036:	224c      	movs	r2, #76	@ 0x4c
 8102038:	2100      	movs	r1, #0
 810203a:	4618      	mov	r0, r3
 810203c:	f000 fc38 	bl	81028b0 <memset>
 8102040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102042:	4a0d      	ldr	r2, [pc, #52]	@ (8102078 <prvInitialiseNewTask+0x134>)
 8102044:	651a      	str	r2, [r3, #80]	@ 0x50
 8102046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102048:	4a0c      	ldr	r2, [pc, #48]	@ (810207c <prvInitialiseNewTask+0x138>)
 810204a:	655a      	str	r2, [r3, #84]	@ 0x54
 810204c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810204e:	4a0c      	ldr	r2, [pc, #48]	@ (8102080 <prvInitialiseNewTask+0x13c>)
 8102050:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8102052:	683a      	ldr	r2, [r7, #0]
 8102054:	68f9      	ldr	r1, [r7, #12]
 8102056:	69b8      	ldr	r0, [r7, #24]
 8102058:	f7ff fcbe 	bl	81019d8 <pxPortInitialiseStack>
 810205c:	4602      	mov	r2, r0
 810205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102060:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102064:	2b00      	cmp	r3, #0
 8102066:	d002      	beq.n	810206e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8102068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810206a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810206c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810206e:	bf00      	nop
 8102070:	3720      	adds	r7, #32
 8102072:	46bd      	mov	sp, r7
 8102074:	bd80      	pop	{r7, pc}
 8102076:	bf00      	nop
 8102078:	100040c8 	.word	0x100040c8
 810207c:	10004130 	.word	0x10004130
 8102080:	10004198 	.word	0x10004198

08102084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8102084:	b580      	push	{r7, lr}
 8102086:	b082      	sub	sp, #8
 8102088:	af00      	add	r7, sp, #0
 810208a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810208c:	f7ff fdd4 	bl	8101c38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8102090:	4b2a      	ldr	r3, [pc, #168]	@ (810213c <prvAddNewTaskToReadyList+0xb8>)
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	3301      	adds	r3, #1
 8102096:	4a29      	ldr	r2, [pc, #164]	@ (810213c <prvAddNewTaskToReadyList+0xb8>)
 8102098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810209a:	4b29      	ldr	r3, [pc, #164]	@ (8102140 <prvAddNewTaskToReadyList+0xbc>)
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d109      	bne.n	81020b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81020a2:	4a27      	ldr	r2, [pc, #156]	@ (8102140 <prvAddNewTaskToReadyList+0xbc>)
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81020a8:	4b24      	ldr	r3, [pc, #144]	@ (810213c <prvAddNewTaskToReadyList+0xb8>)
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	2b01      	cmp	r3, #1
 81020ae:	d110      	bne.n	81020d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81020b0:	f000 fad4 	bl	810265c <prvInitialiseTaskLists>
 81020b4:	e00d      	b.n	81020d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81020b6:	4b23      	ldr	r3, [pc, #140]	@ (8102144 <prvAddNewTaskToReadyList+0xc0>)
 81020b8:	681b      	ldr	r3, [r3, #0]
 81020ba:	2b00      	cmp	r3, #0
 81020bc:	d109      	bne.n	81020d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81020be:	4b20      	ldr	r3, [pc, #128]	@ (8102140 <prvAddNewTaskToReadyList+0xbc>)
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81020c8:	429a      	cmp	r2, r3
 81020ca:	d802      	bhi.n	81020d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81020cc:	4a1c      	ldr	r2, [pc, #112]	@ (8102140 <prvAddNewTaskToReadyList+0xbc>)
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8102148 <prvAddNewTaskToReadyList+0xc4>)
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	3301      	adds	r3, #1
 81020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8102148 <prvAddNewTaskToReadyList+0xc4>)
 81020da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81020e0:	2201      	movs	r2, #1
 81020e2:	409a      	lsls	r2, r3
 81020e4:	4b19      	ldr	r3, [pc, #100]	@ (810214c <prvAddNewTaskToReadyList+0xc8>)
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	4313      	orrs	r3, r2
 81020ea:	4a18      	ldr	r2, [pc, #96]	@ (810214c <prvAddNewTaskToReadyList+0xc8>)
 81020ec:	6013      	str	r3, [r2, #0]
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81020f2:	4613      	mov	r3, r2
 81020f4:	009b      	lsls	r3, r3, #2
 81020f6:	4413      	add	r3, r2
 81020f8:	009b      	lsls	r3, r3, #2
 81020fa:	4a15      	ldr	r2, [pc, #84]	@ (8102150 <prvAddNewTaskToReadyList+0xcc>)
 81020fc:	441a      	add	r2, r3
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	3304      	adds	r3, #4
 8102102:	4619      	mov	r1, r3
 8102104:	4610      	mov	r0, r2
 8102106:	f7ff fbe0 	bl	81018ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810210a:	f7ff fdc7 	bl	8101c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810210e:	4b0d      	ldr	r3, [pc, #52]	@ (8102144 <prvAddNewTaskToReadyList+0xc0>)
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	2b00      	cmp	r3, #0
 8102114:	d00e      	beq.n	8102134 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8102116:	4b0a      	ldr	r3, [pc, #40]	@ (8102140 <prvAddNewTaskToReadyList+0xbc>)
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102120:	429a      	cmp	r2, r3
 8102122:	d207      	bcs.n	8102134 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8102124:	4b0b      	ldr	r3, [pc, #44]	@ (8102154 <prvAddNewTaskToReadyList+0xd0>)
 8102126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810212a:	601a      	str	r2, [r3, #0]
 810212c:	f3bf 8f4f 	dsb	sy
 8102130:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102134:	bf00      	nop
 8102136:	3708      	adds	r7, #8
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}
 810213c:	1000409c 	.word	0x1000409c
 8102140:	10003f9c 	.word	0x10003f9c
 8102144:	100040a8 	.word	0x100040a8
 8102148:	100040b8 	.word	0x100040b8
 810214c:	100040a4 	.word	0x100040a4
 8102150:	10003fa0 	.word	0x10003fa0
 8102154:	e000ed04 	.word	0xe000ed04

08102158 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8102158:	b580      	push	{r7, lr}
 810215a:	b084      	sub	sp, #16
 810215c:	af00      	add	r7, sp, #0
 810215e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8102160:	2300      	movs	r3, #0
 8102162:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	2b00      	cmp	r3, #0
 8102168:	d018      	beq.n	810219c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810216a:	4b14      	ldr	r3, [pc, #80]	@ (81021bc <vTaskDelay+0x64>)
 810216c:	681b      	ldr	r3, [r3, #0]
 810216e:	2b00      	cmp	r3, #0
 8102170:	d00b      	beq.n	810218a <vTaskDelay+0x32>
	__asm volatile
 8102172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102176:	f383 8811 	msr	BASEPRI, r3
 810217a:	f3bf 8f6f 	isb	sy
 810217e:	f3bf 8f4f 	dsb	sy
 8102182:	60bb      	str	r3, [r7, #8]
}
 8102184:	bf00      	nop
 8102186:	bf00      	nop
 8102188:	e7fd      	b.n	8102186 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810218a:	f000 f885 	bl	8102298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810218e:	2100      	movs	r1, #0
 8102190:	6878      	ldr	r0, [r7, #4]
 8102192:	f000 fb27 	bl	81027e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8102196:	f000 f88d 	bl	81022b4 <xTaskResumeAll>
 810219a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810219c:	68fb      	ldr	r3, [r7, #12]
 810219e:	2b00      	cmp	r3, #0
 81021a0:	d107      	bne.n	81021b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 81021a2:	4b07      	ldr	r3, [pc, #28]	@ (81021c0 <vTaskDelay+0x68>)
 81021a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81021a8:	601a      	str	r2, [r3, #0]
 81021aa:	f3bf 8f4f 	dsb	sy
 81021ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81021b2:	bf00      	nop
 81021b4:	3710      	adds	r7, #16
 81021b6:	46bd      	mov	sp, r7
 81021b8:	bd80      	pop	{r7, pc}
 81021ba:	bf00      	nop
 81021bc:	100040c4 	.word	0x100040c4
 81021c0:	e000ed04 	.word	0xe000ed04

081021c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81021c4:	b580      	push	{r7, lr}
 81021c6:	b08a      	sub	sp, #40	@ 0x28
 81021c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81021ca:	2300      	movs	r3, #0
 81021cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81021ce:	2300      	movs	r3, #0
 81021d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81021d2:	463a      	mov	r2, r7
 81021d4:	1d39      	adds	r1, r7, #4
 81021d6:	f107 0308 	add.w	r3, r7, #8
 81021da:	4618      	mov	r0, r3
 81021dc:	f7fe f8b0 	bl	8100340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81021e0:	6839      	ldr	r1, [r7, #0]
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	68ba      	ldr	r2, [r7, #8]
 81021e6:	9202      	str	r2, [sp, #8]
 81021e8:	9301      	str	r3, [sp, #4]
 81021ea:	2300      	movs	r3, #0
 81021ec:	9300      	str	r3, [sp, #0]
 81021ee:	2300      	movs	r3, #0
 81021f0:	460a      	mov	r2, r1
 81021f2:	4921      	ldr	r1, [pc, #132]	@ (8102278 <vTaskStartScheduler+0xb4>)
 81021f4:	4821      	ldr	r0, [pc, #132]	@ (810227c <vTaskStartScheduler+0xb8>)
 81021f6:	f7ff fdff 	bl	8101df8 <xTaskCreateStatic>
 81021fa:	4603      	mov	r3, r0
 81021fc:	4a20      	ldr	r2, [pc, #128]	@ (8102280 <vTaskStartScheduler+0xbc>)
 81021fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8102200:	4b1f      	ldr	r3, [pc, #124]	@ (8102280 <vTaskStartScheduler+0xbc>)
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	2b00      	cmp	r3, #0
 8102206:	d002      	beq.n	810220e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8102208:	2301      	movs	r3, #1
 810220a:	617b      	str	r3, [r7, #20]
 810220c:	e001      	b.n	8102212 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810220e:	2300      	movs	r3, #0
 8102210:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102212:	697b      	ldr	r3, [r7, #20]
 8102214:	2b01      	cmp	r3, #1
 8102216:	d11b      	bne.n	8102250 <vTaskStartScheduler+0x8c>
	__asm volatile
 8102218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810221c:	f383 8811 	msr	BASEPRI, r3
 8102220:	f3bf 8f6f 	isb	sy
 8102224:	f3bf 8f4f 	dsb	sy
 8102228:	613b      	str	r3, [r7, #16]
}
 810222a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810222c:	4b15      	ldr	r3, [pc, #84]	@ (8102284 <vTaskStartScheduler+0xc0>)
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	334c      	adds	r3, #76	@ 0x4c
 8102232:	4a15      	ldr	r2, [pc, #84]	@ (8102288 <vTaskStartScheduler+0xc4>)
 8102234:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8102236:	4b15      	ldr	r3, [pc, #84]	@ (810228c <vTaskStartScheduler+0xc8>)
 8102238:	f04f 32ff 	mov.w	r2, #4294967295
 810223c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810223e:	4b14      	ldr	r3, [pc, #80]	@ (8102290 <vTaskStartScheduler+0xcc>)
 8102240:	2201      	movs	r2, #1
 8102242:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8102244:	4b13      	ldr	r3, [pc, #76]	@ (8102294 <vTaskStartScheduler+0xd0>)
 8102246:	2200      	movs	r2, #0
 8102248:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810224a:	f7ff fc51 	bl	8101af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810224e:	e00f      	b.n	8102270 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8102250:	697b      	ldr	r3, [r7, #20]
 8102252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102256:	d10b      	bne.n	8102270 <vTaskStartScheduler+0xac>
	__asm volatile
 8102258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810225c:	f383 8811 	msr	BASEPRI, r3
 8102260:	f3bf 8f6f 	isb	sy
 8102264:	f3bf 8f4f 	dsb	sy
 8102268:	60fb      	str	r3, [r7, #12]
}
 810226a:	bf00      	nop
 810226c:	bf00      	nop
 810226e:	e7fd      	b.n	810226c <vTaskStartScheduler+0xa8>
}
 8102270:	bf00      	nop
 8102272:	3718      	adds	r7, #24
 8102274:	46bd      	mov	sp, r7
 8102276:	bd80      	pop	{r7, pc}
 8102278:	08102ab4 	.word	0x08102ab4
 810227c:	0810262d 	.word	0x0810262d
 8102280:	100040c0 	.word	0x100040c0
 8102284:	10003f9c 	.word	0x10003f9c
 8102288:	10000014 	.word	0x10000014
 810228c:	100040bc 	.word	0x100040bc
 8102290:	100040a8 	.word	0x100040a8
 8102294:	100040a0 	.word	0x100040a0

08102298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102298:	b480      	push	{r7}
 810229a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810229c:	4b04      	ldr	r3, [pc, #16]	@ (81022b0 <vTaskSuspendAll+0x18>)
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	3301      	adds	r3, #1
 81022a2:	4a03      	ldr	r2, [pc, #12]	@ (81022b0 <vTaskSuspendAll+0x18>)
 81022a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81022a6:	bf00      	nop
 81022a8:	46bd      	mov	sp, r7
 81022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ae:	4770      	bx	lr
 81022b0:	100040c4 	.word	0x100040c4

081022b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81022b4:	b580      	push	{r7, lr}
 81022b6:	b084      	sub	sp, #16
 81022b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81022ba:	2300      	movs	r3, #0
 81022bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81022be:	2300      	movs	r3, #0
 81022c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81022c2:	4b42      	ldr	r3, [pc, #264]	@ (81023cc <xTaskResumeAll+0x118>)
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d10b      	bne.n	81022e2 <xTaskResumeAll+0x2e>
	__asm volatile
 81022ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81022ce:	f383 8811 	msr	BASEPRI, r3
 81022d2:	f3bf 8f6f 	isb	sy
 81022d6:	f3bf 8f4f 	dsb	sy
 81022da:	603b      	str	r3, [r7, #0]
}
 81022dc:	bf00      	nop
 81022de:	bf00      	nop
 81022e0:	e7fd      	b.n	81022de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81022e2:	f7ff fca9 	bl	8101c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81022e6:	4b39      	ldr	r3, [pc, #228]	@ (81023cc <xTaskResumeAll+0x118>)
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	3b01      	subs	r3, #1
 81022ec:	4a37      	ldr	r2, [pc, #220]	@ (81023cc <xTaskResumeAll+0x118>)
 81022ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81022f0:	4b36      	ldr	r3, [pc, #216]	@ (81023cc <xTaskResumeAll+0x118>)
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	2b00      	cmp	r3, #0
 81022f6:	d161      	bne.n	81023bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81022f8:	4b35      	ldr	r3, [pc, #212]	@ (81023d0 <xTaskResumeAll+0x11c>)
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	2b00      	cmp	r3, #0
 81022fe:	d05d      	beq.n	81023bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102300:	e02e      	b.n	8102360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102302:	4b34      	ldr	r3, [pc, #208]	@ (81023d4 <xTaskResumeAll+0x120>)
 8102304:	68db      	ldr	r3, [r3, #12]
 8102306:	68db      	ldr	r3, [r3, #12]
 8102308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810230a:	68fb      	ldr	r3, [r7, #12]
 810230c:	3318      	adds	r3, #24
 810230e:	4618      	mov	r0, r3
 8102310:	f7ff fb38 	bl	8101984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102314:	68fb      	ldr	r3, [r7, #12]
 8102316:	3304      	adds	r3, #4
 8102318:	4618      	mov	r0, r3
 810231a:	f7ff fb33 	bl	8101984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810231e:	68fb      	ldr	r3, [r7, #12]
 8102320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102322:	2201      	movs	r2, #1
 8102324:	409a      	lsls	r2, r3
 8102326:	4b2c      	ldr	r3, [pc, #176]	@ (81023d8 <xTaskResumeAll+0x124>)
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	4313      	orrs	r3, r2
 810232c:	4a2a      	ldr	r2, [pc, #168]	@ (81023d8 <xTaskResumeAll+0x124>)
 810232e:	6013      	str	r3, [r2, #0]
 8102330:	68fb      	ldr	r3, [r7, #12]
 8102332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102334:	4613      	mov	r3, r2
 8102336:	009b      	lsls	r3, r3, #2
 8102338:	4413      	add	r3, r2
 810233a:	009b      	lsls	r3, r3, #2
 810233c:	4a27      	ldr	r2, [pc, #156]	@ (81023dc <xTaskResumeAll+0x128>)
 810233e:	441a      	add	r2, r3
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	3304      	adds	r3, #4
 8102344:	4619      	mov	r1, r3
 8102346:	4610      	mov	r0, r2
 8102348:	f7ff fabf 	bl	81018ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810234c:	68fb      	ldr	r3, [r7, #12]
 810234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102350:	4b23      	ldr	r3, [pc, #140]	@ (81023e0 <xTaskResumeAll+0x12c>)
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102356:	429a      	cmp	r2, r3
 8102358:	d302      	bcc.n	8102360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810235a:	4b22      	ldr	r3, [pc, #136]	@ (81023e4 <xTaskResumeAll+0x130>)
 810235c:	2201      	movs	r2, #1
 810235e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102360:	4b1c      	ldr	r3, [pc, #112]	@ (81023d4 <xTaskResumeAll+0x120>)
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	2b00      	cmp	r3, #0
 8102366:	d1cc      	bne.n	8102302 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102368:	68fb      	ldr	r3, [r7, #12]
 810236a:	2b00      	cmp	r3, #0
 810236c:	d001      	beq.n	8102372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810236e:	f000 fa19 	bl	81027a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8102372:	4b1d      	ldr	r3, [pc, #116]	@ (81023e8 <xTaskResumeAll+0x134>)
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	2b00      	cmp	r3, #0
 810237c:	d010      	beq.n	81023a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810237e:	f000 f837 	bl	81023f0 <xTaskIncrementTick>
 8102382:	4603      	mov	r3, r0
 8102384:	2b00      	cmp	r3, #0
 8102386:	d002      	beq.n	810238e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8102388:	4b16      	ldr	r3, [pc, #88]	@ (81023e4 <xTaskResumeAll+0x130>)
 810238a:	2201      	movs	r2, #1
 810238c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	3b01      	subs	r3, #1
 8102392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	2b00      	cmp	r3, #0
 8102398:	d1f1      	bne.n	810237e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810239a:	4b13      	ldr	r3, [pc, #76]	@ (81023e8 <xTaskResumeAll+0x134>)
 810239c:	2200      	movs	r2, #0
 810239e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81023a0:	4b10      	ldr	r3, [pc, #64]	@ (81023e4 <xTaskResumeAll+0x130>)
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d009      	beq.n	81023bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81023a8:	2301      	movs	r3, #1
 81023aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81023ac:	4b0f      	ldr	r3, [pc, #60]	@ (81023ec <xTaskResumeAll+0x138>)
 81023ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81023b2:	601a      	str	r2, [r3, #0]
 81023b4:	f3bf 8f4f 	dsb	sy
 81023b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81023bc:	f7ff fc6e 	bl	8101c9c <vPortExitCritical>

	return xAlreadyYielded;
 81023c0:	68bb      	ldr	r3, [r7, #8]
}
 81023c2:	4618      	mov	r0, r3
 81023c4:	3710      	adds	r7, #16
 81023c6:	46bd      	mov	sp, r7
 81023c8:	bd80      	pop	{r7, pc}
 81023ca:	bf00      	nop
 81023cc:	100040c4 	.word	0x100040c4
 81023d0:	1000409c 	.word	0x1000409c
 81023d4:	1000405c 	.word	0x1000405c
 81023d8:	100040a4 	.word	0x100040a4
 81023dc:	10003fa0 	.word	0x10003fa0
 81023e0:	10003f9c 	.word	0x10003f9c
 81023e4:	100040b0 	.word	0x100040b0
 81023e8:	100040ac 	.word	0x100040ac
 81023ec:	e000ed04 	.word	0xe000ed04

081023f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81023f0:	b580      	push	{r7, lr}
 81023f2:	b086      	sub	sp, #24
 81023f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81023f6:	2300      	movs	r3, #0
 81023f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81023fa:	4b4f      	ldr	r3, [pc, #316]	@ (8102538 <xTaskIncrementTick+0x148>)
 81023fc:	681b      	ldr	r3, [r3, #0]
 81023fe:	2b00      	cmp	r3, #0
 8102400:	f040 808f 	bne.w	8102522 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8102404:	4b4d      	ldr	r3, [pc, #308]	@ (810253c <xTaskIncrementTick+0x14c>)
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	3301      	adds	r3, #1
 810240a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810240c:	4a4b      	ldr	r2, [pc, #300]	@ (810253c <xTaskIncrementTick+0x14c>)
 810240e:	693b      	ldr	r3, [r7, #16]
 8102410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8102412:	693b      	ldr	r3, [r7, #16]
 8102414:	2b00      	cmp	r3, #0
 8102416:	d121      	bne.n	810245c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8102418:	4b49      	ldr	r3, [pc, #292]	@ (8102540 <xTaskIncrementTick+0x150>)
 810241a:	681b      	ldr	r3, [r3, #0]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	2b00      	cmp	r3, #0
 8102420:	d00b      	beq.n	810243a <xTaskIncrementTick+0x4a>
	__asm volatile
 8102422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102426:	f383 8811 	msr	BASEPRI, r3
 810242a:	f3bf 8f6f 	isb	sy
 810242e:	f3bf 8f4f 	dsb	sy
 8102432:	603b      	str	r3, [r7, #0]
}
 8102434:	bf00      	nop
 8102436:	bf00      	nop
 8102438:	e7fd      	b.n	8102436 <xTaskIncrementTick+0x46>
 810243a:	4b41      	ldr	r3, [pc, #260]	@ (8102540 <xTaskIncrementTick+0x150>)
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	60fb      	str	r3, [r7, #12]
 8102440:	4b40      	ldr	r3, [pc, #256]	@ (8102544 <xTaskIncrementTick+0x154>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	4a3e      	ldr	r2, [pc, #248]	@ (8102540 <xTaskIncrementTick+0x150>)
 8102446:	6013      	str	r3, [r2, #0]
 8102448:	4a3e      	ldr	r2, [pc, #248]	@ (8102544 <xTaskIncrementTick+0x154>)
 810244a:	68fb      	ldr	r3, [r7, #12]
 810244c:	6013      	str	r3, [r2, #0]
 810244e:	4b3e      	ldr	r3, [pc, #248]	@ (8102548 <xTaskIncrementTick+0x158>)
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	3301      	adds	r3, #1
 8102454:	4a3c      	ldr	r2, [pc, #240]	@ (8102548 <xTaskIncrementTick+0x158>)
 8102456:	6013      	str	r3, [r2, #0]
 8102458:	f000 f9a4 	bl	81027a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810245c:	4b3b      	ldr	r3, [pc, #236]	@ (810254c <xTaskIncrementTick+0x15c>)
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	693a      	ldr	r2, [r7, #16]
 8102462:	429a      	cmp	r2, r3
 8102464:	d348      	bcc.n	81024f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102466:	4b36      	ldr	r3, [pc, #216]	@ (8102540 <xTaskIncrementTick+0x150>)
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	681b      	ldr	r3, [r3, #0]
 810246c:	2b00      	cmp	r3, #0
 810246e:	d104      	bne.n	810247a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102470:	4b36      	ldr	r3, [pc, #216]	@ (810254c <xTaskIncrementTick+0x15c>)
 8102472:	f04f 32ff 	mov.w	r2, #4294967295
 8102476:	601a      	str	r2, [r3, #0]
					break;
 8102478:	e03e      	b.n	81024f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810247a:	4b31      	ldr	r3, [pc, #196]	@ (8102540 <xTaskIncrementTick+0x150>)
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	68db      	ldr	r3, [r3, #12]
 8102480:	68db      	ldr	r3, [r3, #12]
 8102482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8102484:	68bb      	ldr	r3, [r7, #8]
 8102486:	685b      	ldr	r3, [r3, #4]
 8102488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810248a:	693a      	ldr	r2, [r7, #16]
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	429a      	cmp	r2, r3
 8102490:	d203      	bcs.n	810249a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8102492:	4a2e      	ldr	r2, [pc, #184]	@ (810254c <xTaskIncrementTick+0x15c>)
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8102498:	e02e      	b.n	81024f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810249a:	68bb      	ldr	r3, [r7, #8]
 810249c:	3304      	adds	r3, #4
 810249e:	4618      	mov	r0, r3
 81024a0:	f7ff fa70 	bl	8101984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81024a4:	68bb      	ldr	r3, [r7, #8]
 81024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81024a8:	2b00      	cmp	r3, #0
 81024aa:	d004      	beq.n	81024b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81024ac:	68bb      	ldr	r3, [r7, #8]
 81024ae:	3318      	adds	r3, #24
 81024b0:	4618      	mov	r0, r3
 81024b2:	f7ff fa67 	bl	8101984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81024b6:	68bb      	ldr	r3, [r7, #8]
 81024b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024ba:	2201      	movs	r2, #1
 81024bc:	409a      	lsls	r2, r3
 81024be:	4b24      	ldr	r3, [pc, #144]	@ (8102550 <xTaskIncrementTick+0x160>)
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	4313      	orrs	r3, r2
 81024c4:	4a22      	ldr	r2, [pc, #136]	@ (8102550 <xTaskIncrementTick+0x160>)
 81024c6:	6013      	str	r3, [r2, #0]
 81024c8:	68bb      	ldr	r3, [r7, #8]
 81024ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024cc:	4613      	mov	r3, r2
 81024ce:	009b      	lsls	r3, r3, #2
 81024d0:	4413      	add	r3, r2
 81024d2:	009b      	lsls	r3, r3, #2
 81024d4:	4a1f      	ldr	r2, [pc, #124]	@ (8102554 <xTaskIncrementTick+0x164>)
 81024d6:	441a      	add	r2, r3
 81024d8:	68bb      	ldr	r3, [r7, #8]
 81024da:	3304      	adds	r3, #4
 81024dc:	4619      	mov	r1, r3
 81024de:	4610      	mov	r0, r2
 81024e0:	f7ff f9f3 	bl	81018ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81024e4:	68bb      	ldr	r3, [r7, #8]
 81024e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024e8:	4b1b      	ldr	r3, [pc, #108]	@ (8102558 <xTaskIncrementTick+0x168>)
 81024ea:	681b      	ldr	r3, [r3, #0]
 81024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024ee:	429a      	cmp	r2, r3
 81024f0:	d3b9      	bcc.n	8102466 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81024f2:	2301      	movs	r3, #1
 81024f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81024f6:	e7b6      	b.n	8102466 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81024f8:	4b17      	ldr	r3, [pc, #92]	@ (8102558 <xTaskIncrementTick+0x168>)
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024fe:	4915      	ldr	r1, [pc, #84]	@ (8102554 <xTaskIncrementTick+0x164>)
 8102500:	4613      	mov	r3, r2
 8102502:	009b      	lsls	r3, r3, #2
 8102504:	4413      	add	r3, r2
 8102506:	009b      	lsls	r3, r3, #2
 8102508:	440b      	add	r3, r1
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	2b01      	cmp	r3, #1
 810250e:	d901      	bls.n	8102514 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8102510:	2301      	movs	r3, #1
 8102512:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8102514:	4b11      	ldr	r3, [pc, #68]	@ (810255c <xTaskIncrementTick+0x16c>)
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	2b00      	cmp	r3, #0
 810251a:	d007      	beq.n	810252c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810251c:	2301      	movs	r3, #1
 810251e:	617b      	str	r3, [r7, #20]
 8102520:	e004      	b.n	810252c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8102522:	4b0f      	ldr	r3, [pc, #60]	@ (8102560 <xTaskIncrementTick+0x170>)
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	3301      	adds	r3, #1
 8102528:	4a0d      	ldr	r2, [pc, #52]	@ (8102560 <xTaskIncrementTick+0x170>)
 810252a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810252c:	697b      	ldr	r3, [r7, #20]
}
 810252e:	4618      	mov	r0, r3
 8102530:	3718      	adds	r7, #24
 8102532:	46bd      	mov	sp, r7
 8102534:	bd80      	pop	{r7, pc}
 8102536:	bf00      	nop
 8102538:	100040c4 	.word	0x100040c4
 810253c:	100040a0 	.word	0x100040a0
 8102540:	10004054 	.word	0x10004054
 8102544:	10004058 	.word	0x10004058
 8102548:	100040b4 	.word	0x100040b4
 810254c:	100040bc 	.word	0x100040bc
 8102550:	100040a4 	.word	0x100040a4
 8102554:	10003fa0 	.word	0x10003fa0
 8102558:	10003f9c 	.word	0x10003f9c
 810255c:	100040b0 	.word	0x100040b0
 8102560:	100040ac 	.word	0x100040ac

08102564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8102564:	b480      	push	{r7}
 8102566:	b087      	sub	sp, #28
 8102568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810256a:	4b2a      	ldr	r3, [pc, #168]	@ (8102614 <vTaskSwitchContext+0xb0>)
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	2b00      	cmp	r3, #0
 8102570:	d003      	beq.n	810257a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8102572:	4b29      	ldr	r3, [pc, #164]	@ (8102618 <vTaskSwitchContext+0xb4>)
 8102574:	2201      	movs	r2, #1
 8102576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8102578:	e045      	b.n	8102606 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 810257a:	4b27      	ldr	r3, [pc, #156]	@ (8102618 <vTaskSwitchContext+0xb4>)
 810257c:	2200      	movs	r2, #0
 810257e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102580:	4b26      	ldr	r3, [pc, #152]	@ (810261c <vTaskSwitchContext+0xb8>)
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	fab3 f383 	clz	r3, r3
 810258c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 810258e:	7afb      	ldrb	r3, [r7, #11]
 8102590:	f1c3 031f 	rsb	r3, r3, #31
 8102594:	617b      	str	r3, [r7, #20]
 8102596:	4922      	ldr	r1, [pc, #136]	@ (8102620 <vTaskSwitchContext+0xbc>)
 8102598:	697a      	ldr	r2, [r7, #20]
 810259a:	4613      	mov	r3, r2
 810259c:	009b      	lsls	r3, r3, #2
 810259e:	4413      	add	r3, r2
 81025a0:	009b      	lsls	r3, r3, #2
 81025a2:	440b      	add	r3, r1
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d10b      	bne.n	81025c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 81025aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81025ae:	f383 8811 	msr	BASEPRI, r3
 81025b2:	f3bf 8f6f 	isb	sy
 81025b6:	f3bf 8f4f 	dsb	sy
 81025ba:	607b      	str	r3, [r7, #4]
}
 81025bc:	bf00      	nop
 81025be:	bf00      	nop
 81025c0:	e7fd      	b.n	81025be <vTaskSwitchContext+0x5a>
 81025c2:	697a      	ldr	r2, [r7, #20]
 81025c4:	4613      	mov	r3, r2
 81025c6:	009b      	lsls	r3, r3, #2
 81025c8:	4413      	add	r3, r2
 81025ca:	009b      	lsls	r3, r3, #2
 81025cc:	4a14      	ldr	r2, [pc, #80]	@ (8102620 <vTaskSwitchContext+0xbc>)
 81025ce:	4413      	add	r3, r2
 81025d0:	613b      	str	r3, [r7, #16]
 81025d2:	693b      	ldr	r3, [r7, #16]
 81025d4:	685b      	ldr	r3, [r3, #4]
 81025d6:	685a      	ldr	r2, [r3, #4]
 81025d8:	693b      	ldr	r3, [r7, #16]
 81025da:	605a      	str	r2, [r3, #4]
 81025dc:	693b      	ldr	r3, [r7, #16]
 81025de:	685a      	ldr	r2, [r3, #4]
 81025e0:	693b      	ldr	r3, [r7, #16]
 81025e2:	3308      	adds	r3, #8
 81025e4:	429a      	cmp	r2, r3
 81025e6:	d104      	bne.n	81025f2 <vTaskSwitchContext+0x8e>
 81025e8:	693b      	ldr	r3, [r7, #16]
 81025ea:	685b      	ldr	r3, [r3, #4]
 81025ec:	685a      	ldr	r2, [r3, #4]
 81025ee:	693b      	ldr	r3, [r7, #16]
 81025f0:	605a      	str	r2, [r3, #4]
 81025f2:	693b      	ldr	r3, [r7, #16]
 81025f4:	685b      	ldr	r3, [r3, #4]
 81025f6:	68db      	ldr	r3, [r3, #12]
 81025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8102624 <vTaskSwitchContext+0xc0>)
 81025fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81025fc:	4b09      	ldr	r3, [pc, #36]	@ (8102624 <vTaskSwitchContext+0xc0>)
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	334c      	adds	r3, #76	@ 0x4c
 8102602:	4a09      	ldr	r2, [pc, #36]	@ (8102628 <vTaskSwitchContext+0xc4>)
 8102604:	6013      	str	r3, [r2, #0]
}
 8102606:	bf00      	nop
 8102608:	371c      	adds	r7, #28
 810260a:	46bd      	mov	sp, r7
 810260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102610:	4770      	bx	lr
 8102612:	bf00      	nop
 8102614:	100040c4 	.word	0x100040c4
 8102618:	100040b0 	.word	0x100040b0
 810261c:	100040a4 	.word	0x100040a4
 8102620:	10003fa0 	.word	0x10003fa0
 8102624:	10003f9c 	.word	0x10003f9c
 8102628:	10000014 	.word	0x10000014

0810262c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810262c:	b580      	push	{r7, lr}
 810262e:	b082      	sub	sp, #8
 8102630:	af00      	add	r7, sp, #0
 8102632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8102634:	f000 f852 	bl	81026dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8102638:	4b06      	ldr	r3, [pc, #24]	@ (8102654 <prvIdleTask+0x28>)
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	2b01      	cmp	r3, #1
 810263e:	d9f9      	bls.n	8102634 <prvIdleTask+0x8>
			{
				taskYIELD();
 8102640:	4b05      	ldr	r3, [pc, #20]	@ (8102658 <prvIdleTask+0x2c>)
 8102642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102646:	601a      	str	r2, [r3, #0]
 8102648:	f3bf 8f4f 	dsb	sy
 810264c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8102650:	e7f0      	b.n	8102634 <prvIdleTask+0x8>
 8102652:	bf00      	nop
 8102654:	10003fa0 	.word	0x10003fa0
 8102658:	e000ed04 	.word	0xe000ed04

0810265c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810265c:	b580      	push	{r7, lr}
 810265e:	b082      	sub	sp, #8
 8102660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102662:	2300      	movs	r3, #0
 8102664:	607b      	str	r3, [r7, #4]
 8102666:	e00c      	b.n	8102682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8102668:	687a      	ldr	r2, [r7, #4]
 810266a:	4613      	mov	r3, r2
 810266c:	009b      	lsls	r3, r3, #2
 810266e:	4413      	add	r3, r2
 8102670:	009b      	lsls	r3, r3, #2
 8102672:	4a12      	ldr	r2, [pc, #72]	@ (81026bc <prvInitialiseTaskLists+0x60>)
 8102674:	4413      	add	r3, r2
 8102676:	4618      	mov	r0, r3
 8102678:	f7ff f8fa 	bl	8101870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	3301      	adds	r3, #1
 8102680:	607b      	str	r3, [r7, #4]
 8102682:	687b      	ldr	r3, [r7, #4]
 8102684:	2b06      	cmp	r3, #6
 8102686:	d9ef      	bls.n	8102668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8102688:	480d      	ldr	r0, [pc, #52]	@ (81026c0 <prvInitialiseTaskLists+0x64>)
 810268a:	f7ff f8f1 	bl	8101870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810268e:	480d      	ldr	r0, [pc, #52]	@ (81026c4 <prvInitialiseTaskLists+0x68>)
 8102690:	f7ff f8ee 	bl	8101870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8102694:	480c      	ldr	r0, [pc, #48]	@ (81026c8 <prvInitialiseTaskLists+0x6c>)
 8102696:	f7ff f8eb 	bl	8101870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810269a:	480c      	ldr	r0, [pc, #48]	@ (81026cc <prvInitialiseTaskLists+0x70>)
 810269c:	f7ff f8e8 	bl	8101870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81026a0:	480b      	ldr	r0, [pc, #44]	@ (81026d0 <prvInitialiseTaskLists+0x74>)
 81026a2:	f7ff f8e5 	bl	8101870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81026a6:	4b0b      	ldr	r3, [pc, #44]	@ (81026d4 <prvInitialiseTaskLists+0x78>)
 81026a8:	4a05      	ldr	r2, [pc, #20]	@ (81026c0 <prvInitialiseTaskLists+0x64>)
 81026aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81026ac:	4b0a      	ldr	r3, [pc, #40]	@ (81026d8 <prvInitialiseTaskLists+0x7c>)
 81026ae:	4a05      	ldr	r2, [pc, #20]	@ (81026c4 <prvInitialiseTaskLists+0x68>)
 81026b0:	601a      	str	r2, [r3, #0]
}
 81026b2:	bf00      	nop
 81026b4:	3708      	adds	r7, #8
 81026b6:	46bd      	mov	sp, r7
 81026b8:	bd80      	pop	{r7, pc}
 81026ba:	bf00      	nop
 81026bc:	10003fa0 	.word	0x10003fa0
 81026c0:	1000402c 	.word	0x1000402c
 81026c4:	10004040 	.word	0x10004040
 81026c8:	1000405c 	.word	0x1000405c
 81026cc:	10004070 	.word	0x10004070
 81026d0:	10004088 	.word	0x10004088
 81026d4:	10004054 	.word	0x10004054
 81026d8:	10004058 	.word	0x10004058

081026dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81026dc:	b580      	push	{r7, lr}
 81026de:	b082      	sub	sp, #8
 81026e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81026e2:	e019      	b.n	8102718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81026e4:	f7ff faa8 	bl	8101c38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81026e8:	4b10      	ldr	r3, [pc, #64]	@ (810272c <prvCheckTasksWaitingTermination+0x50>)
 81026ea:	68db      	ldr	r3, [r3, #12]
 81026ec:	68db      	ldr	r3, [r3, #12]
 81026ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	3304      	adds	r3, #4
 81026f4:	4618      	mov	r0, r3
 81026f6:	f7ff f945 	bl	8101984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8102730 <prvCheckTasksWaitingTermination+0x54>)
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	3b01      	subs	r3, #1
 8102700:	4a0b      	ldr	r2, [pc, #44]	@ (8102730 <prvCheckTasksWaitingTermination+0x54>)
 8102702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8102704:	4b0b      	ldr	r3, [pc, #44]	@ (8102734 <prvCheckTasksWaitingTermination+0x58>)
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	3b01      	subs	r3, #1
 810270a:	4a0a      	ldr	r2, [pc, #40]	@ (8102734 <prvCheckTasksWaitingTermination+0x58>)
 810270c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810270e:	f7ff fac5 	bl	8101c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8102712:	6878      	ldr	r0, [r7, #4]
 8102714:	f000 f810 	bl	8102738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102718:	4b06      	ldr	r3, [pc, #24]	@ (8102734 <prvCheckTasksWaitingTermination+0x58>)
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	2b00      	cmp	r3, #0
 810271e:	d1e1      	bne.n	81026e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8102720:	bf00      	nop
 8102722:	bf00      	nop
 8102724:	3708      	adds	r7, #8
 8102726:	46bd      	mov	sp, r7
 8102728:	bd80      	pop	{r7, pc}
 810272a:	bf00      	nop
 810272c:	10004070 	.word	0x10004070
 8102730:	1000409c 	.word	0x1000409c
 8102734:	10004084 	.word	0x10004084

08102738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8102738:	b580      	push	{r7, lr}
 810273a:	b084      	sub	sp, #16
 810273c:	af00      	add	r7, sp, #0
 810273e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	334c      	adds	r3, #76	@ 0x4c
 8102744:	4618      	mov	r0, r3
 8102746:	f000 f8bb 	bl	81028c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8102750:	2b00      	cmp	r3, #0
 8102752:	d108      	bne.n	8102766 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102758:	4618      	mov	r0, r3
 810275a:	f7fe ff69 	bl	8101630 <vPortFree>
				vPortFree( pxTCB );
 810275e:	6878      	ldr	r0, [r7, #4]
 8102760:	f7fe ff66 	bl	8101630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8102764:	e019      	b.n	810279a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 810276c:	2b01      	cmp	r3, #1
 810276e:	d103      	bne.n	8102778 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8102770:	6878      	ldr	r0, [r7, #4]
 8102772:	f7fe ff5d 	bl	8101630 <vPortFree>
	}
 8102776:	e010      	b.n	810279a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 810277e:	2b02      	cmp	r3, #2
 8102780:	d00b      	beq.n	810279a <prvDeleteTCB+0x62>
	__asm volatile
 8102782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102786:	f383 8811 	msr	BASEPRI, r3
 810278a:	f3bf 8f6f 	isb	sy
 810278e:	f3bf 8f4f 	dsb	sy
 8102792:	60fb      	str	r3, [r7, #12]
}
 8102794:	bf00      	nop
 8102796:	bf00      	nop
 8102798:	e7fd      	b.n	8102796 <prvDeleteTCB+0x5e>
	}
 810279a:	bf00      	nop
 810279c:	3710      	adds	r7, #16
 810279e:	46bd      	mov	sp, r7
 81027a0:	bd80      	pop	{r7, pc}
	...

081027a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81027a4:	b480      	push	{r7}
 81027a6:	b083      	sub	sp, #12
 81027a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81027aa:	4b0c      	ldr	r3, [pc, #48]	@ (81027dc <prvResetNextTaskUnblockTime+0x38>)
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d104      	bne.n	81027be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81027b4:	4b0a      	ldr	r3, [pc, #40]	@ (81027e0 <prvResetNextTaskUnblockTime+0x3c>)
 81027b6:	f04f 32ff 	mov.w	r2, #4294967295
 81027ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81027bc:	e008      	b.n	81027d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81027be:	4b07      	ldr	r3, [pc, #28]	@ (81027dc <prvResetNextTaskUnblockTime+0x38>)
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	68db      	ldr	r3, [r3, #12]
 81027c4:	68db      	ldr	r3, [r3, #12]
 81027c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	685b      	ldr	r3, [r3, #4]
 81027cc:	4a04      	ldr	r2, [pc, #16]	@ (81027e0 <prvResetNextTaskUnblockTime+0x3c>)
 81027ce:	6013      	str	r3, [r2, #0]
}
 81027d0:	bf00      	nop
 81027d2:	370c      	adds	r7, #12
 81027d4:	46bd      	mov	sp, r7
 81027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027da:	4770      	bx	lr
 81027dc:	10004054 	.word	0x10004054
 81027e0:	100040bc 	.word	0x100040bc

081027e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81027e4:	b580      	push	{r7, lr}
 81027e6:	b084      	sub	sp, #16
 81027e8:	af00      	add	r7, sp, #0
 81027ea:	6078      	str	r0, [r7, #4]
 81027ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81027ee:	4b29      	ldr	r3, [pc, #164]	@ (8102894 <prvAddCurrentTaskToDelayedList+0xb0>)
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81027f4:	4b28      	ldr	r3, [pc, #160]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	3304      	adds	r3, #4
 81027fa:	4618      	mov	r0, r3
 81027fc:	f7ff f8c2 	bl	8101984 <uxListRemove>
 8102800:	4603      	mov	r3, r0
 8102802:	2b00      	cmp	r3, #0
 8102804:	d10b      	bne.n	810281e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8102806:	4b24      	ldr	r3, [pc, #144]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810280c:	2201      	movs	r2, #1
 810280e:	fa02 f303 	lsl.w	r3, r2, r3
 8102812:	43da      	mvns	r2, r3
 8102814:	4b21      	ldr	r3, [pc, #132]	@ (810289c <prvAddCurrentTaskToDelayedList+0xb8>)
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	4013      	ands	r3, r2
 810281a:	4a20      	ldr	r2, [pc, #128]	@ (810289c <prvAddCurrentTaskToDelayedList+0xb8>)
 810281c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102824:	d10a      	bne.n	810283c <prvAddCurrentTaskToDelayedList+0x58>
 8102826:	683b      	ldr	r3, [r7, #0]
 8102828:	2b00      	cmp	r3, #0
 810282a:	d007      	beq.n	810283c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810282c:	4b1a      	ldr	r3, [pc, #104]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	3304      	adds	r3, #4
 8102832:	4619      	mov	r1, r3
 8102834:	481a      	ldr	r0, [pc, #104]	@ (81028a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8102836:	f7ff f848 	bl	81018ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810283a:	e026      	b.n	810288a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810283c:	68fa      	ldr	r2, [r7, #12]
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	4413      	add	r3, r2
 8102842:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8102844:	4b14      	ldr	r3, [pc, #80]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	68ba      	ldr	r2, [r7, #8]
 810284a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810284c:	68ba      	ldr	r2, [r7, #8]
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	429a      	cmp	r2, r3
 8102852:	d209      	bcs.n	8102868 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102854:	4b13      	ldr	r3, [pc, #76]	@ (81028a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8102856:	681a      	ldr	r2, [r3, #0]
 8102858:	4b0f      	ldr	r3, [pc, #60]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	3304      	adds	r3, #4
 810285e:	4619      	mov	r1, r3
 8102860:	4610      	mov	r0, r2
 8102862:	f7ff f856 	bl	8101912 <vListInsert>
}
 8102866:	e010      	b.n	810288a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102868:	4b0f      	ldr	r3, [pc, #60]	@ (81028a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 810286a:	681a      	ldr	r2, [r3, #0]
 810286c:	4b0a      	ldr	r3, [pc, #40]	@ (8102898 <prvAddCurrentTaskToDelayedList+0xb4>)
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	3304      	adds	r3, #4
 8102872:	4619      	mov	r1, r3
 8102874:	4610      	mov	r0, r2
 8102876:	f7ff f84c 	bl	8101912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810287a:	4b0c      	ldr	r3, [pc, #48]	@ (81028ac <prvAddCurrentTaskToDelayedList+0xc8>)
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	68ba      	ldr	r2, [r7, #8]
 8102880:	429a      	cmp	r2, r3
 8102882:	d202      	bcs.n	810288a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8102884:	4a09      	ldr	r2, [pc, #36]	@ (81028ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8102886:	68bb      	ldr	r3, [r7, #8]
 8102888:	6013      	str	r3, [r2, #0]
}
 810288a:	bf00      	nop
 810288c:	3710      	adds	r7, #16
 810288e:	46bd      	mov	sp, r7
 8102890:	bd80      	pop	{r7, pc}
 8102892:	bf00      	nop
 8102894:	100040a0 	.word	0x100040a0
 8102898:	10003f9c 	.word	0x10003f9c
 810289c:	100040a4 	.word	0x100040a4
 81028a0:	10004088 	.word	0x10004088
 81028a4:	10004058 	.word	0x10004058
 81028a8:	10004054 	.word	0x10004054
 81028ac:	100040bc 	.word	0x100040bc

081028b0 <memset>:
 81028b0:	4402      	add	r2, r0
 81028b2:	4603      	mov	r3, r0
 81028b4:	4293      	cmp	r3, r2
 81028b6:	d100      	bne.n	81028ba <memset+0xa>
 81028b8:	4770      	bx	lr
 81028ba:	f803 1b01 	strb.w	r1, [r3], #1
 81028be:	e7f9      	b.n	81028b4 <memset+0x4>

081028c0 <_reclaim_reent>:
 81028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8102978 <_reclaim_reent+0xb8>)
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4283      	cmp	r3, r0
 81028c6:	b570      	push	{r4, r5, r6, lr}
 81028c8:	4604      	mov	r4, r0
 81028ca:	d053      	beq.n	8102974 <_reclaim_reent+0xb4>
 81028cc:	69c3      	ldr	r3, [r0, #28]
 81028ce:	b31b      	cbz	r3, 8102918 <_reclaim_reent+0x58>
 81028d0:	68db      	ldr	r3, [r3, #12]
 81028d2:	b163      	cbz	r3, 81028ee <_reclaim_reent+0x2e>
 81028d4:	2500      	movs	r5, #0
 81028d6:	69e3      	ldr	r3, [r4, #28]
 81028d8:	68db      	ldr	r3, [r3, #12]
 81028da:	5959      	ldr	r1, [r3, r5]
 81028dc:	b9b1      	cbnz	r1, 810290c <_reclaim_reent+0x4c>
 81028de:	3504      	adds	r5, #4
 81028e0:	2d80      	cmp	r5, #128	@ 0x80
 81028e2:	d1f8      	bne.n	81028d6 <_reclaim_reent+0x16>
 81028e4:	69e3      	ldr	r3, [r4, #28]
 81028e6:	4620      	mov	r0, r4
 81028e8:	68d9      	ldr	r1, [r3, #12]
 81028ea:	f000 f86d 	bl	81029c8 <_free_r>
 81028ee:	69e3      	ldr	r3, [r4, #28]
 81028f0:	6819      	ldr	r1, [r3, #0]
 81028f2:	b111      	cbz	r1, 81028fa <_reclaim_reent+0x3a>
 81028f4:	4620      	mov	r0, r4
 81028f6:	f000 f867 	bl	81029c8 <_free_r>
 81028fa:	69e3      	ldr	r3, [r4, #28]
 81028fc:	689d      	ldr	r5, [r3, #8]
 81028fe:	b15d      	cbz	r5, 8102918 <_reclaim_reent+0x58>
 8102900:	4629      	mov	r1, r5
 8102902:	4620      	mov	r0, r4
 8102904:	682d      	ldr	r5, [r5, #0]
 8102906:	f000 f85f 	bl	81029c8 <_free_r>
 810290a:	e7f8      	b.n	81028fe <_reclaim_reent+0x3e>
 810290c:	680e      	ldr	r6, [r1, #0]
 810290e:	4620      	mov	r0, r4
 8102910:	f000 f85a 	bl	81029c8 <_free_r>
 8102914:	4631      	mov	r1, r6
 8102916:	e7e1      	b.n	81028dc <_reclaim_reent+0x1c>
 8102918:	6961      	ldr	r1, [r4, #20]
 810291a:	b111      	cbz	r1, 8102922 <_reclaim_reent+0x62>
 810291c:	4620      	mov	r0, r4
 810291e:	f000 f853 	bl	81029c8 <_free_r>
 8102922:	69e1      	ldr	r1, [r4, #28]
 8102924:	b111      	cbz	r1, 810292c <_reclaim_reent+0x6c>
 8102926:	4620      	mov	r0, r4
 8102928:	f000 f84e 	bl	81029c8 <_free_r>
 810292c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810292e:	b111      	cbz	r1, 8102936 <_reclaim_reent+0x76>
 8102930:	4620      	mov	r0, r4
 8102932:	f000 f849 	bl	81029c8 <_free_r>
 8102936:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8102938:	b111      	cbz	r1, 8102940 <_reclaim_reent+0x80>
 810293a:	4620      	mov	r0, r4
 810293c:	f000 f844 	bl	81029c8 <_free_r>
 8102940:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8102942:	b111      	cbz	r1, 810294a <_reclaim_reent+0x8a>
 8102944:	4620      	mov	r0, r4
 8102946:	f000 f83f 	bl	81029c8 <_free_r>
 810294a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810294c:	b111      	cbz	r1, 8102954 <_reclaim_reent+0x94>
 810294e:	4620      	mov	r0, r4
 8102950:	f000 f83a 	bl	81029c8 <_free_r>
 8102954:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8102956:	b111      	cbz	r1, 810295e <_reclaim_reent+0x9e>
 8102958:	4620      	mov	r0, r4
 810295a:	f000 f835 	bl	81029c8 <_free_r>
 810295e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8102960:	b111      	cbz	r1, 8102968 <_reclaim_reent+0xa8>
 8102962:	4620      	mov	r0, r4
 8102964:	f000 f830 	bl	81029c8 <_free_r>
 8102968:	6a23      	ldr	r3, [r4, #32]
 810296a:	b11b      	cbz	r3, 8102974 <_reclaim_reent+0xb4>
 810296c:	4620      	mov	r0, r4
 810296e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8102972:	4718      	bx	r3
 8102974:	bd70      	pop	{r4, r5, r6, pc}
 8102976:	bf00      	nop
 8102978:	10000014 	.word	0x10000014

0810297c <__libc_init_array>:
 810297c:	b570      	push	{r4, r5, r6, lr}
 810297e:	4d0d      	ldr	r5, [pc, #52]	@ (81029b4 <__libc_init_array+0x38>)
 8102980:	4c0d      	ldr	r4, [pc, #52]	@ (81029b8 <__libc_init_array+0x3c>)
 8102982:	1b64      	subs	r4, r4, r5
 8102984:	10a4      	asrs	r4, r4, #2
 8102986:	2600      	movs	r6, #0
 8102988:	42a6      	cmp	r6, r4
 810298a:	d109      	bne.n	81029a0 <__libc_init_array+0x24>
 810298c:	4d0b      	ldr	r5, [pc, #44]	@ (81029bc <__libc_init_array+0x40>)
 810298e:	4c0c      	ldr	r4, [pc, #48]	@ (81029c0 <__libc_init_array+0x44>)
 8102990:	f000 f870 	bl	8102a74 <_init>
 8102994:	1b64      	subs	r4, r4, r5
 8102996:	10a4      	asrs	r4, r4, #2
 8102998:	2600      	movs	r6, #0
 810299a:	42a6      	cmp	r6, r4
 810299c:	d105      	bne.n	81029aa <__libc_init_array+0x2e>
 810299e:	bd70      	pop	{r4, r5, r6, pc}
 81029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 81029a4:	4798      	blx	r3
 81029a6:	3601      	adds	r6, #1
 81029a8:	e7ee      	b.n	8102988 <__libc_init_array+0xc>
 81029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 81029ae:	4798      	blx	r3
 81029b0:	3601      	adds	r6, #1
 81029b2:	e7f2      	b.n	810299a <__libc_init_array+0x1e>
 81029b4:	08102acc 	.word	0x08102acc
 81029b8:	08102acc 	.word	0x08102acc
 81029bc:	08102acc 	.word	0x08102acc
 81029c0:	08102ad0 	.word	0x08102ad0

081029c4 <__retarget_lock_acquire_recursive>:
 81029c4:	4770      	bx	lr

081029c6 <__retarget_lock_release_recursive>:
 81029c6:	4770      	bx	lr

081029c8 <_free_r>:
 81029c8:	b538      	push	{r3, r4, r5, lr}
 81029ca:	4605      	mov	r5, r0
 81029cc:	2900      	cmp	r1, #0
 81029ce:	d041      	beq.n	8102a54 <_free_r+0x8c>
 81029d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81029d4:	1f0c      	subs	r4, r1, #4
 81029d6:	2b00      	cmp	r3, #0
 81029d8:	bfb8      	it	lt
 81029da:	18e4      	addlt	r4, r4, r3
 81029dc:	f000 f83e 	bl	8102a5c <__malloc_lock>
 81029e0:	4a1d      	ldr	r2, [pc, #116]	@ (8102a58 <_free_r+0x90>)
 81029e2:	6813      	ldr	r3, [r2, #0]
 81029e4:	b933      	cbnz	r3, 81029f4 <_free_r+0x2c>
 81029e6:	6063      	str	r3, [r4, #4]
 81029e8:	6014      	str	r4, [r2, #0]
 81029ea:	4628      	mov	r0, r5
 81029ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81029f0:	f000 b83a 	b.w	8102a68 <__malloc_unlock>
 81029f4:	42a3      	cmp	r3, r4
 81029f6:	d908      	bls.n	8102a0a <_free_r+0x42>
 81029f8:	6820      	ldr	r0, [r4, #0]
 81029fa:	1821      	adds	r1, r4, r0
 81029fc:	428b      	cmp	r3, r1
 81029fe:	bf01      	itttt	eq
 8102a00:	6819      	ldreq	r1, [r3, #0]
 8102a02:	685b      	ldreq	r3, [r3, #4]
 8102a04:	1809      	addeq	r1, r1, r0
 8102a06:	6021      	streq	r1, [r4, #0]
 8102a08:	e7ed      	b.n	81029e6 <_free_r+0x1e>
 8102a0a:	461a      	mov	r2, r3
 8102a0c:	685b      	ldr	r3, [r3, #4]
 8102a0e:	b10b      	cbz	r3, 8102a14 <_free_r+0x4c>
 8102a10:	42a3      	cmp	r3, r4
 8102a12:	d9fa      	bls.n	8102a0a <_free_r+0x42>
 8102a14:	6811      	ldr	r1, [r2, #0]
 8102a16:	1850      	adds	r0, r2, r1
 8102a18:	42a0      	cmp	r0, r4
 8102a1a:	d10b      	bne.n	8102a34 <_free_r+0x6c>
 8102a1c:	6820      	ldr	r0, [r4, #0]
 8102a1e:	4401      	add	r1, r0
 8102a20:	1850      	adds	r0, r2, r1
 8102a22:	4283      	cmp	r3, r0
 8102a24:	6011      	str	r1, [r2, #0]
 8102a26:	d1e0      	bne.n	81029ea <_free_r+0x22>
 8102a28:	6818      	ldr	r0, [r3, #0]
 8102a2a:	685b      	ldr	r3, [r3, #4]
 8102a2c:	6053      	str	r3, [r2, #4]
 8102a2e:	4408      	add	r0, r1
 8102a30:	6010      	str	r0, [r2, #0]
 8102a32:	e7da      	b.n	81029ea <_free_r+0x22>
 8102a34:	d902      	bls.n	8102a3c <_free_r+0x74>
 8102a36:	230c      	movs	r3, #12
 8102a38:	602b      	str	r3, [r5, #0]
 8102a3a:	e7d6      	b.n	81029ea <_free_r+0x22>
 8102a3c:	6820      	ldr	r0, [r4, #0]
 8102a3e:	1821      	adds	r1, r4, r0
 8102a40:	428b      	cmp	r3, r1
 8102a42:	bf04      	itt	eq
 8102a44:	6819      	ldreq	r1, [r3, #0]
 8102a46:	685b      	ldreq	r3, [r3, #4]
 8102a48:	6063      	str	r3, [r4, #4]
 8102a4a:	bf04      	itt	eq
 8102a4c:	1809      	addeq	r1, r1, r0
 8102a4e:	6021      	streq	r1, [r4, #0]
 8102a50:	6054      	str	r4, [r2, #4]
 8102a52:	e7ca      	b.n	81029ea <_free_r+0x22>
 8102a54:	bd38      	pop	{r3, r4, r5, pc}
 8102a56:	bf00      	nop
 8102a58:	10004204 	.word	0x10004204

08102a5c <__malloc_lock>:
 8102a5c:	4801      	ldr	r0, [pc, #4]	@ (8102a64 <__malloc_lock+0x8>)
 8102a5e:	f7ff bfb1 	b.w	81029c4 <__retarget_lock_acquire_recursive>
 8102a62:	bf00      	nop
 8102a64:	10004200 	.word	0x10004200

08102a68 <__malloc_unlock>:
 8102a68:	4801      	ldr	r0, [pc, #4]	@ (8102a70 <__malloc_unlock+0x8>)
 8102a6a:	f7ff bfac 	b.w	81029c6 <__retarget_lock_release_recursive>
 8102a6e:	bf00      	nop
 8102a70:	10004200 	.word	0x10004200

08102a74 <_init>:
 8102a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102a76:	bf00      	nop
 8102a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102a7a:	bc08      	pop	{r3}
 8102a7c:	469e      	mov	lr, r3
 8102a7e:	4770      	bx	lr

08102a80 <_fini>:
 8102a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102a82:	bf00      	nop
 8102a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102a86:	bc08      	pop	{r3}
 8102a88:	469e      	mov	lr, r3
 8102a8a:	4770      	bx	lr
